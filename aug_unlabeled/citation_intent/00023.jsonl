{"text": "I 'm amazed that this is n't a dupe of an earlier question .- Nosredna Jun 5 ' 09 at 21:26 .@Nosredna : As was I. Indeed , i could have sworn i 'd even closed similar questions as duplicates !Why exactly do you \" have to \" start using AJAX in a project ?I 've come to internalize a fundamental of AJAX - driven web design as \" always make sure your web application still works without AJAX .\" Ideally , AJAX should enhance , enrich , and speed up functionality on pages that already do what they need to do .", "label": "", "metadata": {}}
{"text": "See gojko.net/2007/03/22/breaking-the-web - Skeolan Jun 5 ' 09 at 22:50 .@Skeolan , I 've done some RIAs that just do n't make sense without AJAX .Anything built with Cappuccino wo n't work without JavaScript .But certainly , anything that CAN work without AJAX SHOULD work without AJAX .- Nosredna Jun 5 ' 09 at 23:22 .Except the XML is usually JSON . :-)- Nosredna Jun 5 ' 09 at 20:51 .Excellent note .Thanks for pointing that out .-Corey Sunwold Jun 5 ' 09 at 20:53 .Haha .Or often it 's just a simple string .", "label": "", "metadata": {}}
{"text": "\" - Nosredna Jun 5 ' 09 at 20:55 .@Sergey : the data - transfer - the communication - happens asynchronously .That the client is implemented using a single thread is irrelevant - that single thread is free to continue processing , submitting additional requests , etc . while a request is being submitted and processed server - side .@csunwold : you can request the browser to block while waiting for the response , but this is usually considered a very bad thing indeed unless you are in complete control of the scenario ( browser , server , network ) .", "label": "", "metadata": {}}
{"text": "Some event ( can be a button press or other form event , or just something triggered by a timer ) occurs and triggers JavaScript code that asks the server for fresh information ( like the latest value of GOOG stock ) .There 's a piece of code on the server that collects the info you passed and sends some info back .That 's different from the page - serving job the server usually has .When the server answers , a callback function ( that you specified in the JavaScript call to the server ) is called with the info from the server .", "label": "", "metadata": {}}
{"text": "Very clear explanation of what the idea is behind ajax . - Ape - inago Jun 5 ' 09 at 21:29 . nice and simple intro .the only nit to pick is when you say \" that 's different from the page - serving job the server usually has \" , the only difference is that the content served is not meant for direct use by the HTML engine , but for the JavaScript code .- Javier Jun 5 ' 09 at 21:47 .Not to be confused with the cleaner , AJAX , the technology term , is really describing a framework or better stated as a technique for using XML and JavaScript to make asynchronous calls to server side code ... .", "label": "", "metadata": {}}
{"text": "jQuery Sample ( from jQuery site ) : when code is hit , the some.php file is hit passing the name and location values in . . .I 'd call it a technique .Not to be confused with the cleaner or the football team : ajax.nl :) - blank Jun 5 ' 09 at 21:09 .Wow .Talk about confusing .AJAX does n't have to be Async , JavaScript , or XML , and the AJAX football team does n't have to play football -- they can play soccer ! -Nosredna Jun 5 ' 09 at 21:15 .", "label": "", "metadata": {}}
{"text": "When the content arrives , an action is taken , usually performing some logic then updating the appearance of the page by manipulating the DOM tree ; meaning , inserting new HTML elements , deleting some html elements , etc . .The X in AJAX stands for XML , but it 's irrelevant .XML is just one of many ways to format the data that 's sent by the server .JSON is a much better alternative ( IMNSHO ) .Also , the server can send plain text or just regular html .The keyword here is asynchronous request .", "label": "", "metadata": {}}
{"text": "What Is Ajax ?Ajax is a hard beast to distill into a one - liner .The reason it is so hard is because it has two sides to it : .Ajax can be viewed as a set of technologies .Ajax : Asynchronous JavaScript and XML .The name Ajax came from the bundling of its enabling technologies : an asynchronous communication channel between the browser and server , JavaScript , and XML .Standards - based presentation using XHTML and CSS .Dynamic display and interaction using the browser 's DocumentObject Model ( DOM ) .", "label": "", "metadata": {}}
{"text": "Asynchronous data retrieval using XMLHttpRequest or XMLHTTP ( from Microsoft ) .JavaScript binding everything together .Although it is common to develop using these enabling technologies , it can quickly become more trouble than reward .Ajax : The Architecture .The exciting evolution that is Ajax is in how you architect web applications .Each event , or action , returns a full page back to the browser .That page is rendered to the user .This seems natural to us now .It made sense at the beginning of the Web , as the Web was n't really about applications .", "label": "", "metadata": {}}
{"text": "It was about document and data sharing , not interactivity in any meaningful sense .Picture a rich desktop application for a moment .Imagine what you would think if , on every click , all of the components on the application screen redrew from scratch .Seems a little nuts , does n't it ?On the Web , that was the world we inhabited until Ajax came along .Ajax is a new architecture .The important parts of this architecture are : .Small server - side events : Now components in a web application can make small requests back to a server , get some information , and tweak the page that is viewed by changing the DOM .", "label": "", "metadata": {}}
{"text": "Asynchronous : Requests posted back to the server do n't cause the browser to block .The user can continue to use other parts of the application , and the UI can be updated to alert the user that a request is taking place .onAnything : We can interact with the server based on almost anything the user does .Modern browsers trap most of the same user events as the operating system : mouseovers , mouse clicks , keypresses , etc .Any user event can cause an asynchronous request .This all sounds great , does n't it ?", "label": "", "metadata": {}}
{"text": "One of the greatest things about the Web is that anybody can use it .Having simple semantics helps that happen .If we go overboard , we might begin surprising the users with new UI abstractions .This is a common complaint with Flash UIs , where users are confronted with new symbols , metaphors , and required actions to achieve useful results . \"Ajax \" is the successfull marketing term introduced back in 2005 to replace the the older term \" DHTML \" that did not stick well . \"Ajax \" today is part of the history too as the new word - \" HTML5 \" emerge .", "label": "", "metadata": {}}
{"text": "I do n't think going from DHTML to AJAX was merely a name change .DHTML lacked the idea of going to the server for new information .It was more about altering the DOM with JavaScript .- Nosredna Jun 5 ' 09 at 21:04 .DHTML and AJAX refer to two separate things .Do you really think so ?The GMail - like applications were being built in 1999 when IE5 was out .The problem is that nobody needed them , since desktop was the platform .Moreover in these application the separation was done better - only presentation ( no mixture with data ) delivered on the initial load and only data ( no mixture with presentation ) communicated at the runtime .", "label": "", "metadata": {}}
{"text": "Sergey Ilinsky Jun 5 ' 09 at 21:10 .Indeed you can see DHTML as DOM+HTML+CSS+JS , Ajax as XMLHttpRequest+JSON and the HTML5 as the panacea for everything .This is your right , guys .Although I thought Nosredna would tend to agree to me .-Sergey Ilinsky Jun 5 ' 09 at 21:13 .DHTML is just adding dynamic ( JS ) code to HTML ( any version ) .AJAX is a technique used with JS to involve the server into the dynamicity of DHTML .HTML5 is a new version of HTML .three very different pieces of an evolving puzzle .", "label": "", "metadata": {}}
{"text": "There are no citations but the XMLHttpRequest object was first used in IE in year 1998 - 2000 .its not the correct forum .Thanks and Cheers . -Kapil D Jun 6 ' 09 at 9:54 .True that Microsoft 's browser innovation set the whole thing off , but I do n't think that 's the same as \" inventing AJAX .\" - Nosredna Jun 7 ' 09 at 19:11 .I agree guys . its not invented ... but , the XMLHttpRequest object was first created in Internet explorer . which is a key part of Ajax communication .... -", "label": "", "metadata": {}}
{"text": "AJAX stands for asynchronous JavaScript and XML , though it does n't always deal with XML data anymore .Essentially it boils down to using the XMLHttpRequest object through JavaScript running on the client to make a web request and retrieve some information that you use to update the state of your page without requiring a page refresh .When using it in an application you 're far better off investigating one of the common JavaScript frameworks that abstract away the differences between the various browsers and make it easy to manipulate the page after the request returns .Creative use of previously known technology .", "label": "", "metadata": {}}
{"text": "In AJAX it has been put together for innovative use anabling new applications of thechology known before .The REST comes to mind as similar type of advance ... .\" But be warned : rogue web browser usually do n't speak the same AJAX language as IE ...\" I would strongly suggest using a portable ajax lib for this reason . jquery comes to mind .- SingleNegationElimination Jun 6 ' 09 at 0:31 .AJAX is really fancy term for giving the browser the ability to refresh parts of its content with the need to reload an entire page .", "label": "", "metadata": {}}
{"text": "In fact in its early days it was done with with VBScript and Jscript and just called DHTML .Jesse James Garrett may have invented the AJAX term , but it was really Microsoft that invented the concept behind it .Back to the AJAX thingy ... when Jesse James Garrett back in 2005 he was mostly talking about the use of XMLHTTPRequest within Javascript code , and a dash of salt .Mono WCF Advent Day 11 : NetTcpBinding .Until today I have explain only two Bindings ( or three ) : BasicHttpBinding and WebHttpBinding ( and CustomBinding if it counts ) .", "label": "", "metadata": {}}
{"text": "Today I 'd explain TCP transport and NetTcpBinding and couple of new things .In short , NetTcpBinding is WCF - only , non - interoperable binding based on binary messages and TCP transport .Binary XML serialization .\" Binary XML \" is not really XML .It is fake , a buzzword .It actually means , a binary representation based on XML Infoset ( or something , depending on what it would describe ) .In WCF land , binary XML usually means an XML binary format used by XML reader and writer from XmlDictionaryReader .CreateBinaryReader ( ) and XmlDictionaryWriter .", "label": "", "metadata": {}}
{"text": "While we have corresponding implementation since 2005 , its data format has been recently published as [ MC - NBFX ] as part of Microsoft 's Windows Protocol documentation .In WCF , there is BinaryMessageEncodingBindingElement that uses this binary XML representation to serialize and deserialize messages .You can explicitly use it as message encoder part of your binding ( using CustomBinding ) as I did on Day 3 .NetTcpBindinguses this one without customization .Request / Response vs. Duplex .Message transport protocol also involves its own binary representation , but I have to explain \" channel types \" in prior .", "label": "", "metadata": {}}
{"text": "WCF is not only about it - it actually supports : . request - reply messaging : represented as IRequestChannel and IReplyChannel .A client sends a request to a server , then the server receives it and sends reply back to the client , and the client receives it . simplex messaging : represented as IOutputChannel and IInputChannel .A client sends a message to a server , then the server receives it .No further communication is performed . duplex messaging : represented as IDuplexChannel .Either of the communication sides may perform simplex messaging .They may also involve sessions and in such case they become IFooSessionChannel ( e.g. IRequestSessionChannel ) .", "label": "", "metadata": {}}
{"text": "It may look strange , but duplex messaging could be still used to support service method that has both invocation parameters ( request ) and return value ( reply ) .TCP binary data exchange .Back to NetTcpBinding , it supports two kinds of above , under different configuration ; NetTcpBinding has TransferMode property and it indicates the communication channel style .If the property value is TransferMode .Streamed , then it creates request - reply type channel .If it is TransferMode .Buffered , then it results in duplex channel .While duplex channel could be used for RPC - style service calls , the underlying communication protocol becomes different .", "label": "", "metadata": {}}
{"text": "The communication protocol is also documented , as [ MC - NMF ] and some related docs in Windows Protocol documentation .NetTcpBinding example .[NOTE ]It turned out that I brought some regressions which broke some binary message communication .It has been a while since I have implemented a couple of months ago .I 've been fixing some bugs these days .Limitation .NET NetTcpBinding is actually capable of handling some complicated things such as message security , but we do n't provide message security support yet .If you have NetTcpBinding configured to use message security , NetTcpBinding .", "label": "", "metadata": {}}
{"text": "Mode has to be set as None .No TrackBacks .Tag Info .AJAX ( Asynchronous JavaScript and XML ) is a technique for creating seamless interactive websites via asynchronous data exchange between client and server .AJAX facilitates communication with the server or partial page updates without a traditional page refresh .AJAX uses the XMLHttpRequest ( abbreviated XHR ) API to manage HTTP requests from inside the code .What makes AJAX so useful is the Asynchronous part .Prior to the advent of AJAX , data could only be sent during the client communication phase ( when the web page is first requested ) .", "label": "", "metadata": {}}
{"text": "Neither was cheap in terms of resources , since you would either load an entire data set into the client or reload the base page with each GET or POST .AJAX changed the web model by using JavaScript to asynchronously load data into the client .The client opens a new XMLHttpRequest and requests a web page , just like a normal client call would .This request , however , is typically aimed at a special page that loads only data for JavaScript .As such , the data that needs to be exchanged can be limited to just what is necessary for that particular function , saving time , memory and bandwidth .", "label": "", "metadata": {}}
{"text": "Although the X in AJAX stands for XML , any type of data can be sent and received . json ( JavaScript Object Notation ) has replaced XML as the data interchange format of choice .A major reason for this is that JavaScript natively parses JSON , while XML must be parsed by a much slower and cumbersome set of client libraries .Today , with the help of new responseType objects ( ArrayBuffer , Blob , etc ) , you can even request binary files via XMLHttpRequest , and build much stronger and fully featured web apps .", "label": "", "metadata": {}}
{"text": "Early versions of Internet Explorer ( IE 5 and 6 ) do n't support the native XHR API , although they do support an ActiveX API which has most of the capabilities of XHR ( an example of this is new ActiveXObject(\"MSXML2.XMLHTTP.3.0 \" ) ) .It is important to note that XMLHttpRequest , when used directly , must handle the communications layer and wait for the request response to be complete .This test is checking to make sure the request state is complete and received a valid 200 response .The reason is that this callback function will be called every time the client receives a packet from the server .", "label": "", "metadata": {}}
{"text": "AJAX Example .AJAX Example 2 .Because this adds some complexity to AJAX , there are many JavaScript libraries that will handle this interaction for you .Below is a commonly used library , jquery and how it simplifies AJAX .jQuery AJAX Example .Fini Alring 's Glossy Tech Zine .WarpXML .Purpose .Send and recieve XML documents from the web client , via JavaScript ( AJAX ) .Introduction to AJAX .I started as a Web Developer in 1996 , and quicky found the wonders of JavaScript , and has since been doing tons of stuff with it .", "label": "", "metadata": {}}
{"text": "In the beginning we had to use hidden frames and iframes to send data back and forth , without reloading the main window .But one of the best features for doing that has only been widely used for 3 - 4 years in cross - browser enviroments ( IE 5.0 introduced it ) .It\u00e2\u20ac \u2122 s the XMLHttpRequest API which allows the client to send and recieve XML documents thru ordinary HTTP GET & POST methods .The IO is handled asyncronously and uses events calls to inform the client of the status .WarpXML - Next Generation .", "label": "", "metadata": {}}
{"text": "But I also want to create a WarpXML Channel Manager which can handle all kind of stuff such as queing , error - handling , response - dispatching .And I 'm also compiling a set of utility functions such as form2XML ( ) , runtime XML Document creation tools and more .Note : There is currently no release here , please be patient I will try and release a beta soon , it will be working but might need testing , and no guarantees on the API not being changed .Bascially you will want to use the channel manager in the future , which will not be released quite yet , simply because I have yet to code it .", "label": "", "metadata": {}}
{"text": "UPDATE 2 : This project has been replaced by my JavaScript Web Toolkit currently in development , more info when it 's ready for public test and use .Version .History : . 2.0 - Aug 2005 - Reimplementation with sugar on top , motive is simplicity and power .1.2 - 12 Jun 2003 - Added extra verification to make sure it 's IE launching ActiveX stuff . 1.1 - 01 Oct 2002 - Modified and extended for a better world , ie . better Mozilla implementation ...Liferay Chat Portlet .Packt Publishing .A practical guide to building a complete corporate intranet with Liferay .", "label": "", "metadata": {}}
{"text": "In order to let employees enjoy chatting and instant messaging with others , we should use the Liferay Chat portlet .Let 's experience how to enjoy chatting and instant messaging first .As an administrator of \" Palm Tree Publications \" , you need to create a Page called \" Instant Messaging \" under the Page , \" Community \" , at the Book Lovers Community and also add the Chat portlet in the Page , \" Instant Messaging \" .Adding a Participant .First of all , log in as \" Palm Tree \" and do the following : .", "label": "", "metadata": {}}
{"text": "Add the Chat portlet in the Page , \" Instant Messaging \" of the Book Lovers Community where you want to set up chatting and an instant messaging environment , if Chat portlet is not already present .After adding the Chat portlet , you can view it as shown in the following figure .Then , we need to add a participant in the Chat portlet .As an editor at the Editorial department , \" Lotti Stein \" wants to ping the manager , \" David Berger \" , online and further share some comments about Liferay books .", "label": "", "metadata": {}}
{"text": "Login as \" Lotti Stein \" first .Go to the Page , \" Instant Messaging \" , \" under the Page , \" Community \" , at the Book Lovers Community Public Pages .Click on the Add icon .Press the Enter key .You will see the participant 's full name appear , such as \" David Berger \" .After adding more participants , such as \" John Stuckia \" and \" Rolf Hess \" , you can view all participants as shown in the following figure .Managing Participants .All the Users you 've invited will appear as a list of participants .", "label": "", "metadata": {}}
{"text": "Otherwise , it remains light gray ; for example , User \" John Stuckia \" .As shown in the following figure , only two Users ( \" David Berger \" and \" Lotti Stein \") are online in the server .For details about OpenFire , refer to the forthcoming section .In short , to remove a User from the list of participants , simply locate the User you want to remove by clicking on the icon to the left of the User name .Then , click the Remove icon .The selected User name will be removed from the list of participants .", "label": "", "metadata": {}}
{"text": "Irrespective of whether the participants are online or not , you can begin to Chat with them .For example , as an editor of editorial department , \" Lotti Stein \" wants to start chatting with the manager , \" David Berger \" .Let 's do it as follows : .Input the message , \" David , how are you ?Press the Enter key .Your messages will appear starting with the keyword , Me , in the message box ( as shown in the following figure ) .As a manager of the editorial department , \" David Berger \" will have to do the following , to receive the messages from \" Lotti Stein \" : .", "label": "", "metadata": {}}
{"text": "Go to the Page , \" Instant Messaging \" under the Page , \" Community \" at the Book Lovers Community Public Pages .Locate the participant , \" Lotti Stein \" .Press the Enter key .Your messages will appear starting with the keyword \" Me : \" in the message box and the messages sent by the other User , \" Lotti Stein \" here , will appear starting with the User 's name as shown in the following figure : .Generally , to start chat , locate the User you want to chat with , by the User name first .", "label": "", "metadata": {}}
{"text": "A Chat box will appear .You can chat with many Users at the same time .To do this , just click on the Users ' name link .Each Chat box is only for one unique User .The Chat box contains the User 's name on the upper left .You can close the current Chat box by clicking on the mark X to the upper right .Note that the Chat box is hidden in your current Page initiatively .Whenever a new message comes from the User , you are chatting with , the Chat box will pop up with the new message and possible previous messages .", "label": "", "metadata": {}}
{"text": "Your messages will appear starting with the keyword , Me , in the message box , and the messages sent by the other Users will appear starting with their User names .How Does It Work ?Liferay Chat portlet ( AJAX Instant Messaging ) allows Users to automatically chat over XMPP ( Jabber ) protocol with other Users .Instant Messaging lets members interact with other members in real time .A private room may exists for customers which could give them access to others .Liferay Chat portlet integrates with a Jabber server , that is , OpenFire .", "label": "", "metadata": {}}
{"text": "Use Instant Messaging .Instant messaging ( IM ) acts as a form of real - time communication among Users , based on typed text .It allows easy collaboration .In contrast to email , the participants know whether the peer is available .Conversations by instant messaging can be saved for later reference .One of the Instant Messaging protocols is Extensible Messaging and Presence Protocol ( XMPP ) .XMPP is an open , XML - inspired protocol for near - real - time , extensible instant messaging ( IM ) and presence information .It is the core protocol of the Jabber Instant Messaging and Presence technology .", "label": "", "metadata": {}}
{"text": "Similar to email , XMPP is an open system where a User having a domain name and a suitable Internet connection can run a Jabber server , and talk to others on other servers .On the other hand , another useful feature of the XMPP system is , transports , also called gateways .Through this , Users can access networks using other protocols .These protocols can be other instant messaging protocols , such as SMS or Email .The case is different from multi - protocol clients , as Users can access XMPP server at the server level .", "label": "", "metadata": {}}
{"text": "Another interesting feature of XMPP is the HTTP binding behind restricted firewalls .For instance , Community A User wants to chat with Community B User .Community A User and Community B User have accounts on the Jabber Server and the Third Part Server respectively .When Community A User types in and sends his / her message , a sequence of events is set in action , as shown in the following figure : .Community A User 's client sends his / her message to the Jabber Server .If Third Part Server is blocked on Jabber Server , the message is dropped .", "label": "", "metadata": {}}
{"text": "If Jabber Server is blocked on Third Part Server , the message is dropped .If Community B User is not currently connected , the message is stored for later delivery .Jabber is the Linux of instant messaging - an open , secure , ad - free alternative to consumer IM services .Employ AJAX .AJAX is Asynchronous JavaScript and XML .In short , AJAX makes portal Pages feel more responsive , by exchanging minimum amounts of data with the server .Thus , the entire portal Page does not have to be reloaded , when the User requests a change .", "label": "", "metadata": {}}
{"text": "In other words , AJAX acts as an asynchronous data transfer mechanism , that is , HTTP requests , between the browser and the portal server , allowing portal Pages to request a few bits of information from the server , instead of whole portal Pages .The AJAX makes portal applications smaller , faster and more user - friendly as shown in the following figure : .AJAX follows web standards supported by all major browsers .Thus , AJAX applications are browser and platform independent .The main advantage of AJAX is the separation of data , format , style , and function .", "label": "", "metadata": {}}
{"text": "The Chat portlet allows Users to chat over XMPP protocol with other logged - in Users automatically .In order to use the Chat portlet effectively , let 's set up an XMPP server and configure Liferay .Set up XMPP Server .First , we have to set up a XMPP ( Jabber ) server .Suppose that we use OpenFire as an XMPP ( Jabber ) server .Here are the steps to set up OpenFire as follows : .Click Launch Admin .Proceed with configuring OpenFire based on your requirements , as shown in the following figure .", "label": "", "metadata": {}}
{"text": "Then , you need to configure the XMPP server ( such as OpenFire ) with Liferay .You can simply open portal - ext . properties at $ LIFERAY_ROOT / webapps / Root / WEB - INF / classes .You just enter the following lines ( Suppose that OpenFire and Liferay are on the same server ) : .If you want to configure the integration by default settings , here are some options .The following is the complete set of properties related to the setup of XMPP server .You can also configure the Chat portlet when XMPP server is on a separate server .", "label": "", "metadata": {}}
{"text": "Note that you have to turn firewall off in Windows for the Chat Portlet to run properly .Summary .In this article we discussed how to add a participant for chatting , how to manage ( view and delete ) participants in the Chat portlet , how to start chatting , and how to set up the Chat portlet .Alerts & Offers .Series & Level .We understand your time is important .Uniquely amongst the major publishers , we seek to develop and publish the broadest range of learning and information products on each technology .", "label": "", "metadata": {}}
{"text": "This structured approach enables you to select the pathway which best suits your knowledge level , learning style and task objectives .Learning .As a new user , these step - by - step tutorial guides will give you all the practical skills necessary to become competent and efficient .Beginner 's Guide .Friendly , informal tutorials that provide a practical introduction using examples , activities , and challenges .Essentials .Fast paced , concentrated introductions showing the quickest way to put the tool to work in the real world .Cookbook .A collection of practical self - contained recipes that all users of the technology will find useful for building more powerful and reliable systems .", "label": "", "metadata": {}}
{"text": "Guides you through the most common types of project you 'll encounter , giving you end - to - end guidance on how to build your specific solution quickly and reliably .Mastering .Take your skills to the next level with advanced tutorials that will give you confidence to master the tool 's most powerful features .Starting .Accessible to readers adopting the topic , these titles get you into the tool or technology so that you can become an effective user .Understanding WebSockets versus Ajax / REST : Tutorial for Java Developers .There has been a lot of discussion lately about WebSockets .", "label": "", "metadata": {}}
{"text": "WebSocket wire protocol that handles the low - level handshaking , framing , and negotiation was just released in 2012 .WebSocket has been a multi year work in progress that just completed .At this point ( March 2012 ) , only Chrome and FireFox support the official WebSocket wire protocol .Safari supports it in the nightly build so it will likely be supported in the next version of Safari , and Internet Explorer will support it in Explorer 10 .JSR 356 was recently formed to define a standard API for creating WebSocket applications .Also even if you have both a client that works with WebSocket and a server which can handle WebSockets , you still need to be able to work through firewalls .", "label": "", "metadata": {}}
{"text": "The most reliable way to handle WebSockets is through a TLS connection ( sometimes incorrectly known as SSL ) .You can use WebSocket from a browser like you can Ajax / REST .But when should use WebSockets and when should you use Ajax / REST ?Also , can you use WebSocket from other clients ?This tutorial is going to try to answer these questions .Its aim is to be a compare , contrast and learn tutorial .In order to convey the information enough code is added to make this tutorial go beyond the pointy hair boss description .", "label": "", "metadata": {}}
{"text": "Let 's do a quick code comparison of the JavaScript and Java involved in doing Ajax and WebSockets to start off the discussion .To developers sometimes code examples are very demystifying .This tutorial covers both the JavaScript client side and Java server side so it is complete .The first part of this tutorial , we build a simple chat prototype .In the second part of this tutorial , we build a scalable chat room which could handle thousands of users .Ajax simple example client ( JavaScript / Browser / HTML 5 ) and server ( Resin Java Application Server ) .", "label": "", "metadata": {}}
{"text": "Sample Ajax \" Chat \" with RAW JavaScript / HTML 5 .Now typically , you do n't use XMLHttpRequest directly , instead you use jQuery or Prototype or any number of other JavaScript frameworks .But to ease the explanation , and to aid in comparison to WebSocket , let 's start with raw JavaScript ( later tutorials will use raw JavaScript , and jQuery ) .Quick Review of Ajax : sendChatMessageAjax ( 2 ) is JavaScript function that uses an instance of XMLHttpRequest called ajax ( 1 ) to send an HTTP POST request back to the server .", "label": "", "metadata": {}}
{"text": "Servlet that handles Ajax call .Now let 's cover the Java side of the house .Again , there are many Java frameworks that add layers between the Java backend and the HTML / JavaScript rendering to handle Ajax nicely .But for this discussion , let 's start with the simplest thing that will work , and in Java that is a Java HttpServlet as follows : .Sample Ajax \" Chat \" server with a RAW Java Servlet ( Resin Java Application Server / Java EE ) .This is fairly basic .Read the data ( 1 ) , convert data into a String ( 2 ) , send the data back to the browser with \" Hello from Server - side Ajax : \" prepended to to it ( 3 ) .", "label": "", "metadata": {}}
{"text": "Efforts are made to keep this JavaScript really simple and easy to understand so it is easy to compare against the previous Ajax example .The following code listing is a simple JavaScript Ajax , HTML 5 example that sends a \" Hello WebSocket World ? \" message to our server .The WebSocket example is a parallel as possible to the Ajax example .Sample WebSocket \" Chat \" server with a RAW Java Servlet ( Resin Java Application Server / Java EE ) .Quick Run down of the WebSocket code : sendChatMessageWebSocket ( 2 ) is JavaScript function that uses an instance of WebSocket called socket ( 1 ) to start a WebSocket connection ( HTTP upgrade ) with the server .", "label": "", "metadata": {}}
{"text": "Ok so they look very similar .Again , I am going to start with the similarities .The differences are to come .NEW 4 ) out.print(\"Hello from Server - side WebSocket : \" + text ) ; // ( 3 ) out.close ( ) ; //You have to close to send the message .This is fairly basic .Read the data ( 1 ) , convert data into a String ( 2 ) , send the data back to the browser with \" Hello from Server - side Ajax : \" prepended to it ( 3 ) .", "label": "", "metadata": {}}
{"text": "You can use WebSockets similar to how you should use Ajax .No real learning curve for simple cases .Some noticeable differences between WebSockets , and Ajax examples .The first difference between this and the Servlet version is that we are using a WebSocketListener .The WebSocketListener is a Resin class as Java EE 6 does not have WebSocket support .Java EE 6 predates Websocket .The WebSocketListener looks fairly similar to the Servlet API as much as possible by design .Note that the current plan for Java EE 7 is to include WebSocket support .", "label": "", "metadata": {}}
{"text": "From a programming perspective , so far , there is no real difference between the WebSocket version and the Ajax / Servlet version .There is a little bit of handshaking that the Servlet has to do which we will cover later , but essentially if this is all you wanted , then WebSocket looks a lot like Ajax .Now since we are developing a chat example , eventually we will want to push messages from other people who are in the chat session .This is where WebSockets is going to shine .What is WebSockets again ?", "label": "", "metadata": {}}
{"text": "This new feature enables richer user interactions .Both the browser and the server can send asynchronous messages over a single TCP socket , without doing less scalable hacks like long polling or comet .The communication starts out like HTTP and then upgrades after a HTTP handshake to bidirectional WebSockets .A WebSocket is a bidirectional message stream between the client and the server .While all modern browsers support some version of WebSocket as of March 2012 few application servers and web servers do .In order for browsers to take advantage of WebSockets , you need to have an application server or web server that can handle WebSockets .", "label": "", "metadata": {}}
{"text": "There are several Java WebSocket implementations out in the wild .Resin WebSocket support is the most mature and gets used by more high traffic sites .If you are not familiar with Resin Server , it is a scalable , fast , mature Java EE certified application / web server .Its speed is faster than NginX and Apache HTTPD , and it is more scalable .All of Resin 's cloud / clustering communication works on top of WebSocket .Resin 's WebSocket support predates most implementations .If you are serious about WebSockets and Java , then Resin Server is an obvious contender .", "label": "", "metadata": {}}
{"text": "Since WebSocket is a streaming , framing wire protocol , naturally Resin Server supports streams .It is easy to for Java developers to go from streams to byte [ ] and String as shown in the above examples .Using byte [ ] and String are probably ok for some department level or company level applications , but if for anything else you really need to use streams to maximize the throughput and minimize contention .Regarding a Frame oriented API , when you program with TCP / IP you never have an application developer API that exposes TCP / IP packets bit mask fields , in the same way the WebSocket Frame is the wrong level of abstraction for most developers .", "label": "", "metadata": {}}
{"text": "That said , we are always looking for feedback .Now that we have the background in the why of the API , let 's discuss how the streaming works .WebSocket Streaming , Frames and Messaging .WebSocket is unlike Ajax / HTTP in that the WebSocket connection stays open and it is bidirectional .This is perfect for a chat application or a near real time stock price app , etc . .WebSockets have two types of messages , binary ( byte [ ] ) , and text ( String ) .If your message is bigger than a single Frame then it gets sent as chunks in multiple frames .", "label": "", "metadata": {}}
{"text": "If you are sending a JSON payload to the browser that is 4 K then you are sending 4 Frames .( Actual framing varies , this are example sizes for discussion . )To begin a message you need to send a stream of WebSocket frames .To start the message you call context.startTextMessage ( ) ( NEW 4 ) .If your message does not fit into one frame , then a another frame is created and marked that it continues the previous frame in the series using a \" continues \" flag .In WebSockets the final frame in a message is marked with a \" finished \" flag .", "label": "", "metadata": {}}
{"text": "This final frame says that you are done sending the current binary or text message .The out.close ( 5 ) is your way to tell Resin 's WebSocket implementation that the message is done so go ahead and mark the current frame as finished and then send that as the last frame .On the client end of the wire , WebSockets client implementation will see that the it got the last frame .The JavaScript WebSocket client will only call socket.onmessage ( WebSocket ) after it receives the Frame marked final .HTML 5 has the luxury of handling whole message at a time because efficiency is not a concern for scalability like it is on the server - side of the house .", "label": "", "metadata": {}}
{"text": "That is ok if you do n't .Just remember to call close , and then Resin WebSockets will complete sending the message just like you would write output to a Servlet or write to a file .WebSocket frames are a nice fit with the Java IO Stream and Reader / Writer APIs .Again the JavaScript API for WebSocket only deals with buffers like String and byte [ ] ( these are String and ArrayBuffer or Blob in JavaScript speak ) .WebSocket is a generally purpose framing / wire protocol so expect a lot of other uses outside of HTML 5 .", "label": "", "metadata": {}}
{"text": "If you are developing a new protocol that needs framing , you can just build your new protocol on top of WebSocket .Consider framing solved .WebSockets are extensible , and you could build other protocol on top of it .You could for example build a version of IIOP on top of WebSockets .Expect extensions for flow control , multiplexing , and compression .Protocol negotiation .HTTP upgrade was added to the HTTP specification to support changing to new versions of HTTP more flawlessly .To use WebSockets which is a different wire protocol then HTTP , the client must do an HTTP upgrade , and tell the server that it supports WebSockets .", "label": "", "metadata": {}}
{"text": "If the server supports WebSocket it sends an acknowledgement and then the conversation begins .To register our ChatWebSocketListener you have to create a Servlet that handles this special request as follows : .The above checks the subprotocol that the HTML 5 browser client expects via the Sec - WebSocket - Protocol HTTP header ( 1 ) .Then it creates and instance of the ChatWebSocketListener that we covered earlier ( 2 ) and registers that with the WebSocketServletRequest ( 4 ) via the startWebSocket method .The client , HTML 5 Browser client , can request that the server use a specific subprotocol by including the Sec - WebSocket - Protocol field in its handshake .", "label": "", "metadata": {}}
{"text": "A subprotocol is basically the version of the wire format .It is an indication of what kinds of marshaling you are doing .Let 's say you worked at Caucho Technology Inc.The HTTP header handshake from the browser could look something like this : .The part of the handshake from the server might look like this : .The WebSocketListener is the main area of focus for the server - side implementation .It is similar in concept to a Java Servlet at first blush .Unlike a Servlet , a WebSocketListener is a single - threaded handler for events and messages from the client .", "label": "", "metadata": {}}
{"text": "The Reader , PrintWriter and WebSocketContext are not thread safe and should only be accessed by one thread at a time .It is important that you only access these from one thread at a time .This is similar to the normal Servlet programming as it also works with streams and reader / writers which can only be accessed by one thread at a time .The onReadText should not do anything that is going to block if you are trying to write a scalable application .Blocking might be okay for department level or company level application .", "label": "", "metadata": {}}
{"text": "Higher scaling application would need to use some sort of queuing mechanisms , we will cover this in a later tutorial .The big take away that I want you to get from this discussion is this : although the programming model may look the same from Ajax / Servlet to WebSocket , it is very different .Ajax / REST is request / response .WebSocket is messaging .With WebSocket the connection stays open .It is expected that the server is calling the client at will .It is common in WebSockets for the reading and writing to happen in different threads .", "label": "", "metadata": {}}
{"text": "As was mentioned earlier , we are going to cover building a full HTML 5 chat client , but to whet your appetite without going into crazy complexity , let 's change the last example from a traditional Request / Response to a full blown bidirectional connection .The HTML 5 client is sending messages on one end , while the server is at the same time sending messages to the HTML 5 client .In this example , we ask the server for a thread to fire off a chat message sender .The message sender gets messages from a queue .", "label": "", "metadata": {}}
{"text": "If it does not hear from the client in five seconds , it starts nagging it with a \" Are you there ? \" message .To do this , you do the following .( THE EXAMPLE BELOW IS UNDER REVIEW BY PEERS .It may change . )You change the client to connect as soon as the page loads as follows ( full code listings will be at end of tutorial ) : .You are going to handle the WebSocketListener.onStart method to start up this new message deliverer .WebSocketListener.onStart needs to schedule a task with the servers executor ( java.util.concurrent.", "label": "", "metadata": {}}
{"text": "The task will listen for items that the onReadText puts on the queue .Then change the WebSocketListener to create a BlockingQueue ( 1 ) and @Inject a ThreadPoolExecutor ( 2 ) .Notice that the onReadText no longer handles the writing of message directly .Instead it adds the text message to the queue ( 3 ) .The onStart method gets called as soon as WebSocket connection is established and ready to receive messages ( from either side ) .Change the onStart method to create the queue , then execute a task ( 4 ) with the executor that handles the echoing of messages and the sending of our nagging reminders .", "label": "", "metadata": {}}
{"text": "The close flag is a volatile boolean that is set by the ChatWebSocketListener.onDisconnect which gets called when the connection is shut down .Each iteration of the loop , the task checks to see if there are any more messages on the queue ( 7 ) .If there is a message , then it echoes that message back using the ( context ) WebSocketContext ( 8) .Just to proove that we can send messages without getting told to by the client , every five seconds we send \" I have not heard from you in a while \" , \" Are you stil there ? \" , and \" WAKE UP ! ! ! ! ! ! ! !", "label": "", "metadata": {}}
{"text": "Note that only the runnable task 's thread accesses the WebSocketContext .Only one thread at a time can access a WebSocketContext so also note that the onReadText no longer accesses the WebSocketContext like it did in the first example .WebSocketContext is not thread safe .This is why only one thread can access it .In the first example the onReadText accessed it directly .If it still did that , then this would be broke and we would have thread synchronization issues .If the thread that was running onReadText and the thread that is running this task both wrote at the same time , given the streaming nature of WebSockets and the need to sends frames in sequences , bad things could happen .", "label": "", "metadata": {}}
{"text": "I hope you can see the value in it , and understand some key differences between Ajax and WebSockets as well as some clear similarities .Going through the process of writing these tutorials has given us some insight into how to make the WebSocket API more complete .We plan on updating these tutorials as we improve the API .In addition , the next installment in this series is going to cover building a multi user chat system so stay tuned .Now as promised here are the complete code examples .Simple Ajax / WebSocket HTML 5 client for driving code .", "label": "", "metadata": {}}
{"text": "Notice we subclass AbstractWebSocketListener instead of implement WebSocketListener .The AbstractWebSocketListener implements WebSocketListener so you can ignore the callback handler that you do not care about .The key take away from this tutorial is this : WebSockets is bidirectional messaging , Servlet / Ajax / REST is request / response .In part two of this tutorial , we build a working chat client that you can use from multiple browsers .Traditionally the HTTP protocol only allows one request / response per TCP connection .Asynchronous JavaScript and XML ( AJAX ) allowed clients to send and receive data asynchronously ( in the background without a page refresh ) to the server , however , AJAX requires the client to initiate the requests and wait for the server responses ( half - duplex ) .", "label": "", "metadata": {}}
{"text": "WebSockets allow the client / server to create a ' full - duplex ' ( two - way ) communication channel , allowing the client and server to truly communicate asynchronously .WebSockets conduct their initial ' upgrade ' handshake over HTTP from then on all communication is carried out over TCP channels by use of frames .Traditionally the HTTP protocol only allows one request / response per TCP connection .Asynchronous JavaScript and XML ( AJAX ) allowed clients to send and receive data asynchronously ( in the background without a page refresh ) to the server , however , AJAX requires the client to initiate the requests and wait for the server responses ( half - duplex ) .", "label": "", "metadata": {}}
{"text": "WebSockets allow the client / server to create a ' full - duplex ' ( two - way ) communication channel , allowing the client and server to truly communicate asynchronously .WebSockets conduct their initial ' upgrade ' handshake over HTTP . and .from then on all communication is carried out over TCP channels by use of frames .Traditionally the HTTP protocol only allows one request / response per TCP connection .Asynchronous JavaScript and XML ( AJAX ) allowed clients to send and receive data asynchronously ( in the background without a page refresh ) to the server , however , AJAX requires the client to initiate the requests and wait for the server responses ( half - duplex ) .", "label": "", "metadata": {}}
{"text": "WebSockets allow the client / server to create a ' full - duplex ' ( two - way ) communication channel , allowing the client and server to truly communicate asynchronously .WebSockets conduct their initial ' upgrade ' handshake over HTTP and from then on all communication is carried out over TCP channels by use of frames .ZAP is an easy to use integrated penetration testing tool for finding vulnerabilities in web applications .It is designed to be used by people with a wide range of security experience and as such is ideal for developers and functional testers who are new to penetration testing .", "label": "", "metadata": {}}
{"text": "Traditionally the HTTP protocol only allows one request / response per TCP connection .Asynchronous JavaScript and XML ( AJAX ) allowed clients to send and receive data asynchronously ( in the background without a page refresh ) to the server , however , AJAX requires the client to initiate the requests and wait for the server responses ( half - duplex ) .HTML5WebSockets allow the client to create a ' full - duplex ' ( two - way ) communication channel , allowing the client and server to truly communicate asynchronously .WebSockets conduct their initial ' upgrade ' handshake over HTTP from then on all communication is carried out over TCP channels by use of frames .", "label": "", "metadata": {}}
{"text": "Asynchronous JavaScript and XML ( AJAX ) allowed clients to send and receive data asynchronously ( in the background without a page refresh ) to the server , however , AJAX requires the client to initiate the requests and wait for the server responses ( half - duplex ) .HTML5WebSockets allow the client ./server . to create a ' full - duplex ' ( two - way ) communication channel , allowing the client and server to truly communicate asynchronously .WebSockets conduct their initial ' upgrade ' handshake over HTTP from then on all communication is carried out over TCP channels by use of frames .", "label": "", "metadata": {}}
{"text": "Asynchronous JavaScript and XML ( AJAX ) allowed clients to send and receive data asynchronously ( in the background without a page refresh ) to the server , however , AJAX requires the client to initiate the requests and wait for the server responses ( half - duplex ) .HTML5WebSockets allow the client / server to create a ' full - duplex ' ( two - way ) communication channel , allowing the client and server to truly communicate asynchronously .WebSockets conduct their initial ' upgrade ' handshake over HTTP from then on all communication is carried out over TCP channels by use of frames .", "label": "", "metadata": {}}
{"text": "It is designed to be used by people with a wide range of security experience and as such is ideal for developers and functional testers who are new to penetration testing .ZAP provides automated scanners as well as a set of tools that allow you to find security vulnerabilities manually .Traditionally the HTTP protocol only allows one request / response per TCP connection .Asynchronous JavaScript and XML ( AJAX ) allowed clients to send and receive data asynchronously ( in the background without a page refresh ) to the server , however , AJAX requires the client to initiate the requests and wait for the responses .", "label": "", "metadata": {}}
{"text": "WebSockets allow the client to create a ' full - duplex ' ( two - way ) communication channel , allowing the client and server to truly communicate asynchronously .WebSockets conduct .a . handshake .Traditionally the HTTP protocol only allows one request / response per TCP connection .Asynchronous JavaScript and XML ( AJAX ) allowed clients to send and receive data asynchronously ( in the background without a page refresh ) to the server , however , AJAX requires the client to initiate the requests and wait for the .( half - duplex ) .", "label": "", "metadata": {}}
{"text": "WebSockets allow the client to create a ' full - duplex ' ( two - way ) communication channel , allowing the client and server to truly communicate asynchronously .WebSockets conduct . handshake .over HTTP from then on all communication is carried out over TCP channels by use of frames .Traditionally the HTTP protocol only allows one request / response per TCP connection .Asynchronous JavaScript and XML ( AJAX ) allowed clients to send and receive data asynchronously ( in the background without a page refresh ) to the server , however , AJAX requires the client to initiate the requests and wait for the server responses ( half - duplex ) .", "label": "", "metadata": {}}
{"text": "WebSockets allow the client to create a ' full - duplex ' ( two - way ) communication channel , allowing the client and server to truly communicate asynchronously .WebSockets conduct their initial ' upgrade ' handshake over HTTP from then on all communication is carried out over TCP channels by use of frames .ZAP is an easy to use integrated penetration testing tool for finding vulnerabilities in web applications .It is designed to be used by people with a wide range of security experience and as such is ideal for developers and functional testers who are new to penetration testing .", "label": "", "metadata": {}}
{"text": "We all know HTTP , the communication layer of Web 1.0 .Recently , we also started to realize some of the limitations of HTTP .Recently there are techniques to be employed for enabling bi - directional communications on top of HTTP .These techniques are being called as \" Comet . \"However , Comet addresses only a small part of the challenge .There are a lot of other challenges to be addressed in order for the web communications layer to work well .The Web needs an enhanced communication layer in order to be more broadly adopted for enterprise business applications .", "label": "", "metadata": {}}
{"text": "He further describes the four components of an Internet Messaging Bus : .Guaranteed delivery .Once and only once delivery .Guaranteed order of delivery .Server push and client pull .I always say \" Web 1.0 architecture is seriously flawed \" from an application point of view .The limitation of HTTP is one of these flaws .It is no surprise that the common perception is that Web applications are unreliable and problematic .Users often experience \" 404 , \" \" resource unavailable \" and \" network unavailable \" errors or even a mysterious application error telling them to \" retry the application later .", "label": "", "metadata": {}}
{"text": "In order for the web to be adopted for enterprise business applications , Internet Messaging Bus is a must - have requirement .What do you think the form of such an Internet Messaging Bus might take ?It 's easy enough to see JMS fitting the requirements for an internal bus , but what would an actual external bus look like ?Read your spec again on reliable sequenced packets .More to the point .Talking about using HTTP as a message bus is like the guy who uses Excel as a wordprocessor .This would build on TCP not HTTP .", "label": "", "metadata": {}}
{"text": "Of course , as for the point of this article , TCP does n't provide a server - push model .And IP does n't have any such guarantees of packet delivery .Of course , this is why UDP is capable of so much more throughput than TCP .The biggest problem today with the web is that there is no real \" push \" technology available : it almost inevitably boils down to bandwidth hogging and process - intensive clientside polling .What is needed is true push - technology , where a server can push data and updates out to clients who are either connected or registered with the server .", "label": "", "metadata": {}}
{"text": "but they are neither standard or widely available beyond commercial products and a small handful of open source projects ( Commercial / open source JMS for example , SonicMQ , ActiveMQ ) .Other than that , there are many creative ways one can achieve the same effect but it all boils down to something one has to embed into a browser that is non - standard ( via applets / activex controls ) .It would be nice if there were a standard client / server messaging protocol for cross - platform browsers and servers , let 's write one ;-) Jin .", "label": "", "metadata": {}}
{"text": "http is over(ab)used .OK it is easy to only use your 80-port and block all others , but I think it 's time to reconsider the use of internet as a means of distributed computing .I think that NAT is one of the biggest problems here .If everyone had an IP address , push would be closer to reality .Maybe we need a new type of firewall / router that would help with \" push \" AND NAT ?This firewall / router would accept requests for specific internal MAC addresses and forward packets to those clients .", "label": "", "metadata": {}}
{"text": "Is this already possible ?This is an interesting issue that I 've been thinking about a lot .You want it on every user desktop and to have broad server support .That 's what turned HTTP into a platform .Any protocol evolution will also need to share that quality .For those reasons , I think that instant messaging , and especially the XMPP ( Jabber ) protocol make for a very compelling platform .XMPP is also branching out into more than just IM , becoming a full real - time communication protocol including VOIP .", "label": "", "metadata": {}}
{"text": "Regards , Matt .I think that instant messaging , and especially the XMPP ( Jabber ) protocol make for a very compelling platform .I think it 's coming a time when we 'll need that every desktop be a server , too .We want IP addresses for everybody , we need push technologies , we need stateful protocols ...This thread is about the flaws of HTTP , and I 've read another thread about the flaws of the current client platform , that is , browsers .Put these two together and we see we need servers everywhere .", "label": "", "metadata": {}}
{"text": "For short , I think we ( maybe ) need a stateful protocol , another generation of client platform with some basic server abilities and fixed IP addresses .Is this it ?For short , I think we ( maybe ) need a stateful protocol , another generation of client platform with some basic server abilities and fixed IP addresses .Is this it ?I do n't think NAT networks are going to go away .So , I can connect to my server and then talk to anyone else on the internet from there ( like email ) .", "label": "", "metadata": {}}
{"text": "For XMPP , all this work is being done through an extension called Jingle .You use Jingle when you want to do things like voice , video , and perhaps file transfer ( although there are existing file transfer solutions as well ) .When using ICE with Jingle , that 's a pretty powerful combo .How scalable are open connections via XMPP .On a typical dual processor machine with 2 GB of RAM , how may open connections can be handled ?With federation can I actually connect two people / clients between two servers ?", "label": "", "metadata": {}}
{"text": "XMPP implementations have been proven to scale .For example , Google Talk services millions of users .And yes , federation lets you connect between multiple different servers and it actually works well . :) Regards , Matt .I really like P2P technologies .Some time ago , I and a partner modeled a workflow system based in a P2P interface .Just like we receive messages with MSN Messenger , we planned to receive work lists , work items and other notifications via P2P and IM .Well , it never left blueprints ... .XMPP is a constant connection , which allows the server to push data any time it needs to .", "label": "", "metadata": {}}
{"text": "I may be completely wrong , but constant connections seem like waste of resources .It would be more appropriate to ensure the client is reachable by the server when it needs to send data , do n't you think ?Wow , it 's nice that folks are catching on to this .Apache ActiveMQ and Jetty have been working in tandem to provide a highly scalable message bus API to javascript clients and it 's been available for several months !I think we will see more of this in kind of thing from the vendors .But remember ... ActiveMQ brought it to you first and free !", "label": "", "metadata": {}}
{"text": "XMMP does not cut it .It is a fine protocol but not suitable for Coach Wei 's internet service bus .The problems are that it is suitable for XML only and that it can only send one message at the same time .If you need to do more , you must set up a direct connection .And who will define that connection ?Meet BEEP .Blocks Extensible Exchange Protocol ( aka BXXP ) is a feature rich protocol that enables you to create powerfull application protocols .Messages are exchanged within the context of a channel .", "label": "", "metadata": {}}
{"text": "APEX connects multiple BEEP clients in a distributed way .Of course , the advantage of XMMP is that is already big .But be aware of making XMMP the HTTP of tomorrow .Actually , XMPP might cut it ( it does n't all have to be xml does it ? )I only say this b / c if the projects like smack gain enough traction than enough features may get developed to make it compelling .I read they are working on an AS3 port on the forum ( with Flex2 at least the eye candy would be nice ;-) , and if so it may be a cheaper alternative to FDS .", "label": "", "metadata": {}}
