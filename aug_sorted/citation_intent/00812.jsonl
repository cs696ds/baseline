{"text": "Several ways for choosing the words and discourse relations are discussed using a large number of examples .Once the lexicalisation decides how different concepts are expressed in words and syntactic structures , the aggregation module improves the readability of the generated text by combining similar sentences .", "label": "", "metadata": {}, "score": "29.320004"}
{"text": "Most of these systems are used later in the book for exemplification and comparison .Natural language generation is a field in which difficult problems arise .The second chapter of the book discusses some of these problems .For example , the cost of building an NLG system has to be considered .", "label": "", "metadata": {}, "score": "30.31663"}
{"text": "Moreover , it is emphasised that there are cases when people are reluctant to use an NLG system ( especially in those cases when errors in text can have important implications e.g. health related contexts ) .However , when an NLG system is built , a corpus to determine the user requirements has to be assembled .", "label": "", "metadata": {}, "score": "32.245018"}
{"text": "Related topics , including corpora collection , elicitation , and annotation of creative language usage , will also be considered , as long as their relevance to automatic systems is clearly pointed out .A ( non - exhaustive ) list of recent references is provided below to further illustrate the range of possible workshop topics .", "label": "", "metadata": {}, "score": "34.63539"}
{"text": "Related topics , including corpora collection , elicitation , and annotation of creative language usage , will also be considered , as long as their relevance to automatic systems is clearly demonstrated .Paul Cook and Suzanne Stevenson ( 2010 ) .", "label": "", "metadata": {}, "score": "34.718235"}
{"text": "Depending on the state of the art of approaches to the various phenomena and languages , preference will be given to work on deeper processing ( e.g. , understanding , goal - driven generation ) rather than shallow approaches ( e.g. , binary classication , random generation ) .", "label": "", "metadata": {}, "score": "35.19677"}
{"text": "On the other hand , generating and recognizing creative language presents a tremendous challenge for natural language processing ( NLP ) systems .The recognition of instances of linguistic creativity , and the computation of their meaning , constitute one of the most challenging problems for a variety of NLP tasks , such as machine translation , text summarization , information retrieval , dialog systems , and sentiment analysis .", "label": "", "metadata": {}, "score": "38.762665"}
{"text": "The recognition of instances of linguistic creativity and the computation of their meaning constitute one of the most challenging problems for a variety of Natural Language Processing tasks , such as machine translation , text summarization , information retrieval , question answering , and sentiment analysis .", "label": "", "metadata": {}, "score": "38.889927"}
{"text": "Within the scope of the workshop , the event is intended to be interdisciplinary .Besides contributions from an NLP perspective , we also welcome the participation of researchers who deal with linguistic creativity from perspectives other than NLP , such as cognitive science , psychology , neuroscience , philosophy , the arts , and human - computer interaction .", "label": "", "metadata": {}, "score": "39.15962"}
{"text": "In addition to this , comparison with well- known existing systems is made ( two of them being the above mentioned ones for generating weather reports and smoking- cessation letters ) .SYNOPSIS In chapter one , natural language generation is defined as a task which \" typically starts from a non - linguistic representation of information as input ... uses knowledge about language and the application domain to automatically produce reports , documents , explanations and other kind of texts \" .", "label": "", "metadata": {}, "score": "39.227196"}
{"text": "The natural language generation systems listed below are available for download over the web .If you know of a system which is not listed here , please click on Edit in the upper left corner of this page and add the system yourself .", "label": "", "metadata": {}, "score": "40.136803"}
{"text": "The natural language generation systems listed below are available for download over the web .If you know of a system which is not listed here , please click on Edit in the upper left corner of this page and add the system yourself .", "label": "", "metadata": {}, "score": "40.136803"}
{"text": "New approaches might combine information from different modalities .Creativity - aware systems will improve the contribution Computational Linguistics has to offer to many practical areas , including education , entertainment , and engineering .Within the scope of the workshop , the event is intended to be interdisciplinary .", "label": "", "metadata": {}, "score": "40.554516"}
{"text": "The document planner produces a general structure of the document .As the authors argue in chapter 5 , this structure is too general to produce text directly from it .As a result , they introduce an intermediate module , microplanning , which involves lexicalisation , aggregation and generation of referring expressions .", "label": "", "metadata": {}, "score": "40.95221"}
{"text": "See here for publications describing NaturalOWL .( GPL ) .NLGen .The NLGen natural language generation system applies the SegSim strategy for generating English sentences .Probabilistic inference for sentence construction is based on a statistical analysis of RelEx output .", "label": "", "metadata": {}, "score": "42.87422"}
{"text": "See here for publications describing NaturalOWL .( GPL ) .NLGen .The NLGen natural language generation system applies the SegSim strategy for generating English sentences .Probabilistic inference for sentence construction is based on a statistical analysis of RelEx output .", "label": "", "metadata": {}, "score": "42.87422"}
{"text": "See here for publications describing NaturalOWL .( GPL ) .NLGen .The NLGen natural language generation system applies the SegSim strategy for generating English sentences .Probabilistic inference for sentence construction is based on a statistical analysis of RelEx output .", "label": "", "metadata": {}, "score": "42.87422"}
{"text": "See here for publications describing NaturalOWL .( GPL ) .NLGen .The NLGen natural language generation system applies the SegSim strategy for generating English sentences .Probabilistic inference for sentence construction is based on a statistical analysis of RelEx output .", "label": "", "metadata": {}, "score": "42.87422"}
{"text": "See here for publications describing NaturalOWL .( GPL ) .NLGen .The NLGen natural language generation system applies the SegSim strategy for generating English sentences .Probabilistic inference for sentence construction is based on a statistical analysis of RelEx output .", "label": "", "metadata": {}, "score": "42.87422"}
{"text": "See here for publications describing NaturalOWL .( GPL ) .NLGen .The NLGen natural language generation system applies the SegSim strategy for generating English sentences .Probabilistic inference for sentence construction is based on a statistical analysis of RelEx output .", "label": "", "metadata": {}, "score": "42.87422"}
{"text": "The chosen architecture is also compared with other existing layouts , emphasising its advantages and weaknesses .A positive aspect of this discussion is the fact that it can be used not only for building NLG systems , but also for all kinds of natural language systems .", "label": "", "metadata": {}, "score": "43.46939"}
{"text": "However , a weak point of the book is the authors ' assumption about the reader 's knowledge .The formalisms used for examples are used without being explained .It is true that the attribute - value matrix is a well - known format for representation of data , but still a short explanation would have been helpful .", "label": "", "metadata": {}, "score": "43.786854"}
{"text": "The KPML system offers a robust , mature platform for large - scale grammar engineering that is particularly oriented to multilingual grammar development and generation .It is particularly targetted at providing resources for realistic but broad - coverage generation applications , where both flexibility of expression and speed of generation are at issue - for example in online webpage generation or spoken dialogue .", "label": "", "metadata": {}, "score": "45.444588"}
{"text": "The MUG system runs MUG grammars with fixed ( test cases ) and arbitrary input specifications to produce output in a natural language , graphical user interface and possibly in other modes .MUG Workbench can serve to inspect the data - structures used during generation .", "label": "", "metadata": {}, "score": "46.603096"}
{"text": "The MUG system runs MUG grammars with fixed ( test cases ) and arbitrary input specifications to produce output in a natural language , graphical user interface and possibly in other modes .MUG Workbench can serve to inspect the data - structures used during generation .", "label": "", "metadata": {}, "score": "46.603096"}
{"text": "The MUG system runs MUG grammars with fixed ( test cases ) and arbitrary input specifications to produce output in a natural language , graphical user interface and possibly in other modes .MUG Workbench can serve to inspect the data - structures used during generation .", "label": "", "metadata": {}, "score": "46.603096"}
{"text": "The MUG system runs MUG grammars with fixed ( test cases ) and arbitrary input specifications to produce output in a natural language , graphical user interface and possibly in other modes .MUG Workbench can serve to inspect the data - structures used during generation .", "label": "", "metadata": {}, "score": "46.603096"}
{"text": "The MUG system runs MUG grammars with fixed ( test cases ) and arbitrary input specifications to produce output in a natural language , graphical user interface and possibly in other modes .MUG Workbench can serve to inspect the data - structures used during generation .", "label": "", "metadata": {}, "score": "46.603096"}
{"text": "The MUG system runs MUG grammars with fixed ( test cases ) and arbitrary input specifications to produce output in a natural language , graphical user interface and possibly in other modes .MUG Workbench can serve to inspect the data - structures used during generation .", "label": "", "metadata": {}, "score": "46.603096"}
{"text": "An implemented system that ' ' ' expresses formal representations of stories ' ' ' in natural language . \"Computational Humour : Utilizing Cross - Reference Ambiguity for Conversational Jokes .\" In F. Masulli , S. Mitra and G. Pasi ( eds . )", "label": "", "metadata": {}, "score": "46.959244"}
{"text": "Written in a C++-like style , it could confuse some readers unfamiliar with object - oriented programming .A solution could be to explain uncommon notions at the end of the book in an appendix .In this way the flow of reading is not interrupted , and a reader , who is unfamiliar with any of these concepts , could clarify them .", "label": "", "metadata": {}, "score": "47.38256"}
{"text": "Nevertheless , despite the importance of linguistic creativity in many NLP tasks , it still remains unclear how to model , simulate , or evaluate linguistic creativity .Furthermore , research on topics related to linguistic creativity has not received a great deal of attention at major computational linguistics conferences in recent years .", "label": "", "metadata": {}, "score": "47.477814"}
{"text": "Whereas the previous three chapters were very practical , the sixth one is rather theoretical , explaining the theories behind these systems .The final chapter of the book focuses on generating documents rather than simple texts , emphasising the general tendency in natural language processing to process and produce multimedia documents .", "label": "", "metadata": {}, "score": "47.687023"}
{"text": "Systemic Unification Reusable Grammar for Spanish is a large scale Spanish grammar allowing systems which already use FUF / SURGE for English NLG to be able to generate syntactically ( and many times semantically ) equivalent text in Spanish when new lexical items are introduced .", "label": "", "metadata": {}, "score": "48.29431"}
{"text": "Systemic Unification Reusable Grammar for Spanish is a large scale Spanish grammar allowing systems which already use FUF / SURGE for English NLG to be able to generate syntactically ( and many times semantically ) equivalent text in Spanish when new lexical items are introduced .", "label": "", "metadata": {}, "score": "48.29431"}
{"text": "Systemic Unification Reusable Grammar for Spanish is a large scale Spanish grammar allowing systems which already use FUF / SURGE for English NLG to be able to generate syntactically ( and many times semantically ) equivalent text in Spanish when new lexical items are introduced .", "label": "", "metadata": {}, "score": "48.29431"}
{"text": "Systemic Unification Reusable Grammar for Spanish is a large scale Spanish grammar allowing systems which already use FUF / SURGE for English NLG to be able to generate syntactically ( and many times semantically ) equivalent text in Spanish when new lexical items are introduced .", "label": "", "metadata": {}, "score": "48.29431"}
{"text": "Systemic Unification Reusable Grammar for Spanish is a large scale Spanish grammar allowing systems which already use FUF / SURGE for English NLG to be able to generate syntactically ( and many times semantically ) equivalent text in Spanish when new lexical items are introduced .", "label": "", "metadata": {}, "score": "48.29431"}
{"text": "Systemic Unification Reusable Grammar for Spanish is a large scale Spanish grammar allowing systems which already use FUF / SURGE for English NLG to be able to generate syntactically ( and many times semantically ) equivalent text in Spanish when new lexical items are introduced .", "label": "", "metadata": {}, "score": "48.29431"}
{"text": "Source code avalailable via darcs . provides a means of exploring large - scale systemic - functional grammars in order to see how they are organized and what kinds of things they cover .It can be used to explore the KPML resources .", "label": "", "metadata": {}, "score": "48.57933"}
{"text": "Source code avalailable via darcs . provides a means of exploring large - scale systemic - functional grammars in order to see how they are organized and what kinds of things they cover .It can be used to explore the KPML resources .", "label": "", "metadata": {}, "score": "48.57933"}
{"text": "Source code avalailable via darcs . provides a means of exploring large - scale systemic - functional grammars in order to see how they are organized and what kinds of things they cover .It can be used to explore the KPML resources .", "label": "", "metadata": {}, "score": "48.57933"}
{"text": "Source code avalailable via darcs . provides a means of exploring large - scale systemic - functional grammars in order to see how they are organized and what kinds of things they cover .It can be used to explore the KPML resources .", "label": "", "metadata": {}, "score": "48.57933"}
{"text": "Source code avalailable via darcs . provides a means of exploring large - scale systemic - functional grammars in order to see how they are organized and what kinds of things they cover .It can be used to explore the KPML resources .", "label": "", "metadata": {}, "score": "48.57933"}
{"text": "Source code avalailable via darcs . provides a means of exploring large - scale systemic - functional grammars in order to see how they are organized and what kinds of things they cover .It can be used to explore the KPML resources .", "label": "", "metadata": {}, "score": "48.57933"}
{"text": "Contents .NAACL HLT Workshop on Computational Approaches to Linguistic Creativity 2010 .It is generally agreed upon that creativity is an important property of human language .For example , speakers routinely coin new words , employ novel metaphors , and play with words through puns .", "label": "", "metadata": {}, "score": "48.59484"}
{"text": "Whereas the first two chapters are rather general introductions to the natural language generation field , chapter three presents the main concern of the book : the building of NLG systems .Given the complexity of this task , the advantages of a pipeline modular architecture are discussed .", "label": "", "metadata": {}, "score": "48.62031"}
{"text": "Tree Adjoining Grammar and a flat MRS - like semantics ( sans top handle and underspecification ) .Toy example grammars provided for English and French .Largish core grammar for French is under development ( contact us for details ) .", "label": "", "metadata": {}, "score": "48.67247"}
{"text": "Tree Adjoining Grammar and a flat MRS - like semantics ( sans top handle and underspecification ) .Toy example grammars provided for English and French .Largish core grammar for French is under development ( contact us for details ) .", "label": "", "metadata": {}, "score": "48.67247"}
{"text": "Tree Adjoining Grammar and a flat MRS - like semantics ( sans top handle and underspecification ) .Toy example grammars provided for English and French .Largish core grammar for French is under development ( contact us for details ) .", "label": "", "metadata": {}, "score": "48.67247"}
{"text": "Creativity allows speakers to express themselves with their own individual style .It provides new ways of looking at the world , by describing something through the use of unusual comparisons for effect , emphasis , or interest , and thus making language more engaging and fun .", "label": "", "metadata": {}, "score": "48.88535"}
{"text": "Another way to improve the readability of the text is by using referring expressions .A referring expression is a way of referring to a previously introduced entity , without describing the entity again .Pronouns and noun phrases are the most common ways of referring to an already introduced entity .", "label": "", "metadata": {}, "score": "49.466057"}
{"text": "These already include a version of the Nigel grammar of English and pre - installed examples .The KPML system offers a robust , mature platform for large - scale grammar engineering that is particularly oriented to multilingual grammar development and generation .", "label": "", "metadata": {}, "score": "49.56694"}
{"text": "These already include a version of the Nigel grammar of English and pre - installed examples .The KPML system offers a robust , mature platform for large - scale grammar engineering that is particularly oriented to multilingual grammar development and generation .", "label": "", "metadata": {}, "score": "49.56694"}
{"text": "These already include a version of the Nigel grammar of English and pre - installed examples .The KPML system offers a robust , mature platform for large - scale grammar engineering that is particularly oriented to multilingual grammar development and generation .", "label": "", "metadata": {}, "score": "49.56694"}
{"text": "These already include a version of the Nigel grammar of English and pre - installed examples .The KPML system offers a robust , mature platform for large - scale grammar engineering that is particularly oriented to multilingual grammar development and generation .", "label": "", "metadata": {}, "score": "49.56694"}
{"text": "These already include a version of the Nigel grammar of English and pre - installed examples .The KPML system offers a robust , mature platform for large - scale grammar engineering that is particularly oriented to multilingual grammar development and generation .", "label": "", "metadata": {}, "score": "49.56694"}
{"text": "These already include a version of the Nigel grammar of English and pre - installed examples .The KPML system offers a robust , mature platform for large - scale grammar engineering that is particularly oriented to multilingual grammar development and generation .", "label": "", "metadata": {}, "score": "49.56694"}
{"text": "It combines context - free grammars with templates and canned text in a single formalism .Thus the granularity of the language model may depend on the application needs .The system currently runs under Solaris 2.5 .It is available freely under a research license .", "label": "", "metadata": {}, "score": "49.747295"}
{"text": "It combines context - free grammars with templates and canned text in a single formalism .Thus the granularity of the language model may depend on the application needs .The system currently runs under Solaris 2.5 .It is available freely under a research license .", "label": "", "metadata": {}, "score": "49.747295"}
{"text": "It combines context - free grammars with templates and canned text in a single formalism .Thus the granularity of the language model may depend on the application needs .The system currently runs under Solaris 2.5 .It is available freely under a research license .", "label": "", "metadata": {}, "score": "49.747295"}
{"text": "It combines context - free grammars with templates and canned text in a single formalism .Thus the granularity of the language model may depend on the application needs .The system currently runs under Solaris 2.5 .It is available freely under a research license .", "label": "", "metadata": {}, "score": "49.747295"}
{"text": "It combines context - free grammars with templates and canned text in a single formalism .Thus the granularity of the language model may depend on the application needs .The system currently runs under Solaris 2.5 .It is available freely under a research license .", "label": "", "metadata": {}, "score": "49.747295"}
{"text": "It combines context - free grammars with templates and canned text in a single formalism .Thus the granularity of the language model may depend on the application needs .The system currently runs under Solaris 2.5 .It is available freely under a research license .", "label": "", "metadata": {}, "score": "49.747295"}
{"text": "It combines context - free grammars with templates and canned text in a single formalism .Thus the granularity of the language model may depend on the application needs .The system currently runs under Solaris 2.5 .It is available freely under a research license .", "label": "", "metadata": {}, "score": "49.747295"}
{"text": "Although multilingual natural language generation is not the topic of this book , several times the authors point out how the described techniques can be used for generation of multilingual text .I recommend this book to all the people involved in building natural generation systems and other kinds of systems for processing language .", "label": "", "metadata": {}, "score": "49.789204"}
{"text": "Chapter 4 details the first module of a NLG system : the document planner .The document planner is responsible for deciding which information is communicated and determine how this information should be structured for presentation .Two submodules are used : content determination and document structuring .", "label": "", "metadata": {}, "score": "49.88005"}
{"text": "Correct generation of referring expressions is very important for the overall readability of a text .On the one hand , if there are ambiguities , the text will not be easily understood .On the other hand , a text which always specifies full NPs will be too repetitive .", "label": "", "metadata": {}, "score": "50.745895"}
{"text": "We d Mar 21 2001 .Review : Reiter and Dale : Generation Systems .What follows is another discussion note contributed to our Book Discussion Forum .We expect these discussions to be informal and interactive ; and the author of the book discussed is cordially invited to join in .", "label": "", "metadata": {}, "score": "51.838097"}
{"text": "The symbolic generator includes the Sensus Ontology dictionary ( which is based on WordNet ) .The forest ranker includes a 250-million word ngram language model ( unigram , bigram , and trigram ) trained on WSJ newspaper text .", "label": "", "metadata": {}, "score": "52.58564"}
{"text": "The symbolic generator includes the Sensus Ontology dictionary ( which is based on WordNet ) .The forest ranker includes a 250-million word ngram language model ( unigram , bigram , and trigram ) trained on WSJ newspaper text .", "label": "", "metadata": {}, "score": "52.58564"}
{"text": "The symbolic generator includes the Sensus Ontology dictionary ( which is based on WordNet ) .The forest ranker includes a 250-million word ngram language model ( unigram , bigram , and trigram ) trained on WSJ newspaper text .", "label": "", "metadata": {}, "score": "52.58564"}
{"text": "It is possible to use the system without the window interface as a generator serving requests for generation across sockets or via files .LKB ( Linguistic Knowledge Builder ) is a grammar engineering environment for unification - based formalisms , typically HPSG .", "label": "", "metadata": {}, "score": "52.607826"}
{"text": "It is possible to use the system without the window interface as a generator serving requests for generation across sockets or via files .LKB ( Linguistic Knowledge Builder ) is a grammar engineering environment for unification - based formalisms , typically HPSG .", "label": "", "metadata": {}, "score": "52.607826"}
{"text": "It is possible to use the system without the window interface as a generator serving requests for generation across sockets or via files .LKB ( Linguistic Knowledge Builder ) is a grammar engineering environment for unification - based formalisms , typically HPSG .", "label": "", "metadata": {}, "score": "52.607826"}
{"text": "It is possible to use the system without the window interface as a generator serving requests for generation across sockets or via files .LKB ( Linguistic Knowledge Builder ) is a grammar engineering environment for unification - based formalisms , typically HPSG .", "label": "", "metadata": {}, "score": "52.607826"}
{"text": "It is possible to use the system without the window interface as a generator serving requests for generation across sockets or via files .LKB ( Linguistic Knowledge Builder ) is a grammar engineering environment for unification - based formalisms , typically HPSG .", "label": "", "metadata": {}, "score": "52.607826"}
{"text": "It is possible to use the system without the window interface as a generator serving requests for generation across sockets or via files .LKB ( Linguistic Knowledge Builder ) is a grammar engineering environment for unification - based formalisms , typically HPSG .", "label": "", "metadata": {}, "score": "52.607826"}
{"text": "Written in Haskell .Source code avalailable via darcs . provides a means of exploring large - scale systemic - functional grammars in order to see how they are organized and what kinds of things they cover .It can be used to explore the KPML resources .", "label": "", "metadata": {}, "score": "52.608475"}
{"text": "The WeatherReporter is used for exemplifying the way of selecting and representing the information communicated by the system ( referred to in the book as messages ) .Important issues , like granularity and the level of abstraction of the messages , are discussed .", "label": "", "metadata": {}, "score": "53.13401"}
{"text": "A corpus - based linguistic study of neologisms .Mariet Theune , Nanda Slabbers , and Feikje Hielkema ( 2007 ) : \" The Narrator : NLG for digital storytelling . \"In Proceedings of the Eleventh European Workshop on Natural Language Generation ( ENLG 07 ) , June 17 - 20 , 2007 , Schloss Dagstuhl , Germany , pages 109 - 112 .", "label": "", "metadata": {}, "score": "53.494278"}
{"text": "Constantin Orasan in doing a PhD in Automatic Summarisation at University of Wolverhampton , U.K. In addition to automatic summarisation , his other current research interests are anaphora resolution , corpus building and analysing , and machine learning techniques for natural language .", "label": "", "metadata": {}, "score": "53.878227"}
{"text": "Different issues involved in the generation of documents are discussed .This chapter is general , without going into too much detail about ways of generating such material .However , this is normal given the fact that almost each of these topics can be the subject of a book .", "label": "", "metadata": {}, "score": "54.26694"}
{"text": "It is generally agreed upon that \" linguistic creativity \" is a unique property of human language .Some claim that linguistic creativity is expressed in our ability to combine known words in a new sentence , others refer to our skill to express thoughts in figurative language , and yet others talk about syntactic recursion and lexical creativity .", "label": "", "metadata": {}, "score": "54.538483"}
{"text": "Therefore , in order to take full advantage of these results , it is necessary to display them in a format which is appropriate for the algorithm and can be easily understood by humans .Such formats can be histograms for values that change over time ( e.g. share prices ) , text for weather reports , etc .", "label": "", "metadata": {}, "score": "55.088364"}
{"text": "Natural language generation ( NLG ) is a field developed at the confluence of artificial intelligence with computational linguistics .Even though the field started in late sixties and has been investigated by numerous researchers , there are no books which discuss practical issues in building complete NLG systems .", "label": "", "metadata": {}, "score": "55.18274"}
{"text": "If you know of a system which is not listed here , please click on Edit in the upper left corner of this page and add the system yourself .CLINT is a hybrid template / word - based generation system with an example application of business letter generation .", "label": "", "metadata": {}, "score": "55.535217"}
{"text": "If you know of a system which is not listed here , please click on Edit in the upper left corner of this page and add the system yourself .CLINT is a hybrid template / word - based generation system with an example application of business letter generation .", "label": "", "metadata": {}, "score": "55.535217"}
{"text": "This idea made some researchers hope that it is possible to make systems which can understand and generate language using common resources .Although , this idea is very appealing , the authors of this book draw attention to the fact that it is very difficult to build effective systems which perform both tasks because the problems to be solved are quite different in each case .", "label": "", "metadata": {}, "score": "55.57003"}
{"text": "It is based on systemic functional linguistics .Downloadable standalone executables of the system are available for PCs running Windows .The source code is written in ANSI Common Lisp and uses the Common Lisp Interface Manager ( CLIM ) .The system has been compiled and tested [ under Franz Allegro Common Lisp ( 4.2 , 4.3 , 4.3.1 , 5.0 , 6.0 , 7.0 ) for Unix and Franz Allegro Common Lisp 3.0 and Harlequin Lispworks 4.0 , 4.1 , 4.2 for Windows .", "label": "", "metadata": {}, "score": "55.806755"}
{"text": "Java , . open source .Not to be confused with NLGen , above , which uses a different sentence generation theory .Java , .Apache license .It has been used in several dialog systems .The realizer has been enhanced with n - gram models and a supertagging approach called hypertagging .", "label": "", "metadata": {}, "score": "56.91436"}
{"text": "Hans Wim Tinholt and Anton Nijholt ( 2007 ) . \"Computational Humour : Utilizing Cross - Reference Ambiguity for Conversational Jokes .\" In F. Masulli , S. Mitra and G. Pasi ( eds . )Distinguishing humorous anaphora ambiguities from nonhumorous ones to generate conversational jokes .", "label": "", "metadata": {}, "score": "56.943398"}
{"text": "Hans Wim Tinholt and Anton Nijholt ( 2007 ) . \"Computational Humour : Utilizing Cross - Reference Ambiguity for Conversational Jokes .\" In F. Masulli , S. Mitra and G. Pasi ( eds . )Distinguishing humorous anaphora ambiguities from nonhumorous ones to generate conversational jokes .", "label": "", "metadata": {}, "score": "56.943398"}
{"text": "Java , Apache license .See demo : Demo of AI Virtual Pet Answering Simple Questions .OpenCCG , the OpenNLP CCG Library ( formerly Grok ) , is both a parser and a realizer for Combinatory Categorial Grammar .It has been used in several dialog systems .", "label": "", "metadata": {}, "score": "57.172234"}
{"text": "Java , Apache license .See demo : Demo of AI Virtual Pet Answering Simple Questions .OpenCCG , the OpenNLP CCG Library ( formerly Grok ) , is both a parser and a realizer for Combinatory Categorial Grammar .It has been used in several dialog systems .", "label": "", "metadata": {}, "score": "57.172234"}
{"text": "Java , Apache license .See demo : Demo of AI Virtual Pet Answering Simple Questions .OpenCCG , the OpenNLP CCG Library ( formerly Grok ) , is both a parser and a realizer for Combinatory Categorial Grammar .It has been used in several dialog systems .", "label": "", "metadata": {}, "score": "57.172234"}
{"text": "Java , Apache license .See demo : Demo of AI Virtual Pet Answering Simple Questions .OpenCCG , the OpenNLP CCG Library ( formerly Grok ) , is both a parser and a realizer for Combinatory Categorial Grammar .It has been used in several dialog systems .", "label": "", "metadata": {}, "score": "57.172234"}
{"text": "Java , Apache license .See demo : Demo of AI Virtual Pet Answering Simple Questions .OpenCCG , the OpenNLP CCG Library ( formerly Grok ) , is both a parser and a realizer for Combinatory Categorial Grammar .It has been used in several dialog systems .", "label": "", "metadata": {}, "score": "57.172234"}
{"text": "Java , Apache license .See demo : Demo of AI Virtual Pet Answering Simple Questions .OpenCCG , the OpenNLP CCG Library ( formerly Grok ) , is both a parser and a realizer for Combinatory Categorial Grammar .It has been used in several dialog systems .", "label": "", "metadata": {}, "score": "57.172234"}
{"text": "Syntactic realization package .( A CommonLisp package providing an interpreter for a functional unification formalism called FUF and SURGE , a large grammar of English written in FUF . )Offers download of SURGE 2.2 .Systemic Unification Reusable Grammar for Spanish is a large scale Spanish grammar allowing systems which already use FUF / SURGE for English NLG to be able to generate syntactically ( and many times semantically ) equivalent text in Spanish when new lexical items are introduced .", "label": "", "metadata": {}, "score": "57.172935"}
{"text": "Common lisp source code available under GPL v2 . surface realiser for ( Feature - Based Lexicalised )Tree Adjoining Grammar and a flat MRS - like semantics ( sans top handle and underspecification ) .Toy example grammars provided for English and French .", "label": "", "metadata": {}, "score": "57.24594"}
{"text": "SPUD ( Sentence Planner Using Descriptions ) is Matthew Purver 's LTAG - based NLG system .There are two versions : SPUD version 0.01 was written in SML .Later versions , known as SPUD lite , are written in Prolog .", "label": "", "metadata": {}, "score": "57.837753"}
{"text": "SPUD ( Sentence Planner Using Descriptions ) is Matthew Purver 's LTAG - based NLG system .There are two versions : SPUD version 0.01 was written in SML .Later versions , known as SPUD lite , are written in Prolog .", "label": "", "metadata": {}, "score": "57.837753"}
{"text": "SPUD ( Sentence Planner Using Descriptions ) is Matthew Purver 's LTAG - based NLG system .There are two versions : SPUD version 0.01 was written in SML .Later versions , known as SPUD lite , are written in Prolog .", "label": "", "metadata": {}, "score": "57.837753"}
{"text": "SPUD ( Sentence Planner Using Descriptions ) is Matthew Purver 's LTAG - based NLG system .There are two versions : SPUD version 0.01 was written in SML .Later versions , known as SPUD lite , are written in Prolog .", "label": "", "metadata": {}, "score": "57.837753"}
{"text": "SPUD ( Sentence Planner Using Descriptions ) is Matthew Purver 's LTAG - based NLG system .There are two versions : SPUD version 0.01 was written in SML .Later versions , known as SPUD lite , are written in Prolog .", "label": "", "metadata": {}, "score": "57.837753"}
{"text": "SPUD ( Sentence Planner Using Descriptions ) is Matthew Purver 's LTAG - based NLG system .There are two versions : SPUD version 0.01 was written in SML .Later versions , known as SPUD lite , are written in Prolog .", "label": "", "metadata": {}, "score": "57.837753"}
{"text": "Written in Tcl / Tk .Runs on any machine . is an ultra - simple Java - based realiser .Its grammatical coverage and syntactic knowledge is minuscule compared to KPML or FUF / SURGE .However , because it is so simple , its relatively easy for people to learn how to use it .", "label": "", "metadata": {}, "score": "57.910984"}
{"text": "Not to be confused with NLGen2 , below , which uses a different sentence generation theory .Java , Apache license .See demo : Demo of AI Virtual Pet Answering Simple Questions .OpenCCG , the OpenNLP CCG Library ( formerly Grok ) , is both a parser and a realizer for Combinatory Categorial Grammar .", "label": "", "metadata": {}, "score": "57.941994"}
{"text": "The sixth chapter describes the process of mapping abstract text specifications into a surface text by the surface realiser .It consists of two processes : structure and linguistic realiser .The first one is in charge of the layout of the document , mapping the internal representation into coding specific to the medium the generated text is displayed in ( e.g. paragraphs , the way the headings are displayed , etc . ) .", "label": "", "metadata": {}, "score": "58.100883"}
{"text": "License : LGPL . surface realiser for ( Feature - Based Lexicalised )Tree Adjoining Grammar and a flat MRS - like semantics ( sans top handle and underspecification ) .Toy example grammars provided for English and French .Largish core grammar for French is under development ( contact us for details ) .", "label": "", "metadata": {}, "score": "58.293518"}
{"text": "These already include a version of the Nigel grammar of English and pre - installed examples .HALogen is a general - purpose natural language generation system developed by Irene Langkilde - Geary and Kevin Knight at the USC Information Sciences Institute .", "label": "", "metadata": {}, "score": "58.336388"}
{"text": "In Proceedings of the NAACL Workshop on Computational Approaches to Figurative Language , Rochester , New York , April 2007 , pages 13 - -20 .A paper on metaphor identification in text documents .Antoinette Renouf ( 2007 ) .\" Tracing lexical productivity and creativity in the British media : The Chavs and the Chav - Nots . \"", "label": "", "metadata": {}, "score": "58.379536"}
{"text": "Largish core grammar for French is under development ( contact us for details ) .GPL , known to work under Linux and Mac OS X ( potential for making it work on Windows as well ) .Written in Haskell .", "label": "", "metadata": {}, "score": "58.415672"}
{"text": "\" Tracing lexical productivity and creativity in the British media : The Chavs and the Chav - Nots . \"In Munat , Judith ( ed . )A corpus - based linguistic ' ' ' study of neologisms ' ' ' .", "label": "", "metadata": {}, "score": "58.438896"}
{"text": "The paper presents a system that understands property - attribution metaphors and ' ' ' generates metaphors ' ' ' for a given target .In ' ' Proceedings of AAAI 2007 , the 22nd AAAI Conference on Artificial Intelligence ' ' , Vancouver , Canada , July 22 - 26 , 2007 .", "label": "", "metadata": {}, "score": "58.58448"}
{"text": "( This means that the publisher has sent us a review copy . )Then contact Simin Karimi at simin linguistlist.org or Terry Langendoen at terry linguistlist.org .Directory .Building natural language generation systems Ehud Reiter and Robert Dale Studies in Natural Language Processing Cambridge University Press , 2000 , 248 pages Reviewed by Constantin Orasan Computers are very good at dealing with large amounts of data in a relatively short time .", "label": "", "metadata": {}, "score": "59.545525"}
{"text": "The download package consists of the symbolic generator , the forest ranker , and some sample inputs .The symbolic generator includes the Sensus Ontology dictionary ( which is based on WordNet ) .The forest ranker includes a 250-million word ngram language model ( unigram , bigram , and trigram ) trained on WSJ newspaper text .", "label": "", "metadata": {}, "score": "59.811066"}
{"text": "The download package consists of the symbolic generator , the forest ranker , and some sample inputs .The symbolic generator includes the Sensus Ontology dictionary ( which is based on WordNet ) .The forest ranker includes a 250-million word ngram language model ( unigram , bigram , and trigram ) trained on WSJ newspaper text .", "label": "", "metadata": {}, "score": "59.811066"}
{"text": "The download package consists of the symbolic generator , the forest ranker , and some sample inputs .The symbolic generator includes the Sensus Ontology dictionary ( which is based on WordNet ) .The forest ranker includes a 250-million word ngram language model ( unigram , bigram , and trigram ) trained on WSJ newspaper text .", "label": "", "metadata": {}, "score": "59.811066"}
{"text": "Computers as expert systems have been widely used for taking decisions on the basis of their inputs .For example , using a smoker 's answers to a questioner about his / her smoking habits , a program can suggest ways for giving up smoking .", "label": "", "metadata": {}, "score": "60.12001"}
{"text": "Written in Haskell .HALogen is a general - purpose natural language generation system developed by Irene Langkilde - Geary and Kevin Knight at the USC Information Sciences Institute .The download package consists of the symbolic generator , the forest ranker , and some sample inputs .", "label": "", "metadata": {}, "score": "60.382607"}
{"text": "The generator is located in the file dd_gen . cl .Common lisp source code available under GPL v2 .FUF ] is available as the [ ftp://ftp.cs.bgu.ac.il/pub/fuf/fuf5.3 . to generate syntactically ( and many times semantically ) equivalent text in Spanish when . surface realiser for ( Feature - Based Lexicalised )", "label": "", "metadata": {}, "score": "60.571095"}
{"text": "To appear in Computational Linguistics .An article on automatically inferring the words that are combined to form expressions such as brunch and fantabulous .Saisuresh Krishnakumaran and Xiaojin Zhu ( 2007 ) : \" Hunting Elusive Metaphors Using Lexical Resources . \"", "label": "", "metadata": {}, "score": "61.07085"}
{"text": "License : LGPL .[ ftp://ftp.cs.cmu.edu/user/ai/new/daydreamer/0new.html DAYDREAMER ] is a computer model of the stream of thought developed at UCLA by Erik T. Mueller from 1983 to 1988 .The generator is located in the file dd_gen . cl .Common lisp source code available under GPL v2 . surface realiser for ( Feature - Based Lexicalised )", "label": "", "metadata": {}, "score": "61.08151"}
{"text": "License : LGPL .[ ftp://ftp.cs.cmu.edu/user/ai/new/daydreamer/0new.html DAYDREAMER ] is a computer model of the stream of thought developed at UCLA by Erik T. Mueller from 1983 to 1988 .The generator is located in the file dd_gen . cl .Common lisp source code available under GPL v2 . surface realiser for ( Feature - Based Lexicalised )", "label": "", "metadata": {}, "score": "61.08151"}
{"text": "We are particularly interested in work on the automatic detection , classification , understanding , or generation of : . neologisms ; .creative use of figurative language , including metaphor , metonymy , personification , and idioms ; . new or unconventional syntactic constructions ( e.g. , May I serve who 's next ? ) indirect speech acts ( such as curses , insults , sarcasm , and irony ) , verbally expressed humor , poetry , and fiction ; . other phenomena illustrating linguistic creativity ( e.g. , eggcorns such as once and a while for once in a while ; new and emerging forms found in computer - mediated communication ) .", "label": "", "metadata": {}, "score": "61.08749"}
{"text": "KPML is also used extensively in multilingual text generation research and for teaching .It is based on systemic functional linguistics .Downloadable standalone executables of the system are available for PCs running Windows .The source code is written in ANSI Common Lisp and uses the Common Lisp Interface Manager ( CLIM ) .", "label": "", "metadata": {}, "score": "61.09594"}
{"text": "KPML is also used extensively in multilingual text generation research and for teaching .It is based on systemic functional linguistics .Downloadable standalone executables of the system are available for PCs running Windows .The source code is written in ANSI Common Lisp and uses the Common Lisp Interface Manager ( CLIM ) .", "label": "", "metadata": {}, "score": "61.09594"}
{"text": "KPML is also used extensively in multilingual text generation research and for teaching .It is based on systemic functional linguistics .Downloadable standalone executables of the system are available for PCs running Windows .The source code is written in ANSI Common Lisp and uses the Common Lisp Interface Manager ( CLIM ) .", "label": "", "metadata": {}, "score": "61.09594"}
{"text": "KPML is also used extensively in multilingual text generation research and for teaching .It is based on systemic functional linguistics .Downloadable standalone executables of the system are available for PCs running Windows .The source code is written in ANSI Common Lisp and uses the Common Lisp Interface Manager ( CLIM ) .", "label": "", "metadata": {}, "score": "61.09594"}
{"text": "KPML is also used extensively in multilingual text generation research and for teaching .It is based on systemic functional linguistics .Downloadable standalone executables of the system are available for PCs running Windows .The source code is written in ANSI Common Lisp and uses the Common Lisp Interface Manager ( CLIM ) .", "label": "", "metadata": {}, "score": "61.09594"}
{"text": "KPML is also used extensively in multilingual text generation research and for teaching .It is based on systemic functional linguistics .Downloadable standalone executables of the system are available for PCs running Windows .The source code is written in ANSI Common Lisp and uses the Common Lisp Interface Manager ( CLIM ) .", "label": "", "metadata": {}, "score": "61.09594"}
{"text": "Given the complexity of this task the authors opt to use an existing realiser , rather than building one from the scratch .Three possible choices are presented : KPML based on systemic functional grammar , SURGE based on functional unification grammar and RealPro based on meaning - text theory , a form of dependency grammar .", "label": "", "metadata": {}, "score": "61.48876"}
{"text": "( Try playing the AVI file in VLC if you run into problems . )Perhaps this system could be considered an instance of the WYSIWYM approach .Syntactic realization package .( A CommonLisp package providing an interpreter for a functional unification formalism called FUF and SURGE , a large grammar of English written in FUF . )", "label": "", "metadata": {}, "score": "61.847748"}
{"text": "( Try playing the AVI file in VLC if you run into problems . )Perhaps this system could be considered an instance of the WYSIWYM approach .Syntactic realization package .( A CommonLisp package providing an interpreter for a functional unification formalism called FUF and SURGE , a large grammar of English written in FUF . )", "label": "", "metadata": {}, "score": "61.847748"}
{"text": "( Try playing the AVI file in VLC if you run into problems . )Perhaps this system could be considered an instance of the WYSIWYM approach .Syntactic realization package .( A CommonLisp package providing an interpreter for a functional unification formalism called FUF and SURGE , a large grammar of English written in FUF . )", "label": "", "metadata": {}, "score": "61.847748"}
{"text": "( Try playing the AVI file in VLC if you run into problems . )Perhaps this system could be considered an instance of the WYSIWYM approach .Syntactic realization package .( A CommonLisp package providing an interpreter for a functional unification formalism called FUF and SURGE , a large grammar of English written in FUF . )", "label": "", "metadata": {}, "score": "61.847748"}
{"text": "( Try playing the AVI file in VLC if you run into problems . )Perhaps this system could be considered an instance of the WYSIWYM approach .Syntactic realization package .( A CommonLisp package providing an interpreter for a functional unification formalism called FUF and SURGE , a large grammar of English written in FUF . )", "label": "", "metadata": {}, "score": "61.847748"}
{"text": "( Try playing the AVI file in VLC if you run into problems . )Perhaps this system could be considered an instance of the WYSIWYM approach .Syntactic realization package .( A CommonLisp package providing an interpreter for a functional unification formalism called FUF and SURGE , a large grammar of English written in FUF . )", "label": "", "metadata": {}, "score": "61.847748"}
{"text": "Computational Humour : Utilizing Cross - Reference Ambiguity for Conversational Jokes .\" In F. Masulli , S. Mitra and G. Pasi ( eds . )Distinguishing humorous anaphora ambiguities from nonhumorous ones to ' ' ' generate conversational jokes ' ' ' .", "label": "", "metadata": {}, "score": "61.94836"}
{"text": "A paper on metaphor identification in text documents .Antoinette Renouf ( 2007 ) .\" Tracing lexical productivity and creativity in the British media : The Chavs and the Chav - Nots . \"In Munat , Judith ( ed . )", "label": "", "metadata": {}, "score": "61.97072"}
{"text": "The forest ranker includes a 250-million word ngram language model ( unigram , bigram , and trigram ) trained on WSJ newspaper text .The symbolic generator is written in LISP and requires a CommonLisp interpreter .kfNgram is a free stand - alone Windows program for linguistic research which generates lists of n - grams in text and HTML files .", "label": "", "metadata": {}, "score": "62.693104"}
{"text": "License : LGPL .DAYDREAMER .DAYDREAMER is a computer model of the stream of thought developed at UCLA by Erik T. Mueller from 1983 to 1988 .The generator is located in the file dd_gen . cl .Common lisp source code available under GPL v2 . surface realiser for ( Feature - Based Lexicalised )", "label": "", "metadata": {}, "score": "62.6981"}
{"text": "License : LGPL .DAYDREAMER .DAYDREAMER is a computer model of the stream of thought developed at UCLA by Erik T. Mueller from 1983 to 1988 .The generator is located in the file dd_gen . cl .Common lisp source code available under GPL v2 . surface realiser for ( Feature - Based Lexicalised )", "label": "", "metadata": {}, "score": "62.6981"}
{"text": "License : LGPL .DAYDREAMER .DAYDREAMER is a computer model of the stream of thought developed at UCLA by Erik T. Mueller from 1983 to 1988 .The generator is located in the file dd_gen . cl .Common lisp source code available under GPL v2 . surface realiser for ( Feature - Based Lexicalised )", "label": "", "metadata": {}, "score": "62.6981"}
{"text": "License : LGPL .DAYDREAMER .DAYDREAMER is a computer model of the stream of thought developed at UCLA by Erik T. Mueller from 1983 to 1988 .The generator is located in the file dd_gen . cl .Common lisp source code available under GPL v2 . surface realiser for ( Feature - Based Lexicalised )", "label": "", "metadata": {}, "score": "62.6981"}
{"text": "License : LGPL .DAYDREAMER .DAYDREAMER is a computer model of the stream of thought developed at UCLA by Erik T. Mueller from 1983 to 1988 .The generator is located in the file dd_gen . cl .Common lisp source code available under GPL v2 . surface realiser for ( Feature - Based Lexicalised )", "label": "", "metadata": {}, "score": "62.6981"}
{"text": "License : LGPL .DAYDREAMER .DAYDREAMER is a computer model of the stream of thought developed at UCLA by Erik T. Mueller from 1983 to 1988 .The generator is located in the file dd_gen . cl .Common lisp source code available under GPL v2 . surface realiser for ( Feature - Based Lexicalised )", "label": "", "metadata": {}, "score": "62.6981"}
{"text": "CRISP comes with its own implementation of GraphPlan , but it can also output plans in PDDL ( \" Planning Domain Definition Language \" , a successor to STRIPS ) for use with other AI planners .License : LGPL .[ ftp://ftp.cs.cmu.edu/user/ai/new/daydreamer/0new.html DAYDREAMER ] is a computer model of the stream of thought developed at UCLA by Erik T. Mueller from 1983 to 1988 .", "label": "", "metadata": {}, "score": "63.07566"}
{"text": "License : LGPL .[ ftp://ftp.cs.cmu.edu/user/ai/new/daydreamer/0new.html DAYDREAMER ] is a computer model of the stream of thought developed at UCLA by Erik T. Mueller from 1983 to 1988 .The generator is located in the file dd_gen . cl .Common lisp source code available under GPL v2 .", "label": "", "metadata": {}, "score": "63.240467"}
{"text": "CRISP .CRISP is Alexander Koller 's NLG system that tries to cast both microplanning and sentence realisation as an AI planning problem .The code is a mixture of Java and Scala , a scripting language for the Java virtual machine .", "label": "", "metadata": {}, "score": "63.814888"}
{"text": "CRISP .CRISP is Alexander Koller 's NLG system that tries to cast both microplanning and sentence realisation as an AI planning problem .The code is a mixture of Java and Scala , a scripting language for the Java virtual machine .", "label": "", "metadata": {}, "score": "63.814888"}
{"text": "The grammar formalism supported is Multimodal Functional Unification Grammar ( MUG ) .The MUG system runs MUG grammars with fixed ( test cases ) and arbitrary input specifications to produce output in a natural language , graphical user interface and possibly in other modes .", "label": "", "metadata": {}, "score": "63.839798"}
{"text": "LKB ( Linguistic Knowledge Builder ) is a grammar engineering environment for unification - based formalisms , typically HPSG .It includes a realiser that takes as input Minimal Recursion Semantics ( MRS ) .LKB is implemented in Common Lisp , and is freely available under an open source license .", "label": "", "metadata": {}, "score": "63.887684"}
{"text": "kfNgram is a free stand - alone Windows program for linguistic research which generates lists of n - grams in text and HTML files .Here n - gram is understood as a sequence of either n words , where n can be any positive integer , also known as lexical bundles , chains , wordgrams , and , in WordSmith , clusters , or else of n characters , also known as chargrams .", "label": "", "metadata": {}, "score": "64.88677"}
{"text": "Extensions for other languages welcome .NaturalOWL can also be used as a Prot\u00e9g\u00e9 plug - in .See here for publications describing NaturalOWL .( GPL ) .NLGen .The NLGen natural language generation system applies the SegSim strategy for generating English sentences .", "label": "", "metadata": {}, "score": "64.930695"}
{"text": "Toy example grammars provided for English and French .Largish core grammar for French is under development ( contact us for details ) .GPL , known to work under Linux and Mac OS X ( potential for making it work on Windows as well ) .", "label": "", "metadata": {}, "score": "65.117134"}
{"text": "Toy example grammars provided for English and French .Largish core grammar for French is under development ( contact us for details ) .GPL , known to work under Linux and Mac OS X ( potential for making it work on Windows as well ) .", "label": "", "metadata": {}, "score": "65.117134"}
{"text": "Toy example grammars provided for English and French .Largish core grammar for French is under development ( contact us for details ) .GPL , known to work under Linux and Mac OS X ( potential for making it work on Windows as well ) .", "label": "", "metadata": {}, "score": "65.117134"}
{"text": "Toy example grammars provided for English and French .Largish core grammar for French is under development ( contact us for details ) .GPL , known to work under Linux and Mac OS X ( potential for making it work on Windows as well ) .", "label": "", "metadata": {}, "score": "65.117134"}
{"text": "Toy example grammars provided for English and French .Largish core grammar for French is under development ( contact us for details ) .GPL , known to work under Linux and Mac OS X ( potential for making it work on Windows as well ) .", "label": "", "metadata": {}, "score": "65.117134"}
{"text": "Toy example grammars provided for English and French .Largish core grammar for French is under development ( contact us for details ) .GPL , known to work under Linux and Mac OS X ( potential for making it work on Windows as well ) .", "label": "", "metadata": {}, "score": "65.117134"}
{"text": "Toy example grammars provided for English and French .Largish core grammar for French is under development ( contact us for details ) .GPL , known to work under Linux and Mac OS X ( potential for making it work on Windows as well ) .", "label": "", "metadata": {}, "score": "65.117134"}
{"text": "Toy example grammars provided for English and French .Largish core grammar for French is under development ( contact us for details ) .GPL , known to work under Linux and Mac OS X ( potential for making it work on Windows as well ) .", "label": "", "metadata": {}, "score": "65.117134"}
{"text": "Toy example grammars provided for English and French .Largish core grammar for French is under development ( contact us for details ) .GPL , known to work under Linux and Mac OS X ( potential for making it work on Windows as well ) .", "label": "", "metadata": {}, "score": "65.117134"}
{"text": "The small codebase of SPUD lite makes it ideal for teaching , but it is also used in dialog system prototypes .Suregen-2 .Suregen is \" a hybrid , ontology based and NLG - oriented formalism for generating text for documents in clinical medicine .", "label": "", "metadata": {}, "score": "66.98404"}
{"text": "The small codebase of SPUD lite makes it ideal for teaching , but it is also used in dialog system prototypes .There are two versions : SPUD version 0.01 was written in SML .Later versions , known as SPUD lite , are written in Prolog .", "label": "", "metadata": {}, "score": "67.2802"}
{"text": "The realizer has been enhanced with n - gram models and a supertagging approach called hypertagging .OpenCCG is implemented in Java , and is freely available under the LGPL .Project Reporter generates dynamic web - based project status reports from files created with Microsoft Project or other compatible project management software .", "label": "", "metadata": {}, "score": "68.20325"}
{"text": "The system is written in C++ and runs under Microsoft Windows .CRISP .CRISP is Alexander Koller 's NLG system that tries to cast both microplanning and sentence realisation as an AI planning problem .The code is a mixture of Java and Scala , a scripting language for the Java virtual machine .", "label": "", "metadata": {}, "score": "68.345"}
{"text": "The system is written in C++ and runs under Microsoft Windows .CRISP .CRISP is Alexander Koller 's NLG system that tries to cast both microplanning and sentence realisation as an AI planning problem .The code is a mixture of Java and Scala , a scripting language for the Java virtual machine .", "label": "", "metadata": {}, "score": "68.345"}
{"text": "The system is written in C++ and runs under Microsoft Windows .CRISP .CRISP is Alexander Koller 's NLG system that tries to cast both microplanning and sentence realisation as an AI planning problem .The code is a mixture of Java and Scala , a scripting language for the Java virtual machine .", "label": "", "metadata": {}, "score": "68.345"}
{"text": "The system is written in C++ and runs under Microsoft Windows .CRISP .CRISP is Alexander Koller 's NLG system that tries to cast both microplanning and sentence realisation as an AI planning problem .The code is a mixture of Java and Scala , a scripting language for the Java virtual machine .", "label": "", "metadata": {}, "score": "68.345"}
{"text": "The system is written in C++ and runs under Microsoft Windows .CRISP .CRISP is Alexander Koller 's NLG system that tries to cast both microplanning and sentence realisation as an AI planning problem .The code is a mixture of Java and Scala , a scripting language for the Java virtual machine .", "label": "", "metadata": {}, "score": "68.345"}
{"text": "It is set up as a Java package , so it can only be used by Java programs .SPUD .SPUD ( Sentence Planner Using Descriptions ) is Matthew Purver 's LTAG - based NLG system .There are two versions : SPUD version 0.01 was written in SML .", "label": "", "metadata": {}, "score": "68.58279"}
{"text": "Extensions for other languages welcome .( GPL ) .Not to be confused with NLGen2 , below , which uses a different sentence generation theory .Java , Apache license .Not to be confused with NLGen , above , which uses a different sentence generation theory .", "label": "", "metadata": {}, "score": "68.96046"}
{"text": "Extensions for other languages welcome .( GPL ) .Not to be confused with NLGen2 , below , which uses a different sentence generation theory .Java , Apache license .Not to be confused with NLGen , above , which uses a different sentence generation theory .", "label": "", "metadata": {}, "score": "68.96046"}
{"text": "Later versions , known as SPUD lite , are written in Prolog .The small codebase of SPUD lite makes it ideal for teaching , but it is also used in dialog system prototypes .The project began in October 2003 and ran until March 2007 .", "label": "", "metadata": {}, "score": "69.14528"}
{"text": "Revision as of 04:10 , 9 January 2013 .The natural language generation systems listed below are available for download over the web .If you know of a system which is not listed here , please click on Edit in the upper left corner of this page and add the system yourself .", "label": "", "metadata": {}, "score": "69.17888"}
{"text": "The project began in October 2003 and ran until March 2007 .The software was written in Java and is available for Windows and Linux , including source code and database files .Revision as of 11:25 , 7 September 2012 .", "label": "", "metadata": {}, "score": "69.42171"}
{"text": "Furthermore , the MUG Workbench is helpful in debugging your grammars .Generates descriptions of entities and classes from OWL ontologies that have been annotated with linguistic and user modeling resources expressed in RDF .Currently supports English and Greek .Extensions for other languages welcome .", "label": "", "metadata": {}, "score": "69.561905"}
{"text": "Furthermore , the MUG Workbench is helpful in debugging your grammars .Generates descriptions of entities and classes from OWL ontologies that have been annotated with linguistic and user modeling resources expressed in RDF .Currently supports English and Greek .Extensions for other languages welcome .", "label": "", "metadata": {}, "score": "69.561905"}
{"text": "Furthermore , the MUG Workbench is helpful in debugging your grammars .Generates descriptions of entities and classes from OWL ontologies that have been annotated with linguistic and user modeling resources expressed in RDF .Currently supports English and Greek .Extensions for other languages welcome .", "label": "", "metadata": {}, "score": "69.561905"}
{"text": "Furthermore , the MUG Workbench is helpful in debugging your grammars .Generates descriptions of entities and classes from OWL ontologies that have been annotated with linguistic and user modeling resources expressed in RDF .Currently supports English and Greek .Extensions for other languages welcome .", "label": "", "metadata": {}, "score": "69.561905"}
{"text": "Furthermore , the MUG Workbench is helpful in debugging your grammars .Generates descriptions of entities and classes from OWL ontologies that have been annotated with linguistic and user modeling resources expressed in RDF .Currently supports English and Greek .Extensions for other languages welcome .", "label": "", "metadata": {}, "score": "69.561905"}
{"text": "Furthermore , the MUG Workbench is helpful in debugging your grammars .Generates descriptions of entities and classes from OWL ontologies that have been annotated with linguistic and user modeling resources expressed in RDF .Currently supports English and Greek .Extensions for other languages welcome .", "label": "", "metadata": {}, "score": "69.561905"}
{"text": "PDF format .We encourage submissions from everyone .For those who are new to ACL conferences and workshops , or with special needs , we are planning to set up a lunch mentoring program .Let us know if you are interested .", "label": "", "metadata": {}, "score": "69.7085"}
{"text": "LKB is implemented in Common Lisp , and is freely available under an open source license .It includes also a KNOPPIX - based GNU / Linux live - CD , with all the system installed , ready to use .MUG Workbench is a development and debugging tool for Multimodal NLG .", "label": "", "metadata": {}, "score": "70.374954"}
{"text": "LKB is implemented in Common Lisp , and is freely available under an open source license .It includes also a KNOPPIX - based GNU / Linux live - CD , with all the system installed , ready to use .MUG Workbench is a development and debugging tool for Multimodal NLG .", "label": "", "metadata": {}, "score": "70.374954"}
{"text": "LKB is implemented in Common Lisp , and is freely available under an open source license .It includes also a KNOPPIX - based GNU / Linux live - CD , with all the system installed , ready to use .MUG Workbench is a development and debugging tool for Multimodal NLG .", "label": "", "metadata": {}, "score": "70.374954"}
{"text": "LKB is implemented in Common Lisp , and is freely available under an open source license .It includes also a KNOPPIX - based GNU / Linux live - CD , with all the system installed , ready to use .MUG Workbench is a development and debugging tool for Multimodal NLG .", "label": "", "metadata": {}, "score": "70.374954"}
{"text": "LKB is implemented in Common Lisp , and is freely available under an open source license .It includes also a KNOPPIX - based GNU / Linux live - CD , with all the system installed , ready to use .MUG Workbench is a development and debugging tool for Multimodal NLG .", "label": "", "metadata": {}, "score": "70.374954"}
{"text": "LKB is implemented in Common Lisp , and is freely available under an open source license .It includes also a KNOPPIX - based GNU / Linux live - CD , with all the system installed , ready to use .MUG Workbench is a development and debugging tool for Multimodal NLG .", "label": "", "metadata": {}, "score": "70.374954"}
{"text": "A positive point that is worth noting is the way the authors develop different arguments .They do not try to persuade the reader that their choice is the correct one .Instead , they present a good balance of pro and contra arguments for their choice .", "label": "", "metadata": {}, "score": "70.55939"}
{"text": "Mariet Theune , Nanda Slabbers , and Feikje Hielkema ( 2007 ) : \" The Narrator : NLG for digital storytelling . \"In Proceedings of the Eleventh European Workshop on Natural Language Generation ( ENLG 07 ) , June 17 - 20 , 2007 , Schloss Dagstuhl , Germany , pages 109 - 112 .", "label": "", "metadata": {}, "score": "71.18019"}
{"text": "The small codebase of SPUD lite makes it ideal for teaching , but it is also used in dialog system prototypes .The project began in October 2003 and ran until March 2007 .The software was written in Java and is available for Windows and Linux , including source code and database files .", "label": "", "metadata": {}, "score": "71.61061"}
{"text": "The small codebase of SPUD lite makes it ideal for teaching , but it is also used in dialog system prototypes .The project began in October 2003 and ran until March 2007 .The software was written in Java and is available for Windows and Linux , including source code and database files .", "label": "", "metadata": {}, "score": "71.61061"}
{"text": "It has been used in several dialog systems .The realizer has been enhanced with n - gram models and a supertagging approach called hypertagging .OpenCCG is implemented in Java , and is freely available under the LGPL .It has been used in several dialog systems .", "label": "", "metadata": {}, "score": "72.009056"}
{"text": "Acoustic - prosodic and linguistic ' ' ' features for automatic humor recognition ' ' ' .\" Tracing lexical productivity and creativity in the British media : The Chavs and the Chav - Nots . \"In Munat , Judith ( ed . )", "label": "", "metadata": {}, "score": "72.22456"}
{"text": "In Proceedings of the 2006 Conference on Empirical Methods in Natural Language Processing , Sydney , Australia , July 22 - 23 , 2006 , pages 208 - -215 .Acoustic - prosodic and linguistic ' ' ' features for automatic humor recognition ' ' ' .", "label": "", "metadata": {}, "score": "72.77208"}
{"text": "A demo system which runs under Windows is available for download .A screencast video shows data being entered into computer forms using mouse and keyboard while a feedback text is continually updated and shown below .( Try playing the AVI file in VLC if you run into problems . )", "label": "", "metadata": {}, "score": "72.91777"}
{"text": "( GPL ) .Not to be confused with NLGen2 , below , which uses a different sentence generation theory .Java , Apache license .Not to be confused with NLGen , above , which uses a different sentence generation theory .", "label": "", "metadata": {}, "score": "72.92508"}
{"text": "Revision as of 11:25 , 7 September 2012 .The natural language generation systems listed below are available for download over the web .If you know of a system which is not listed here , please click on Edit in the upper left corner of this page and add the system yourself .", "label": "", "metadata": {}, "score": "73.01193"}
{"text": "Revision as of 11:25 , 7 September 2012 .The natural language generation systems listed below are available for download over the web .If you know of a system which is not listed here , please click on Edit in the upper left corner of this page and add the system yourself .", "label": "", "metadata": {}, "score": "73.01193"}
{"text": "The second part of chapter 3 , introduces these modules giving an overview of the architecture of WeatherReporter .Due to the fact that all the topics discussed here , are reanalysed in the subsequent chapters in much more detail , I found this part a bit too long and too detailed .", "label": "", "metadata": {}, "score": "73.52179"}
{"text": "It includes also a KNOPPIX - based GNU / Linux live - CD , with all the system installed , ready to use .Generates descriptions of entities and classes from OWL ontologies that have been annotated with linguistic and user modeling resources expressed in RDF .", "label": "", "metadata": {}, "score": "73.88283"}
{"text": "GPL , known to work under Linux and Mac OS X ( potential for making it work on Windows as well ) .Written in Haskell . surface realiser for ( Feature - Based Lexicalised )Tree Adjoining Grammar and a flat MRS - like semantics ( sans top handle and underspecification ) .", "label": "", "metadata": {}, "score": "73.886284"}
{"text": "CRISP comes with its own implementation of GraphPlan , but it can also output plans in PDDL ( \" Planning Domain Definition Language \" , a successor to STRIPS ) for use with other AI planners .License : LGPL .The code is a mixture of Java and Scala , a scripting language for the Java virtual machine .", "label": "", "metadata": {}, "score": "74.5417"}
{"text": "CRISP comes with its own implementation of GraphPlan , but it can also output plans in PDDL ( \" Planning Domain Definition Language \" , a successor to STRIPS ) for use with other AI planners .License : LGPL .The code is a mixture of Java and Scala , a scripting language for the Java virtual machine .", "label": "", "metadata": {}, "score": "74.5417"}
{"text": "CRISP comes with its own implementation of GraphPlan , but it can also output plans in PDDL ( \" Planning Domain Definition Language \" , a successor to STRIPS ) for use with other AI planners .License : LGPL .The code is a mixture of Java and Scala , a scripting language for the Java virtual machine .", "label": "", "metadata": {}, "score": "74.5417"}
{"text": "OpenCCG is implemented in Java , and is freely available under the LGPL .Deliverables from the RAGS project - RAGSOCKS software for interfacing modules using RAGS data representations , example RAGS module ( genetic algorithm based text planner ) and RAGS wrapper for FUF / SURGE . is an ultra - simple Java - based realiser .", "label": "", "metadata": {}, "score": "74.75474"}
{"text": "OpenCCG is implemented in Java , and is freely available under the LGPL .Deliverables from the RAGS project - RAGSOCKS software for interfacing modules using RAGS data representations , example RAGS module ( genetic algorithm based text planner ) and RAGS wrapper for FUF / SURGE . is an ultra - simple Java - based realiser .", "label": "", "metadata": {}, "score": "74.75474"}
{"text": "OpenCCG is implemented in Java , and is freely available under the LGPL .Deliverables from the RAGS project - RAGSOCKS software for interfacing modules using RAGS data representations , example RAGS module ( genetic algorithm based text planner ) and RAGS wrapper for FUF / SURGE . is an ultra - simple Java - based realiser .", "label": "", "metadata": {}, "score": "74.75474"}
{"text": "OpenCCG is implemented in Java , and is freely available under the LGPL .Deliverables from the RAGS project - RAGSOCKS software for interfacing modules using RAGS data representations , example RAGS module ( genetic algorithm based text planner ) and RAGS wrapper for FUF / SURGE . is an ultra - simple Java - based realiser .", "label": "", "metadata": {}, "score": "74.75474"}
{"text": "OpenCCG is implemented in Java , and is freely available under the LGPL .Deliverables from the RAGS project - RAGSOCKS software for interfacing modules using RAGS data representations , example RAGS module ( genetic algorithm based text planner ) and RAGS wrapper for FUF / SURGE . is an ultra - simple Java - based realiser .", "label": "", "metadata": {}, "score": "74.75474"}
{"text": "OpenCCG is implemented in Java , and is freely available under the LGPL .Deliverables from the RAGS project - RAGSOCKS software for interfacing modules using RAGS data representations , example RAGS module ( genetic algorithm based text planner ) and RAGS wrapper for FUF / SURGE . is an ultra - simple Java - based realiser .", "label": "", "metadata": {}, "score": "74.75474"}
{"text": "LKB is implemented in Common Lisp , and is freely available under an open source license .It includes also a KNOPPIX - based GNU / Linux live - CD , with all the system installed , ready to use .Generates descriptions of entities and classes from OWL ontologies that have been annotated with linguistic and user modeling resources expressed in RDF .", "label": "", "metadata": {}, "score": "74.788414"}
{"text": "It should help you to learn more about the nature of unification grammars used for parsing or natural language generation .Furthermore , the MUG Workbench is helpful in debugging your grammars .Generates descriptions of entities and classes from OWL ontologies that have been annotated with linguistic and user modeling resources expressed in RDF .", "label": "", "metadata": {}, "score": "74.84735"}
{"text": "STANDUP .The STANDUP project ( System To Augment Non - speakers ' Dialogue Using Puns ) is a collaborative project on generating simple jokes from a graphical user interface appropriate for non - speaking children .The project began in October 2003 and ran until March 2007 .", "label": "", "metadata": {}, "score": "75.39435"}
{"text": "STANDUP .The STANDUP project ( System To Augment Non - speakers ' Dialogue Using Puns ) is a collaborative project on generating simple jokes from a graphical user interface appropriate for non - speaking children .The project began in October 2003 and ran until March 2007 .", "label": "", "metadata": {}, "score": "75.39435"}
{"text": "STANDUP .The STANDUP project ( System To Augment Non - speakers ' Dialogue Using Puns ) is a collaborative project on generating simple jokes from a graphical user interface appropriate for non - speaking children .The project began in October 2003 and ran until March 2007 .", "label": "", "metadata": {}, "score": "75.39435"}
{"text": "STANDUP .The STANDUP project ( System To Augment Non - speakers ' Dialogue Using Puns ) is a collaborative project on generating simple jokes from a graphical user interface appropriate for non - speaking children .The project began in October 2003 and ran until March 2007 .", "label": "", "metadata": {}, "score": "75.39435"}
{"text": "STANDUP .The STANDUP project ( System To Augment Non - speakers ' Dialogue Using Puns ) is a collaborative project on generating simple jokes from a graphical user interface appropriate for non - speaking children .The project began in October 2003 and ran until March 2007 .", "label": "", "metadata": {}, "score": "75.39435"}
{"text": "STANDUP .The STANDUP project ( System To Augment Non - speakers ' Dialogue Using Puns ) is a collaborative project on generating simple jokes from a graphical user interface appropriate for non - speaking children .The project began in October 2003 and ran until March 2007 .", "label": "", "metadata": {}, "score": "75.39435"}
{"text": "Papers are limited to 8 pages .The style files can be found here : [ 1 ] .No author information should be included in the papers , since reviewing will be blind .Papers not conforming to these requirements are subject to rejection without review .", "label": "", "metadata": {}, "score": "76.1357"}
{"text": "Written in Haskell .HALogen is a general - purpose natural language generation system developed by Irene Langkilde - Geary and Kevin Knight at the USC Information Sciences Institute .HALogen is a general - purpose natural language generation system developed by Irene Langkilde - Geary and Kevin Knight at the USC Information Sciences Institute .", "label": "", "metadata": {}, "score": "76.138275"}
{"text": "Written in Haskell .HALogen is a general - purpose natural language generation system developed by Irene Langkilde - Geary and Kevin Knight at the USC Information Sciences Institute .HALogen is a general - purpose natural language generation system developed by Irene Langkilde - Geary and Kevin Knight at the USC Information Sciences Institute .", "label": "", "metadata": {}, "score": "76.138275"}
{"text": "Commercial product .Implemented in Java .Free 30-day evaluation ; on - line demo on website .Deliverables from the RAGS project - RAGSOCKS software for interfacing modules using RAGS data representations , example RAGS module ( genetic algorithm based text planner ) and RAGS wrapper for FUF / SURGE . is a tool which allows you to graphically annotate the rhetorical structure of your text .", "label": "", "metadata": {}, "score": "76.22437"}
{"text": "However , because it is so simple , its relatively easy for people to learn how to use it .It has been used by many people in Aberdeen , and also for teaching .It is set up as a Java package , so it can only be used by Java programs .", "label": "", "metadata": {}, "score": "76.784805"}
{"text": "However , because it is so simple , its relatively easy for people to learn how to use it .It has been used by many people in Aberdeen , and also for teaching .It is set up as a Java package , so it can only be used by Java programs .", "label": "", "metadata": {}, "score": "76.784805"}
{"text": "However , because it is so simple , its relatively easy for people to learn how to use it .It has been used by many people in Aberdeen , and also for teaching .It is set up as a Java package , so it can only be used by Java programs .", "label": "", "metadata": {}, "score": "76.784805"}
{"text": "However , because it is so simple , its relatively easy for people to learn how to use it .It has been used by many people in Aberdeen , and also for teaching .It is set up as a Java package , so it can only be used by Java programs .", "label": "", "metadata": {}, "score": "76.784805"}
{"text": "However , because it is so simple , its relatively easy for people to learn how to use it .It has been used by many people in Aberdeen , and also for teaching .It is set up as a Java package , so it can only be used by Java programs .", "label": "", "metadata": {}, "score": "76.784805"}
{"text": "However , because it is so simple , its relatively easy for people to learn how to use it .It has been used by many people in Aberdeen , and also for teaching .It is set up as a Java package , so it can only be used by Java programs .", "label": "", "metadata": {}, "score": "76.784805"}
{"text": "It has been used in several dialog systems .The realizer has been enhanced with n - gram models and a supertagging approach called hypertagging .OpenCCG is implemented in Java , and is freely available under the LGPL .There are two versions : SPUD version 0.01 was written in SML .", "label": "", "metadata": {}, "score": "77.30615"}
{"text": "It has been used in several dialog systems .The realizer has been enhanced with n - gram models and a supertagging approach called hypertagging .OpenCCG is implemented in Java , and is freely available under the LGPL .There are two versions : SPUD version 0.01 was written in SML .", "label": "", "metadata": {}, "score": "77.30615"}
{"text": "It has been used in several dialog systems .The realizer has been enhanced with n - gram models and a supertagging approach called hypertagging .OpenCCG is implemented in Java , and is freely available under the LGPL .There are two versions : SPUD version 0.01 was written in SML .", "label": "", "metadata": {}, "score": "77.30615"}
{"text": "OpenCCG is implemented in Java , and is freely available under the LGPL .There are two versions : SPUD version 0.01 was written in SML .Later versions , known as SPUD lite , are written in Prolog .The small codebase of SPUD lite makes it ideal for teaching , but it is also used in dialog system prototypes .", "label": "", "metadata": {}, "score": "82.25104"}
{"text": "LKB is implemented in Common Lisp , and is freely available under an open source license .LKB is implemented in Common Lisp , and is freely available under an open source license .It includes also a KNOPPIX - based GNU / Linux live - CD , with all the system installed , ready to use .", "label": "", "metadata": {}, "score": "83.15314"}
{"text": "LKB is implemented in Common Lisp , and is freely available under an open source license .LKB is implemented in Common Lisp , and is freely available under an open source license .It includes also a KNOPPIX - based GNU / Linux live - CD , with all the system installed , ready to use .", "label": "", "metadata": {}, "score": "83.15314"}
{"text": "Currently supports English and Greek .Extensions for other languages welcome .( GPL ) .Generates descriptions of entities and classes from OWL ontologies that have been annotated with linguistic and user modeling resources expressed in RDF .Currently supports English and Greek .", "label": "", "metadata": {}, "score": "83.23506"}
{"text": "Suregen-2 .Suregen is \" a hybrid , ontology based and NLG - oriented formalism for generating text for documents in clinical medicine .\" The system Suregen-2 is written in ( Allegro ) Common Lisp .A demo system which runs under Windows is available for download .", "label": "", "metadata": {}, "score": "83.576294"}
{"text": "Suregen-2 .Suregen is \" a hybrid , ontology based and NLG - oriented formalism for generating text for documents in clinical medicine .\" The system Suregen-2 is written in ( Allegro ) Common Lisp .A demo system which runs under Windows is available for download .", "label": "", "metadata": {}, "score": "83.576294"}
{"text": "Suregen-2 .Suregen is \" a hybrid , ontology based and NLG - oriented formalism for generating text for documents in clinical medicine .\" The system Suregen-2 is written in ( Allegro ) Common Lisp .A demo system which runs under Windows is available for download .", "label": "", "metadata": {}, "score": "83.576294"}
{"text": "Suregen-2 .Suregen is \" a hybrid , ontology based and NLG - oriented formalism for generating text for documents in clinical medicine .\" The system Suregen-2 is written in ( Allegro ) Common Lisp .A demo system which runs under Windows is available for download .", "label": "", "metadata": {}, "score": "83.576294"}
{"text": "Suregen-2 .Suregen is \" a hybrid , ontology based and NLG - oriented formalism for generating text for documents in clinical medicine .\" The system Suregen-2 is written in ( Allegro ) Common Lisp .A demo system which runs under Windows is available for download .", "label": "", "metadata": {}, "score": "83.576294"}
{"text": "Suregen-2 .Suregen is \" a hybrid , ontology based and NLG - oriented formalism for generating text for documents in clinical medicine .\" The system Suregen-2 is written in ( Allegro ) Common Lisp .A demo system which runs under Windows is available for download .", "label": "", "metadata": {}, "score": "83.576294"}
{"text": "Important Dates .Nov 1 , 2008 : 1st Call for papers issued .Jan 15 , 2009 : 2nd Call for papers issued .Organizers .Anna Feldman , Montclair State University ( anna.feldman@montclair.edu ) .Birte Loenneker - Rodman , International Computer Science Institute / University of Hamburg , Germany ( birte.loenneker@uni-hamburg.de ) .", "label": "", "metadata": {}, "score": "85.17757"}
{"text": "View of Boulder from Bear Peak .University of Colorado at the far left .The CALC-09 workshop will be held in conjunction with NAACL HLT 2009 in Boulder , Colorado , on June 4 , 2009 .Topics .We are particularly interested in work on the automatic detection , classification , understanding , or generation of : . neologisms ; .", "label": "", "metadata": {}, "score": "104.78017"}
