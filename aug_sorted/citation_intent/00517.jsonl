{"text": "The principal eigenvalue for a path with 2t+1 vertices is 2 cos pi/(2t+2 ) .- Douglas Zare Mar 3 ' 10 at 0:40 .3 Answers 3 .The all - positive ( Perron - Frobenius ) eigenvector corresponding to $ \\lambda$ is .", "label": "", "metadata": {}, "score": "43.309357"}
{"text": "I believe what then corresponds to your c_t^2 would be the spectral norm of the tridiagonal matrix A having all diagonal entries 2 , all entries adjacent to the main diagonal 1 , and all other entries 0 .Surely this is a known quantity ... -", "label": "", "metadata": {}, "score": "46.271812"}
{"text": "If the final pair is divisible by 7 - so is the original value . -LBushkin Mar 14 ' 10 at 14:50 .Such a regular expression would be exceedingly complex , I imagine , as it would require branch points for each possible combination of pairs of two digit numbers , as well as two digit and one digit combinations .", "label": "", "metadata": {}, "score": "46.362785"}
{"text": "Operations preserving regular languages ( Boolean operations , product , star , shuffle , morphisms , inverses of morphisms , reversal , etc . ) .Recognized by a finite monoid .Rabin 's tree theorem ( Monadic second order logic with two successors ) .", "label": "", "metadata": {}, "score": "46.877296"}
{"text": "Here is a regular expression that tests if a number is divisible by 60 : .It works by testing if the number is divisible by 3 and using a lookahead to check if it is divisble by 20 .It differs from the regular expression posted by tiftik in the following ways : .", "label": "", "metadata": {}, "score": "49.152767"}
{"text": "Another way is to build up the language using operations under which you know they are closed .This is an extension to exhibiting a regular expression , as you have many more operations available ( reverse the string , complement , intersection , chop out a piece , just keep a part , homomorphisms and inverse homomorphisms , ... )", "label": "", "metadata": {}, "score": "49.1733"}
{"text": "Suppose it passes the first test .We know from this test that the number is divisible by 20 .Now all we need to do is show that it is divisible by 3 .If it is , then it is divisible by both 20 and 3 and therefore must be divisible by 60 , since 20 and 3 are coprime .", "label": "", "metadata": {}, "score": "50.3342"}
{"text": "The confinement probability in [ -K , K ] decays up to a constant like $ \\exp(-cn / K^2)$ where $ c$ is known : it is $ \\pi/2$. This is classical and you can find it e.g. in Feller volume 2 or in Spitzer 's book .", "label": "", "metadata": {}, "score": "50.44137"}
{"text": "( That is , that the language I am describing is not regular . )The known rules for testing for divisibility by 7 are amazingly cumbersome however , Gustavo Gerald Toja Frachia of S\u00e3o Paulo University has a method which can probably be adapted into a regular expression : 1 ) Separate the number into pairs of digits , starting from the right . 2 ) Calculate the difference between each pair of digits and the nearest upper or lower multiple of 7 , beginning with the first pair at the right . 3 ) Write out the resulting digits in the order in which they were calculated .", "label": "", "metadata": {}, "score": "50.582165"}
{"text": "r ) ( ra : empty ?r ) ) .( values f r ) .( let recr ( ( xs ls ) ( j i ) ) .( match xs .[ ( struct kons ( s t r ) ) .", "label": "", "metadata": {}, "score": "50.68132"}
{"text": "The exact count of paths staying in $ [ -t , t]$ is a sum of signed binomial coefficients . by the reflection principle applied to the group of isometries of $ \\mathbb R$ generated by reflecting about $ t+1 $ and $ -t-1$. A lot more can be said when $ t$ varies , but the answers are more complicated .", "label": "", "metadata": {}, "score": "50.89573"}
{"text": "It follows that we expect to apply $ F$ about $ 4n / t^2 $ times to a randomly generated sequence $ S$ in order to obtain a sequence whose partial sums are bounded within $ \\pm t$. w ester^\u00e2'\u00ac^rmk wimf _ , i i - ifti i t hhatstn fn.r.i laws which it , never iv^^ ! t^^^h!m^ ! , , -l.,\u00e2\u20ac\u017e.\u00e2\u20ac\u017e,,s .. al no respond , \u00e2\u20ac\u017e , -\u00e2\u20ac\u017e .", "label": "", "metadata": {}, "score": "51.004337"}
{"text": "The proper way for prime - length matching may just be a program in a general - purpose language that calls isPrime ... .hey neelk , the Berry - Sethi construction ( also called position automata , or Glushkov automata ) is somewhat related to the idea of derivatives ( continuations through the expression ) , I actually use that in a stateful translation of regexps .", "label": "", "metadata": {}, "score": "51.41118"}
{"text": "n ) a ] .[ else .( let ( ( t ( largest - skew - binary n ) ) ) .( let loop ( ( n n ) ( a ra : empty ) ) .( cond [ ( zero ?", "label": "", "metadata": {}, "score": "51.47506"}
{"text": "That can be useful , particularly in non - constructive proofs by cases . -Patrick87 Apr 18 ' 12 at 11:18 .regexp 's as found in programming languages can do much more than regular languages .You 'd have to restrict to \" classical \" constructs . -", "label": "", "metadata": {}, "score": "52.695107"}
{"text": "XHaskellis all that - which I find more elegant than the approaches to variable binding in regexp patterns that you mention .BTW , you can safely try matching Star(Star(L('A ' ) ) ) , against empty or non - empty strings , it wo n't loop .", "label": "", "metadata": {}, "score": "53.109505"}
{"text": "However , the question seems to be about closure properties , see the example given .That point I am missing in the other answers : to prove a closure property you assume you have a description , and construct a new one . -", "label": "", "metadata": {}, "score": "53.85609"}
{"text": "[ ( struct node ( x l r ) ) .( values x ( make - node ( f x ) l r ) ) ] .[ else ( values t ( f t ) ) ] ) ] .", "label": "", "metadata": {}, "score": "54.19403"}
{"text": "Advanced methods .Sophisticated pumping lemmas .See for instance [ 1 ] J. Jaffe , A necessary and sufficient pumping lemma for regular languages , Sigact News - SIGACT 10 ( 1978 ) 48 - 49 .[ 2 ] A. Ehrenfeucht , R. Parikh , and G. Rozenberg , Pumping lemmas for regular sets , SIAM J. Comput .", "label": "", "metadata": {}, "score": "54.840313"}
{"text": "I think , and this is only through intuition , that you 'll end up having to keep track of all possible match groups using some sort of tree structure .When you consume 1 character at a time you do n't know until the end which of the possible solutions to \" xAxxCxBxxAxxBxCCCBA \" will match .", "label": "", "metadata": {}, "score": "54.980515"}
{"text": "Will match addr1 and the N lines following addr1 .Will match addr1 and the lines following addr1 until the next .line whose input line number is a multiple of N .REGULAR EXPRESSIONS .POSIX.2 BREs should be supported , but they aren\u00e2\u20ac \u2122 t completely because of . performance problems .", "label": "", "metadata": {}, "score": "55.25624"}
{"text": "Let 's forget about that for a moment .Let us start from scratch .Well , not entirely from scratch .A regular expression then describes a set of words that all have a particular structure in common .In order to write down regexps in Scala , we need to define the building blocks .", "label": "", "metadata": {}, "score": "55.54659"}
{"text": "[ else .( make - kons 1 x ls ) ] ) ) .( define ( get - car+cdr name p ) .( match p .[ ( struct kons ( s ( struct node ( x t1 t2 ) ) r ) ) .", "label": "", "metadata": {}, "score": "55.690304"}
{"text": "( sub1 i ) f ) ] ) .[ else .( node - right t ) .( sub1 ( - i mid ) ) f ) ] ) .Operates in constant space .( cond [ ( zero ?", "label": "", "metadata": {}, "score": "55.793434"}
{"text": "Everything I read there agrees with my statement that this approach works for regular expressions but does not hold for the non - regular extensions present in most modern ( perl5-like ) engines .It 's easy to convince me .", "label": "", "metadata": {}, "score": "55.812267"}
{"text": "[ ( f ls ) .( let recr ( ( ls ls ) ) .( match ls .[ ( struct kons ( s t r ) ) .( make - kons s ( tree - map f t ) ( recr r ) ) ] .", "label": "", "metadata": {}, "score": "55.879173"}
{"text": "This lets you see his algorithm as lazy DFA construction .That is , we want a kind of type / Set module recursion that 's difficult to express in ML .This seems like a natural fit for Scala , though , and I 'd be interested seeing how to do it .", "label": "", "metadata": {}, "score": "55.909912"}
{"text": "For each node n , .For each kons k , .And for ( make - kons s0 FT0 ...( make - kons sn FTn ra : empty ) ) , .In other words , only s0 and s1 maybe equal , with all other skew numbers . strictly increasing .", "label": "", "metadata": {}, "score": "56.1482"}
{"text": "And as Raphael stresses , we need an argument to convince the audience that the chosen representation is indeed correct .Reconsidering the question , it adds ' For instance $ \\dots$ ' .That means we have to give a valid construction that , given any of the above models we assume specify language $ L$ , turns that model into one for $ L'$. This generally will be the same type of model , but need not be : we can e.g. start with an deterministic FSA for $ L$ and end with a nondeterminitic one for $ L'$. So , my point is that the answer is great , but we should add the \" from $ L$ to $ L'$ construction \" , when not building a specific language from scratch .", "label": "", "metadata": {}, "score": "56.296677"}
{"text": "( values ( node - val n ) false ( cons l ( cons ( node - right n ) f ) ) ) ] ) ) .( match f .[ ( quote ( ) ) ( values false false false ) ] .", "label": "", "metadata": {}, "score": "56.59026"}
{"text": "( define - struct node ( val left right ) # : prefab ) .( define ( tree - equal ? t1 t2 equal ? )( if ( node ? t1 ) .( and ( node ? t2 ) .", "label": "", "metadata": {}, "score": "56.71001"}
{"text": "Either a constant , or slowly growing ( say , it behaves like ( log n)^s for some real number s , or slower ) .variations .2 )If there are more delicate estimates for the case that t itself is a function of k e.g. t itself grows as ( log n)^s I would be very interested as well .", "label": "", "metadata": {}, "score": "56.71979"}
{"text": "Regexp::Extended - Perl wrapper that extends the re module with new features .SYNOPSIS .use Regexp::Extended qw(:all ) ; # ( ? \\d+)- ( ? \\d+)- ( ? rebuild(\"1234 \" ) ; # \" 998834 \" # ( ?DESCRIPTION .", "label": "", "metadata": {}, "score": "56.80066"}
{"text": "[ ( _ ) ra : list ] ) ) .( define - match - expander match : ra : cons .( syntax - rules ( match : ra : list ) ; ; Specialized case for matching last element .", "label": "", "metadata": {}, "score": "57.031723"}
{"text": "( Looks like that 's what tiftik has done . )Exercise : can you come up with a regular expression that determines if string contains a decimal number that is evenly divisible by 70 ?If you can , let 's see it .", "label": "", "metadata": {}, "score": "57.262604"}
{"text": "( match ls .[ ( struct kons ( s _ r ) ) ( + s ( recr r ) ) ] .( define ( ra : third ls ) ( ra : list - ref ls 2 ) ) .", "label": "", "metadata": {}, "score": "57.488937"}
{"text": "There are also performance issues , like when searching for a regexp match somewhere in a string , if the regexp starts with a constant text string then the implementation could use a specialized sublinear string search algorithm .I think you 'll even find that group capture is hard to do using this approach .", "label": "", "metadata": {}, "score": "57.795685"}
{"text": "$ Match the last line ./ regexp / .Match lines matching the regular expression regexp .\\ c regexp c .Match lines matching the regular expression regexp .The c may . be any character .GNU sed also supports some special 2-address forms : . 0 , addr2 .", "label": "", "metadata": {}, "score": "57.82498"}
{"text": "[ ( struct node ( x _ _ ) ) x ] .( match t .[ ( struct node ( x l r ) ) .( make - node ( f x ) ( tree - map f l ) ( tree - map f r ) ) ] .", "label": "", "metadata": {}, "score": "58.350014"}
{"text": "The key to making this work is to represent the \" remaining \" expression .But hey , do n't we have everything there to represent expressions ?We could just build the remaining expression as we go .Here is the full program .", "label": "", "metadata": {}, "score": "58.362038"}
{"text": "[ ( f a ls ) ( ra : foldl/1 f a ls ) ] .[ ( f a . lss ) .( check - nary - loop - args ' ra : foldl add1 f lss ) .( let loop ( ( lss lss ) ( a a ) ) .", "label": "", "metadata": {}, "score": "58.36994"}
{"text": "[ ( list t ) t ] .[ ( cons x xs+t ) .( define ( ra : build - list n f ) .( let loop ( ( n n ) ( a ra : empty ) ) .", "label": "", "metadata": {}, "score": "58.383553"}
{"text": "( or ( ra : empty ? x ) .( and ( ra : cons ?x ) .( ra : list ?( match ls .[ ( struct kons ( s t1 ( struct kons ( s t2 r ) ) ) ) .", "label": "", "metadata": {}, "score": "58.49707"}
{"text": "In the given example , we have some ( regular ) langage $ L$ as basis and want to say something about a language $ L'$ derived from it .Following the first approach -- construct a suitable model for $ L'$ -- we can assume whichever equivalent model for $ L$ we so desire ; it will remain abstract , of course , since $ L$ is unknown .", "label": "", "metadata": {}, "score": "58.511185"}
{"text": "And , if that is not enough , read the theorem and proof on the 1964 paper by Janus A. Brzozowski which is called \" Derivatives of Regular Expressions \" JACM 11:4 pp 481 - 494 .What it comes down to is that some computational problems have a structure to them that permits elegant solutions .", "label": "", "metadata": {}, "score": "58.58902"}
{"text": "[ ( cons leaf f ) .( values leaf false f ) ] ) ) ) .( define - sequence - syntax ra : in - list .( lambda ( ) # ' ( lambda ( x ) x ) ) .", "label": "", "metadata": {}, "score": "58.74623"}
{"text": "So all list operations that are O(f ) using sequential .lists are O(f ) using random access lists , trivially .However , index - based access and functional updates to elements , which are .O(i ) and O(n ) , respectively , using sequential lists , can be performed .", "label": "", "metadata": {}, "score": "59.139023"}
{"text": "p Print the current pattern space .P Print up to the first embedded newline of the current pattern . space .s/ regexp / replacement / .Attempt to match regexp against the pattern space .If success- . ful , replace that portion matched with replacement .", "label": "", "metadata": {}, "score": "59.18104"}
{"text": "Let $ a_1,a_2,\\dots , a_n$ be a sequence whose entries are +1 or -1 .Let t be a parameter .My question is to give an estimate for the number of such sequences so that .( In other words , the probability that a random sequence will satisfy the above relation . )", "label": "", "metadata": {}, "score": "59.35022"}
{"text": "t.i principle bn yet luistniti 1 .isocin.es nnd ( .-\u00e2- n^^^m u 10 in ii : i mode m b i.i when the i , i .l , ! ; , , i i not iii bj to an hni a epnratel be f .. tl .", "label": "", "metadata": {}, "score": "59.604218"}
{"text": "function dereferencing : ( ? & func ( ... ) ) .The new construct : ( ? & function ( ... ) ) will be replaced by the result of the call to function ( ... ) .Note that the result of the call will not be evaluated for named parameters of additionnal function calls .", "label": "", "metadata": {}, "score": "60.00791"}
{"text": "[ else .( let ( ( t ( largest - skew - binary n ) ) ) .( loop ( - n t ) .( s ( skew - succ t ) ) ) .( define ra : map .", "label": "", "metadata": {}, "score": "60.07177"}
{"text": "[ ( list ( match : ra : cons xs rs ) ... ) .( and ( apply f xs ) .( case - lambda .[ ( f ls ) ( for / or ( [ x ( ra : in - list ls ) ] ) ( f x ) ) ] .", "label": "", "metadata": {}, "score": "60.14903"}
{"text": "( values x r ) ] .[ else .( define ( get - first+rest name p ) .( get - car+cdr name p ) ; ; leave contract checking to contract system # ; .( let - values ( [ ( f r ) ( get - car+cdr name p ) ] ) .", "label": "", "metadata": {}, "score": "60.274384"}
{"text": "In other words , the number of paths when you spend at least $ n_t \\gt c t^2 $ steps at a given $ t$ should be .I do n't think the $ n_t \\gt c t^2 $ condition is sharp for this behavior .", "label": "", "metadata": {}, "score": "60.530914"}
{"text": "( loop ( cdr l ) ) ) ) .( unless ( procedure - arity - includes ?f m ) .xs ) . r+t ) .( let loop ( ( xs+t ( cons x r+t ) ) ) .", "label": "", "metadata": {}, "score": "60.735504"}
{"text": "It uses the overload module to parse constant qr// expressions and substitute known operators with an equivalent perl re .ADDED FEATURES .named parameters : ( ?The new construct : ( ? pattern ) will match pattern and if successfull will set a numeric parameters ( $ 1 , $ 2 , ... ) as well as a named parameter ( $ var ) .", "label": "", "metadata": {}, "score": "60.772648"}
{"text": "[ ( f . lss ) .( check - nary - loop - args ' ra : map ( lambda ( x ) x ) f lss ) .( let recr ( ( lss lss ) ) .( cond [ ( ra : empty ?", "label": "", "metadata": {}, "score": "60.787857"}
{"text": "( match n .[ ( struct node ( x ( and ( struct node _ ) left ) right ) ) .( values x left ( cons right f ) ) ] .[ ( struct node ( x leaf - left leaf - right ) ) .", "label": "", "metadata": {}, "score": "60.874672"}
{"text": "Therefore we can build a regexp that checks for divisibility by 3 ; if we combine that with the regexp that checks for divisibility by 20 , then we have the desired regular expression .The language of numbers written in decimal notation divisible by 60 is a regular language .", "label": "", "metadata": {}, "score": "61.46352"}
{"text": "( let ( ( l ( node - left n ) ) ) .( cond [ ( node ?l ) .( values ( node - val n ) l ( cons ( node - right n ) f ) ) ] .", "label": "", "metadata": {}, "score": "61.915527"}
{"text": "list and i is the index .To index and element , you find the appropriate tree then descend into the . proper position in the tree .Notice that each operation is O(lg n ) .( provide ( filtered - out ( lambda ( name ) .", "label": "", "metadata": {}, "score": "62.01025"}
{"text": "( values leaf false empty ) ] .[ ( struct kons ( size leaf ( struct kons ( _ ( and ( struct node _ ) n ) rest ) ) ) ) .[ ( struct kons ( size leaf rest ) ) .", "label": "", "metadata": {}, "score": "62.07779"}
{"text": "( match xs .[ ( struct kons ( s t r ) ) .( make - kons s ( tree - update s t j f ) r ) .( make - kons s t ( recr r ( - j s ) ) ) ) ] .", "label": "", "metadata": {}, "score": "62.08177"}
{"text": "( regexp - replace \" ra : \" name \" \" ) ) ) .( all - defined - out ) ) ) ; ; ------------------- ; ; Kons .( define - struct kons ( size tree rest ) # : property prop : equal+hash .", "label": "", "metadata": {}, "score": "62.09144"}
{"text": "Modern regexp engines are more complicated , and are well - known for doing things that can not be expressed as a regular expression .One example is backreferences , which makes it possible to match strings which are not of prime length .", "label": "", "metadata": {}, "score": "62.213207"}
{"text": "( I say this for the benefit of others . ) - Dan Tao Mar 12 ' 10 at 12:52 .As others have mentioned , regular expressions are completely the wrong tool to use for this .Rather , use TryParse to convert the string to an integer , and then test whether the integer is divisible by 60 .", "label": "", "metadata": {}, "score": "62.215424"}
{"text": "( check - nary - loop - args ' ra : foldr add1 f lss ) .( let recr ( ( lss lss ) ) .( match lss .[ ( cons ( match : ra : list ) _ ) b ] .", "label": "", "metadata": {}, "score": "62.418816"}
{"text": "( let recr ( ( xs ls ) ( j i ) ) # ; .( let ( ( s ( kons - size xs ) ) ) .( make - kons s ( tree - update s ( kons - tree xs ) j f ) ( kons - rest xs ) ) .", "label": "", "metadata": {}, "score": "62.83013"}
{"text": "( struct kons ( _ fst rst ) ) ) ] ) .( syntax - rules ( ) .[ ( _ ) ra : cons ] ) ) ; ; Sequence syntax ; ; --------------- ; ; Produce a forest of all the trees in the given ralist .", "label": "", "metadata": {}, "score": "62.84653"}
{"text": "Here is the code .We can now directly write things like Choice(L('a'),Star(L('b ' ) ) ) .Here is what these expressions mean : .Now how can we write code that follows these definitions ?Our first try might be a recursive function accepts that takes a regexp and a word and returns a boolean .", "label": "", "metadata": {}, "score": "63.291542"}
{"text": "( recr ( cdr lss ) ) .( ra : foldl/1 ra : cons ra : empty ls ) ) ; ; Not ready for release , but used internally .; ; Match patterns ; ; -------------- ( define - match - expander match : ra : list .", "label": "", "metadata": {}, "score": "63.445606"}
{"text": "h H Copy / append pattern space to hold space .g G Copy / append hold space to pattern space .x Exchange the contents of the hold and pattern spaces .l List out the current line in a \u00e2\u20ac\u02dc\u00e2\u20ac\u02dcvisually unambiguous\u00e2\u20ac \u2122 \u00e2\u20ac \u2122 form .", "label": "", "metadata": {}, "score": "63.60358"}
{"text": "@DavidLewis :On this site , you may assume that by \" regular expression \" the classical notion is meant .@DavidLewis I agree , one should avoid \" regexp \" in the context of theory to avoid confusion .Note that for any of the first four bullets , you 'll need a proof showing that your representation is indeed correct .", "label": "", "metadata": {}, "score": "63.656937"}
{"text": "( define ( ra : list - ref ls i ) .( let loop ( ( xs ls ) ( j i ) ) .( match xs .[ ( struct kons ( s t r ) ) .[ else ( loop r ( - j s ) ) ] ) ] .", "label": "", "metadata": {}, "score": "63.72805"}
{"text": "In that case , the language will be regular .The idea here is to define a finite automaton some of whose states \" remember \" the most recently - seen $ k$ input symbols , as in the answer to this question .", "label": "", "metadata": {}, "score": "63.93808"}
{"text": "This is just a brief synopsis of sed commands to serve as a reminder to .those who already know sed ; other documentation ( such as the texinfo . document ) must be consulted for fuller descriptions .Zero - address \u00e2\u20ac \u00e2 \u20ac", "label": "", "metadata": {}, "score": "63.956024"}
{"text": "[ else ( cons ( kons - tree ra ) .( define ( sequence - init ra ) .( match ra .[ ( quote ( ) ) .( values false false false ) ] .[ ( struct kons .", "label": "", "metadata": {}, "score": "64.07895"}
{"text": "Given a sequence $ S$ , we identify in $ S$ the first place $ q$ where the partial sum leaves $ \\pm t$. We identify the last place $ r$ preceding $ q$ in which it remains within $ \\pm t/2$. Then we let $ F(S)$ be the sequence obtained from $ S$ by swapping the signs of all elements from the $ r$th place .", "label": "", "metadata": {}, "score": "64.367645"}
{"text": "It turns out there is a better way : A word can obviously only match if each of its letters were matched by some part of the regular expression .So why do n't we take each letter , and try to \" consume \" it with some part of the regular expression .", "label": "", "metadata": {}, "score": "64.53698"}
{"text": "[ ( cons ( match : ra : list ) _ ) a ] .[ ( list ( match : ra : cons xs rs ) ... ) .( loop rs .( case - lambda .[ ( f b ls ) ( ra : foldr/1 f b ls ) ] .", "label": "", "metadata": {}, "score": "64.697296"}
{"text": "( match : ra : cons fst ( match : ra : list ) ) .( struct kons ( 1 fst ( match : ra : list ) ) ) ] ; ; General case .[( match : ra : cons fst rst ) ; ; IMPROVE ME ( or ( and ( struct kons ( _ ( struct node ( fst _ _ ) ) _ ) ) .", "label": "", "metadata": {}, "score": "64.74419"}
{"text": "( make - node ( f o ) .( rec i/2 ( add1 o ) ) .( let ( ( n ( recr ( half i ) ) ) ) .( cond [ ( zero ?i ) .", "label": "", "metadata": {}, "score": "64.94754"}
{"text": "( check - nary - loop - args ' ra : ormap ( lambda ( x ) x ) f lss ) .( match lss .[ ( cons ( match : ra : list ) _ ) false ] .", "label": "", "metadata": {}, "score": "64.961494"}
{"text": "( case - lambda .[ ( f ls ) ( for / and ( [ x ( ra : in - list ls ) ] ) ( f x ) ) ] .[ ( f . lss ) .( check - nary - loop - args ' ra : andmap ( lambda ( x ) x ) f lss ) .", "label": "", "metadata": {}, "score": "65.255295"}
{"text": "For contracted bindings , use : .( require ( planet dvanhorn / ralist / contract ) ) .Data definitions .This library represents lists as an ordered sequence of full binary trees .The ordering is given by the height of each full binary tree , which is a . number of the form 2^i-1 , called a skew number .", "label": "", "metadata": {}, "score": "65.30492"}
{"text": "( match ts .[ ( list ( struct node ( vs ls rs ) ) ... ) .( make - node ( apply f vs ) ( recr ls ) ( recr rs ) ) ] .[ else .", "label": "", "metadata": {}, "score": "65.38406"}
{"text": "I do appreciate that you seem to be saying that regexp matching happens in context , and that existing solutions have evolved to accomodate all sorts of context ( search and replace in text , for instance ) and that applications typically need matching - functionality that is beyond regular .", "label": "", "metadata": {}, "score": "65.425446"}
{"text": "Edit : Shorter version : . ^ ( ?I understand that JS is by far the most better option to perform a simple mathematical check .i just wondered and wanted to know if regular expressions could be used to perform such checks as well .", "label": "", "metadata": {}, "score": "65.50233"}
{"text": "c \\ text Replace the selected lines with text , which has each embedded . newline preceded by a backslash .d Delete pattern space .Start next cycle .D Delete up to the first embedded newline in the pattern space .", "label": "", "metadata": {}, "score": "65.517044"}
{"text": "there 's no restriction to use $ L'$ automaton for that task ( and naturally , if $ L$ is defined via $ L'$ you will be forced to use $ L'$ 's automaton .The same goes for regexp , closure , grammars , etc . -", "label": "", "metadata": {}, "score": "65.57366"}
{"text": "The new construct : ( ? pattern ) . )You could also write is as ( ?& upto(pattern ) ) if you import Regexp::Extended with qw(:all ) .This basically matches upto a certain pattern ( or includes it in the latter ) .", "label": "", "metadata": {}, "score": "65.76221"}
{"text": "To install Regexp::Extended , simply copy and paste either of the commands in to your terminal Find construction project leads fast and efficiently with Lead Manager+ .With up to 40 % more private projects than our leading competitors , Lead Manager+ is the superior lead management solution in the commercial construction industry .", "label": "", "metadata": {}, "score": "65.79425"}
{"text": "Plus you can pass between the cars in stop - and - go traffic :) .I am nevertheless certain that throwing math and more practical examples of perl - like text processing may help to solve those problems elegantly ( derivatives for LL parsing ? ) , too .", "label": "", "metadata": {}, "score": "65.806595"}
{"text": "isocin.es nnd ( .-\u00e2- n^^^m u 10 in ii : i mode m b i.i when the i , i .l , ! ; , , i i not iii bj to an hni a epnratel be f .. tl .", "label": "", "metadata": {}, "score": "65.87926"}
{"text": "( struct node ( x ( and ( struct node _ ) left - node ) right - node ) ) rest ) ) .[ ( struct kons .( size ( struct node ( x left - leaf right - leaf ) ) rest ) ) .", "label": "", "metadata": {}, "score": "66.081726"}
{"text": "For $ t$ more rapidly increasing , different behaviors occur .I think there are precise versions of the law of the iterated logarithm which may tell you when a positive proportion of random paths do not violate the constraint .Great ! thanks a lot .", "label": "", "metadata": {}, "score": "66.11454"}
{"text": "( syntax - case stx ( ) .[( ( i d ) ( _ ra - list - exp ) ) # ' [ ( i d ) .( : do - in .( [ ( v t f ) ( sequence - init ra - list - exp ) ] ) ' outer - check ; ; loop bindings ( [ v v ] [ t t ] [ f f ] ) ; ; pos check f ; ; inner bindings ( [ ( i d ) v ] .", "label": "", "metadata": {}, "score": "66.270584"}
{"text": "( equal - hash - code ( kons - tree ra ) ) ) 0 14 ) .( arithmetic - shift .( bitwise - bit - field ( equal - hash - code ( kons - tree ra ) ) 0 14 ) 14 ) ) ) .", "label": "", "metadata": {}, "score": "66.36011"}
{"text": "Not every problem will have an elegant purely functional solution , but conciseness and clarity have their place in every software engineering project .Now enjoy finding the essence of your code .11 comments : .I first came across derivatives to regular expressions when I learned about RELAX - NG .", "label": "", "metadata": {}, "score": "66.38237"}
{"text": "[ ( cons ( match : ra : list ) _ ) true ] .[ else .( let loop ( ( lss lss ) ) .( match lss .[ ( list ( match : ra : cons xs ( match : ra : list ) ) ... ) .", "label": "", "metadata": {}, "score": "66.39414"}
{"text": "This question is relevant to the recent collective effort ( polymath5 ) regarding the Erdos Discrepancy Problem ( EDP ) .It particular it is relevant to a probabilistic heuristic regarding what the answer to EDP , and to several related questions , should be .", "label": "", "metadata": {}, "score": "66.47563"}
{"text": "( syntax - rules ( ) .[ ( ra : for / list .x ) .( foldr ra : cons ra : empty ( for / list .x ) ) ] ) ) gwene has asked for the wisdom of the Perl Monks concerning the following question : .", "label": "", "metadata": {}, "score": "66.81209"}
{"text": "( let recr ( ( ls ls ) ) .( cond [ ( ra : empty ? ls ) b ] .[ else ( let - values ( [ ( fst rst ) ( ra : first+rest ls ) ] ) .", "label": "", "metadata": {}, "score": "67.185745"}
{"text": "I was wondering if i could use to test one that check that the number is divisible by 10 and then check whether the same is divisible by 6 .Please correct me if i am wrong .A number divisible by 10 and 6 is not necessarily divisible by 60 .", "label": "", "metadata": {}, "score": "67.22821"}
{"text": "Here is a useful supplement and references to the existing answers .I asked Yuval Peres a few days ago the question formulated as follows : .What is the probability that the simple random walk of n steps will be confined to the interval $ [ -K , K]$ ?", "label": "", "metadata": {}, "score": "68.03989"}
{"text": "Replace(\"c \" , c ) .there 's a typo in the definition of your $ L'$ , please edit to fix .-Ran G. Apr 18 ' 12 at 5:46 . \" Drawing \" is no proof ; you have to give an NFA and prove it accepts the language .", "label": "", "metadata": {}, "score": "68.05594"}
{"text": "It is well known that numbers divisible by three are such that the sum of their digits is divisible by 3 .It is also well known that every regular expression corresponds to a finite state machine , and every finite state machine corresponds to a regular expression .", "label": "", "metadata": {}, "score": "68.29309"}
{"text": "( if ( zero ?i ) .( tree - val t ) .( let recr ( ( mid ( half ( sub1 size ) ) ) ( t t ) ( i i ) ) .( cond [ ( zero ?", "label": "", "metadata": {}, "score": "68.48393"}
{"text": "This is similar to 1 , addr2 , except that if addr2 matches .the very first line of input the 0 , addr2 form will be at the end . of its range , whereas the 1 , addr2 form will still be at the . beginning of its range .", "label": "", "metadata": {}, "score": "68.49166"}
{"text": "rxt($string ) , rxt($string ) .This function parses a string ( or pattern ) and returns the transformed version according the the above operators .AUTHOR .SEE ALSO .Regexp::Fields for yet another way of extending the perl re engine by patching it .", "label": "", "metadata": {}, "score": "68.51456"}
{"text": "( node - val t1 ) ( node - val t2 ) ) .( tree - equal ?( node - left t1 ) ( node - left t2 ) equal ? )( tree - equal ?( node - right t1 ) ( node - right t2 ) equal ? ) ) ( equal ?", "label": "", "metadata": {}, "score": "68.63614"}
{"text": "escapes \\1 through \\9 to refer to the corresponding matching . sub - expressions in the regexp .w filename .Write the current pattern space to filename .W filename .Write the first line of the current pattern space to filename .", "label": "", "metadata": {}, "score": "68.8451"}
{"text": "If I have some model for $ L'$ , I can convert it into any of the other equivalent ones .@Raphael Sorry I did make my point .The earlier answers seem to explain we can construct a description of the language ( as automaton , operations , etc . ) .", "label": "", "metadata": {}, "score": "68.983284"}
{"text": "( or ( apply f xs ) .( loop rs ) ) ] ) ) ] ) ] ) ) ; ; Noop ( define ( check - nary - loop - args name mod f lss ) ( void ) ) ; ; Now taken care of at the contract level .", "label": "", "metadata": {}, "score": "69.08916"}
{"text": "( let loop ( ( lss lss ) ) .( match lss .[ ( list ( match : ra : cons xs ( match : ra : list ) ) ... ) .( apply f xs ) ] .", "label": "", "metadata": {}, "score": "69.33119"}
{"text": "First off , of the one - digit numbers , only 0 is evenly divisible by 60 .Of the non - one - digit numbers , all numbers divisible by 60 are also divisible by 20 , and therefore end in 00 , 20 , 40 , 60 or 80 .", "label": "", "metadata": {}, "score": "69.53023"}
{"text": "( if ( node ? t ) .( make - node ( f ( node - val t ) ) .( node - left t ) .( node - right t ) ) .( f t ) ) ] .", "label": "", "metadata": {}, "score": "69.54654"}
{"text": "You can use : utf8 layer to encode characters because they are internally stored as valid UTF-8 .I need to apply validation on input time intervals that are taken in as seconds .Now i am not really good at Regular expressions .", "label": "", "metadata": {}, "score": "69.78201"}
{"text": "( kons Skew [ Tree X ] [ RAList X ] ) .( define - struct kons ( size tree rest ) ) .-X . -( make - node X [ Tree X ] [ Tree X ] ) .", "label": "", "metadata": {}, "score": "69.83922"}
{"text": "Andrew , since the problem described above is matching , it is going to be hard for me to convince you that it is in fact possible to do better than all the backreferences , groups and whatnot from the Emacs , Posix heritage .", "label": "", "metadata": {}, "score": "69.99779"}
{"text": "-n , --quiet , --silent . specify the desired line - wrap length for the \u00e2\u20ac\u02dcl\u00e2\u20ac \u2122 command --posix .disable all GNU extensions .-r , --regexp - extended .use extended regular expressions in the script .-s , --separate .", "label": "", "metadata": {}, "score": "70.54335"}
{"text": "list constructors ( for lists of pairs nat , tree ) , but represented using .structures to allow for extending equal ? and customizing printing .Algorithms .The elements of a list are given by a pre - order traversal of each tree in .", "label": "", "metadata": {}, "score": "70.6314"}
{"text": "well aathaexecutlve&legi.lative are ao dual dovelopement of tl.e science ._ par ' \" ' \" z , , , c \" ' \" l \" \" f \" when unauthorized bu the constitution ticularly oi its application 10 our cal t ' - ' v.'tisuyni.d the m e riil^e o f , . , \u00e2\u20ac\u017e\u00e2\u20ac\u017e iii commenting upon the 3d resolution condition a notii n therefore of the date l ? 5 \" \" ' ' idge.and . 1 \" r 1 1 1 1 r , , , r n ih.vc tide i ji ; and 11 iror the conn mr madison ay : from which lha several ' onstituliona of , .", "label": "", "metadata": {}, "score": "70.66015"}
{"text": "well aathaexecutlve&legi.lative are ao dual dovelopement of tl.e science ._ par ' \" ' \" z , , , c \" ' \" l \" \" f \" when unauthorized bu the constitution ticularly oi its application 10 our cal t ' - ' v.'tisuyni.d the m e riil^e o f , . , \u00e2\u20ac\u017e\u00e2\u20ac\u017e iii commenting upon the 3d resolution condition a notii n therefore of the date l ? 5 \" \" ' ' idge.and . 1 \" r 1 1 1 1 r , , , r n ih.vc tide i ji ; and 11 iror the conn mr madison ay : from which lha several ' onstituliona of , .", "label": "", "metadata": {}, "score": "70.66015"}
{"text": "the newline character , and similarly for \\a , \\t , and other sequences .BUGS .E - mail bug reports to bonzini@gnu.org .Be sure to include the word .\u00e2\u20ac\u02dc\u00e2\u20ac\u02dcsed\u00e2\u20ac \u2122 \u00e2\u20ac \u2122 somewhere in the \u00e2\u20ac\u02dc\u00e2\u20ac\u02dcSubject : \u00e2\u20ac \u2122 \u00e2\u20ac \u2122 field .", "label": "", "metadata": {}, "score": "70.67405"}
{"text": "\u00e2- in iration in respect i r \u00e2- ii .w ester^\u00e2'\u00ac^rmk wimf _ , i i - ifti i t hhatstn fn.r.i laws which it , never iv^^ ! t^^^h!m^ ! , , -l.,\u00e2\u20ac\u017e.\u00e2\u20ac\u017e,,s .. al no respond , \u00e2\u20ac\u017e , -\u00e2\u20ac\u017e .", "label": "", "metadata": {}, "score": "70.83252"}
{"text": "What do you know ?Pattern matching and recursive calls .Not a single imperative update .It does n't even use anonymous functions .The program looks remarkably similar in Haskell .I could now go and try to explain why the partDeriv function does what it does , but you would n't learn anything from it .", "label": "", "metadata": {}, "score": "70.9366"}
{"text": "Most rules seems easy , like for Choice we can try to match the input against r 1 and if that does n't work out , we would try r 2 .However , for Seq and Star we would have to cut a word in pieces and match the pieces against the regexps , possibly backtracking and trying out other ways to cut the word in pieces .", "label": "", "metadata": {}, "score": "71.1505"}
{"text": "( + ( bitwise - bit - field ( equal - hash - code ( kons - tree ra ) ) 14 28 ) .( kons - size ra ) .( arithmetic - shift .( let ( ( print ( if write ? write display ) ) ) .", "label": "", "metadata": {}, "score": "71.18065"}
{"text": "anyways , the specific language is irrelevant if the question is \" can I draw an NFA to prove it is regular \" . @corium , can we edit the question to reflect the more general question : \" how to prove that a specific $ L$ is regular \" ? -", "label": "", "metadata": {}, "score": "71.786224"}
{"text": "( let ( ( n ( ra : length ( car lss ) ) ) .( m ( mod ( length lss ) ) ) ) .( let loop ( ( l ( cdr lss ) ) ) .( unless ( empty ?", "label": "", "metadata": {}, "score": "71.92575"}
{"text": "[ else ; ; IMPROVE ME : make one pass over lss .( make - kons ( kons - size ( car lss ) ) .( tree - map / n f ( map kons - tree lss ) ) .", "label": "", "metadata": {}, "score": "72.22061"}
{"text": "( define ( ra : ninth ls ) ( ra : list - ref ls 8 ) ) .( define ( ra : tenth ls ) ( ra : list - ref ls 9 ) ) .( let loop ( ( xs ls ) ( j i ) ) .", "label": "", "metadata": {}, "score": "72.24773"}
{"text": "If it means I can only use ascii , that 's fine with me .I just need to know how :) .This way , Perl decodes everything automatically , and you only have to work with characters , not bytes .", "label": "", "metadata": {}, "score": "72.85985"}
{"text": "[( match : ra : list ) ( quote ( ) ) ] .[( match : ra : list x y ... ) .( match : ra : cons x ( match : ra : list y ... ) ) ] ) .", "label": "", "metadata": {}, "score": "72.89241"}
{"text": "\u2122 \u00e2\u20ac \u00e2 \u20ac\u2122 .: label .Label for b and t commands .# comment .The comment extends until the next newline ( or the end of a -e . script fragment ) . Zero- or One- address commands . a \\ text Append text , which has each embedded newline preceded by a back- . slash .", "label": "", "metadata": {}, "score": "73.2114"}
{"text": "the address ( or address - range ) does not match .The following address types are supported : number Match only the specified line number .Match every step \u00e2\u20ac \u2122 th line starting with line first .For example , . starting with the second .", "label": "", "metadata": {}, "score": "73.34202"}
{"text": "I 've tried different parameters at the end of my regexp statements , like /u or /a or /dAnd I 've tried .Can you please help ?I believe my ignorance when it comes to encoding is getting in the way .", "label": "", "metadata": {}, "score": "73.34627"}
{"text": "SEE ALSO .awk(1 ) , ed(1 ) , grep(1 ) , tr(1 ) , perlre(1 ) , sed.info , any of various .The full documentation for sed is maintained as a Texinfo manual .If . the info and sed programs are properly installed at your site , the com- .", "label": "", "metadata": {}, "score": "73.519516"}
{"text": "( print - pair - curly - braces ) ) ) .( display ( if curly ?( let loop ( ( ls ra ) ) .( cond [ ( ra : empty ? ls ) ' done ] .", "label": "", "metadata": {}, "score": "73.75357"}
{"text": "( print ( ra : car ls ) p ) .( unless ( ra : empty ?( ra : cdr ls ) ) .( display \" \" p ) .( loop ( ra : cdr ls ) ) ) ] .", "label": "", "metadata": {}, "score": "74.44509"}
{"text": "ki then flbe rep not to be let ilmn 36 nor inure than 10 senator elected forsyeara loumliiu^^ii^eiminnui.llv theimimuheii zzz____m tt , \u00e2- isiun tt- .i in he it^ttttttttttro^^^^^bi .\" ma chines huve b\"en transported there but ins intelligence of their success hus ; . i.kt .", "label": "", "metadata": {}, "score": "74.74385"}
{"text": "( recr ( half ( sub1 mid ) ) .( node - left t ) .( sub1 i ) ) .( node - right t ) ) ] .[ else .( make - node ( node - val t ) .", "label": "", "metadata": {}, "score": "74.79927"}
{"text": "Many languages ( for example Javascript ) do n't support variable length lookbehind assertions .This regular expression does not use lookbehinds so it can for example also be used for client - side validation in a web application .It disallows numbers with leading zeros ( if you want to allow leading zeros just remove the ( ? !", "label": "", "metadata": {}, "score": "74.90219"}
{"text": "Ah , this $ L'$ !Now I get it , my bad .I agree , this aspect is missing from Ran 's answer .I 'm not sure why it is missing ( or what exactly is missing ) .", "label": "", "metadata": {}, "score": "74.984406"}
{"text": "( recr ( half ( sub1 mid ) ) .( node - right t ) .( sub1 ( - i mid ) ) ) ) ] ) ) ) ; ; ------------------------ ; ; Random access lists ; ; See tests / ra - list for tests . kons ? ) empty ? )", "label": "", "metadata": {}, "score": "75.1806"}
{"text": "ki then flbe rep not to be let ilmn 36 nor inure than 10 senator elected forsyeara loumliiu^^ii^eiminnui.llv theimimuheii zzz____m tt , \u00e2- isiun tt- .i in he it^ttttttttttro^^^^^bi .ma chines huve b\"en transported there but ins intelligence of their success hus ; . i.kt .", "label": "", "metadata": {}, "score": "75.37365"}
{"text": "Dan Tao Mar 12 ' 10 at 4:49 .Why Regex ?Why not just test var % 60 to see if its divisible evenly by 60 or not ?I for one would really like to see someone come up with a regex for this ...", "label": "", "metadata": {}, "score": "75.44812"}
{"text": "( lambda ( ra1 ra2 equal ? )( tree - equal ?( kons - tree ra1 ) ( kons - tree ra2 ) equal ? )( equal ?( kons - rest ra1 ) ( kons - rest ra2 ) ) ) ) ; ; I 'm just guessing here ... ( lambda ( ra equal - hash - code ) .", "label": "", "metadata": {}, "score": "75.5701"}
{"text": "cuted for all input lines which match the inclusive range of lines .starting from the first address and continuing to the second address .Three things to note about address ranges : the syntax is addr1 , addr2 .( i.e. , the addresses are separated by a comma ) ; the line which addr1 . matched will always be accepted , even if addr2 selects an earlier line ; . and if addr2 is a regexp , it will not be tested against the line that addr1 matched .", "label": "", "metadata": {}, "score": "75.669395"}
{"text": "Append a line read from filename .Commands which accept address ranges .b label .Branch to label ; if label is omitted , branch to end of script .t label .If a s/// has done a successful substitution since the last .", "label": "", "metadata": {}, "score": "75.692505"}
{"text": "input , except that if auto - print is not disabled the current . pattern space will be printed .Q Immediately quit the sed script without processing any more .input .r filename .Append text read from filename .", "label": "", "metadata": {}, "score": "75.71219"}
{"text": "t _ \u00e2\u20ac\u017e w , n , , ti mr chairman find a man thsn , , , , .-,\u00e2\u20ac\u017e , \u00e2\u20ac\u017e rnt habits principle and ex s u ' .\u00e2- his.riet.i and tha be it lo \u00e2\u20ac\u017e . . . .", "label": "", "metadata": {}, "score": "76.09143"}
{"text": "t _ \u00e2\u20ac\u017e w , n , , ti mr chairman find a man thsn , , , , .-,\u00e2\u20ac\u017e , \u00e2\u20ac\u017e rnt habits principle and ex s u ' .\u00e2- his.riet.i and tha be it lo \u00e2\u20ac\u017e . . . .", "label": "", "metadata": {}, "score": "76.09143"}
{"text": "( hj particle of gold contained in ibem in or one hundred and sixty waggons 0,ot'qf let i d detach and prepare them for he al water sta.iuu .y hsve !t. , ! ci , l ilhj that t pr- .", "label": "", "metadata": {}, "score": "76.37758"}
{"text": "( hj particle of gold contained in ibem in or one hundred and sixty waggons 0,ot'qf let i d detach and prepare them for he al water sta.iuu .y hsve !t. , ! ci , l ilhj that t pr- .", "label": "", "metadata": {}, "score": "76.37758"}
{"text": "For the first time in 25 years , the maximum fines for OSHA violations are set to significantly increase this year .For the third consecutive\u00c2 year , Construction Data\u00e2\u20ac\u2122 s Blog has been nominated for Construction Marketing Ideas\u00e2\u20ac \u2122 Best Construction Blog Competition .", "label": "", "metadata": {}, "score": "76.384155"}
{"text": "( display \" . \" p ) .( print ls p ) ] ) ) .( display ( if curly ?( make - do - sequence .( lambda ( ) .( values .( lambda ( x ) ( tree - val ( car x ) ) ) .", "label": "", "metadata": {}, "score": "77.05615"}
{"text": "You only need 7 states , with 10 edges from each .I would n't want to try translating that to a regular expression by hand , of course . - dfeuer Jun 24 ' 12 at 5:18 .^ ( ( ?", "label": "", "metadata": {}, "score": "77.18952"}
{"text": "I 'm impressed .I 'm also never going to use this .It 's a canonical anecdote of regexp abuse .-Steven Sudit Sep 12 ' 10 at 11:47 .It really should n't be too horribly bad to see what 's divisible by 7 .", "label": "", "metadata": {}, "score": "77.38008"}
{"text": "( let ( ( tr ( car p ) ) ) .( cond [ ( node ? tr ) .( cons ( node - left tr ) .( cons ( node - right tr ) .( cdr p ) ) ) ] .", "label": "", "metadata": {}, "score": "77.944855"}
{"text": "no validation is performed and now the text accepts any value even a string . probably the expression is not fitting in to my case somehow . -Steve Johnson Mar 12 ' 10 at 6:57 .Note : Regular expressions are not the right tool for this .", "label": "", "metadata": {}, "score": "78.67615"}
{"text": "All . remaining arguments are names of input files ; if no input files are .specified , then the standard input is read .E - mail bug reports to : bonzini@gnu.org .Be sure to include the word .\u00e2\u20ac\u02dc\u00e2\u20ac\u02dcsed\u00e2\u20ac \u2122 \u00e2\u20ac \u2122 somewhere in the \u00e2\u20ac\u02dc\u00e2\u20ac\u02dcSubject : \u00e2\u20ac \u2122 \u00e2\u20ac \u2122 field .", "label": "", "metadata": {}, "score": "78.91751"}
{"text": "j ) xs ] . lss ) .( cond [ ( empty ? lss ) ra : empty ] .[ lss ( let recr ( ( lss lss ) ) .( cond [ ( empty ?( cdr lss ) ) ( car lss ) ] .", "label": "", "metadata": {}, "score": "79.326324"}
{"text": "Michael Burr Mar 12 ' 10 at 5:10 .@Eric : Yes , but I was concerned that was n't the OP 's idea .He said , \" ... check that the number is divisible by 10 and then check whether the same is divisible by 6 . \" - Dan Tao Mar 12 ' 10 at 12:40 .", "label": "", "metadata": {}, "score": "79.83614"}
{"text": "( tree - ref / a ( node - left t ) .( sub1 i ) .( half ( sub1 mid ) ) ) ] .[ else .( tree - ref / a ( node - right t ) .", "label": "", "metadata": {}, "score": "80.18586"}
{"text": "Gil Kalai Mar 2 ' 10 at 19:30 .For Brownian motion , the distribution of the maximum is found in closed form via reflection principle .For symmetric random walk , ca n't you do the same ? -Paul Yuryev Mar 2 ' 10 at 20:46 .", "label": "", "metadata": {}, "score": "80.52323"}
{"text": "should give you access to the complete manual . sed version 4.1.3 January 2005 SED(1 )I want to show you a simple program that matches regular expressions ( regexps ) , which demonstrates rather nicely what makes functional programming so appealing .", "label": "", "metadata": {}, "score": "80.69577"}
{"text": "\" The best thing I like about Construction Data is the personal attention I receive from the Editorial Department .If ever I do n't see the information I am looking for , I can contact the Editorial Department and they will go out of their way to call architects , GCs or whoever has the information I need . \"", "label": "", "metadata": {}, "score": "81.66784"}
{"text": "So I thought that it may have to do with encoding , but wan't too worried if it 's just an occasional weird character popping up .But then my regexp code itself seemed hay - wire -- matching things it should n't .", "label": "", "metadata": {}, "score": "81.67541"}
{"text": "Transliterate the characters in the pattern space which appear . in source to the corresponding character in dest .Addresses .Sed commands can be given with no addresses , in which case the command .will be executed for all input lines ; with one address , in which case .", "label": "", "metadata": {}, "score": "82.03649"}
{"text": "i such a om .r internal harmony and dang.rou lo ul pnion ofthe state rrtixlred tin he pnneral course of fb i resent adtnin.atratinn ' \" matter of internal policy aiming s it does st com 1 premise nrl conciliation among tbe vitrt .", "label": "", "metadata": {}, "score": "82.6514"}
{"text": "i such a om .r internal harmony and dang.rou lo ul pnion ofthe state rrtixlred tin he pnneral course of fb i resent adtnin.atratinn ' \" matter of internal policy aiming s it does st com 1 premise nrl conciliation among tbe vitrt .", "label": "", "metadata": {}, "score": "82.6514"}
{"text": "We have signed a 2-year contract for your service and look forward to increasing our business through the use of Construction Data .At L / B Water , we do not have customers & vendors , we have partners and we look forward to our partnership with the Construction Data organization .", "label": "", "metadata": {}, "score": "82.732834"}
{"text": "Oh , OK .Actually , I 'd rather edit the question , and remove the \" for instance \" part , thus making the question more general , and a reference for future similar questions .(: - Ran G. Apr 10 ' 13 at 0:42 .", "label": "", "metadata": {}, "score": "83.48212"}
{"text": "Expectation .I would expect that the answers to the questions above are known .But they are not known to me .Is this insufficient for what you need ? -Bill Johnson Mar 2 ' 10 at 18:58 .Dear Bill , I do nt think so .", "label": "", "metadata": {}, "score": "83.561005"}
{"text": "h w , \u00e2\u20ac\u017e , c , , vu , , , . , 1 wl^ffl ilr ( h ni in r . iii upon craige salisbury rowan county n c ... monday april 9 h .itiiiti ofthe i.th from each town having 154 rotes and \u00e2- ne tor m.n i ' .", "label": "", "metadata": {}, "score": "83.566574"}
{"text": "When in state C , inputs 0 , 3 , 6 and 9 go to state C. Inputs 1 , 4 and 7 go to state A. Inputs 2 , 5 and 8 go to state B. .All other inputs go to an error state .", "label": "", "metadata": {}, "score": "83.657715"}
{"text": "branch to label ; if label is omitted , branch to end of script .T label .If no s/// has done a successful substitution since the last .input line was read and since the last t or T command , then .", "label": "", "metadata": {}, "score": "83.804955"}
{"text": "( define ( ra : fifth ls ) ( ra : list - ref ls 4 ) ) .( define ( ra : sixth ls ) ( ra : list - ref ls 5 ) ) .( define ( ra : seventh ls ) ( ra : list - ref ls 6 ) ) .", "label": "", "metadata": {}, "score": "83.90586"}
{"text": "Implement it , along with the matched substring with length equal to a factor of the full string 's length , and I 'm sold .Andrew , I tried to be careful in mentioning which issues can be addressed using functional style regexp matching .", "label": "", "metadata": {}, "score": "84.36453"}
{"text": "( at dvanhorn ( dot ccs neu edu ) ) .Implementation based on Okasaki , FPCA ' 95 .Documentation , source code , bug tracking at : .To test , benchmark : .( require ( planet dvanhorn / ralist / run - tests ) ) .", "label": "", "metadata": {}, "score": "84.98876"}
{"text": "h w , \u00e2\u20ac\u017e , c , , vu , , , . , 1 wl^ffl ilr ( h ni in r . iii upon craige salisbury rowan county n c ... monday april 9 h .t ut t ' . '", "label": "", "metadata": {}, "score": "85.34723"}
{"text": "long stream .-u , --unbuffered . load minimal amounts of data from the input files and flush the .output buffers more often --help display this help and exit --version .output version information and exit .If no -e , --expression , -f , or --file option is given , then the first .", "label": "", "metadata": {}, "score": "85.775215"}
{"text": "( such as ed ) , sed works by making only one pass over the input(s ) , and . is consequently more efficient .But it is sed \u00e2\u20ac \u2122 s ability to filter text . in a pipeline which particularly distinguishes it from other types of .", "label": "", "metadata": {}, "score": "86.52022"}
{"text": "i for ih ur ami lastly amalgamated inj barrels with iu.eri.al construction lor thut resoleed ithly that the well known - ! , hesofphilip p barbour of vu : .... white iiiliahilaiits : , resolved that the proceedings of this mi- .", "label": "", "metadata": {}, "score": "86.73927"}
{"text": "i for ih ur ami lastly amalgamated inj barrels with iu.eri.al construction lor thut resoleed ithly that the well known - ! , hesofphilip p barbour of vu : .... white iiiliahilaiits : , resolved that the proceedings of this mi- .", "label": "", "metadata": {}, "score": "86.73927"}
{"text": "This is easily done .Our finite state machine has three states , A , B and C. The start state is A. The accepting state is A. The transitions are : .When in state A , inputs 0 , 3 , 6 and 9 go to state A. Inputs 1 , 4 and 7 go to state B. Inputs 2 , 5 and 8 go to state C. .", "label": "", "metadata": {}, "score": "87.20612"}
{"text": "sed .NAME . sed - manual page for sed version 4.1.3 .SYNOPSIS .DESCRIPTION .Sed is a stream editor .A stream editor is used to perform basic text . transformations on an input stream ( a file or input from a pipeline ) .", "label": "", "metadata": {}, "score": "87.22509"}
{"text": "Our online Construction Data Quarterly publication offers essential industry insights , industry trends , and delivers current statistics on job growth and spending in the commercial construction job market .Government Operations and Emergency Center Phase VI .General Requirements Site Work Concrete Masonry / Stone Metals Wood / Plastics Thermal / Moisture Doors / Windows Finishes Specialties Equipment Furnishings Conveying Systems Mechanical Electrical .", "label": "", "metadata": {}, "score": "87.64521"}
{"text": "\u00c2 This year we hope to take\u00c2 home the top spot in both categories , but we need your help !The popular vote is a key component in [ ... ] .STATE / COUNTIES COVERED : .PENNSYLVANIA : .", "label": "", "metadata": {}, "score": "88.86612"}
{"text": "Exce l lent blog you have here but I was cur i ous abou t i f you knew of any commun i t y forums t ha t cover t he same top i cs talked about in th i s art i cle ?", "label": "", "metadata": {}, "score": "89.337494"}
{"text": "i over lh tuber senate consists of 12 members chosen bj tlte people in district delaware hua line counties fnch county elects seven reps annually and three senators trien nuall .\" moi t brilliant snd slri pvidenrns nf talent firmnetsg nnd dev li ...", "label": "", "metadata": {}, "score": "89.81148"}
{"text": "With a base of 30,000 commercial construction companies nationwide , advertising on Lead Manager and the Construction Data Quarterly can get your business the sales you want .We made this process easy and stress free .Please review our Media Kit to learn more about this special opportunity to reach a highly targeted audience .", "label": "", "metadata": {}, "score": "89.94696"}
{"text": "output of \u00e2\u20ac\u02dc\u00e2\u20ac\u02dcsed --version\u00e2\u20ac \u2122 \u00e2\u20ac \u2122 in the body of your report if at all possi- .ble .COPYRIGHT .Copyright \u00c2 \u00a9 2003 Free Software Foundation , Inc.This is free software ; see the source for copying conditions .", "label": "", "metadata": {}, "score": "90.34421"}
{"text": "L / b Water Service , Inc. .Customer since 2002 . \"Construction Data has been delivered to my office twice a week for the past 15 years .As a general contractor , I primarily do work for the state of New York .", "label": "", "metadata": {}, "score": "92.47566"}
{"text": "The post is not about applications at all , but about expressing things .It 's like you are saying , cars have four wheels , your \" car \" only has two .But I happen to like motorbikes , even if driving in the rain is inconvenient .", "label": "", "metadata": {}, "score": "93.08264"}
{"text": "AL .AK .AZ .AR .CA . CO . CT .DE .FL .GA .HI .ID .IL .IN .IA .KS .KY .LA .ME .MD .MA .", "label": "", "metadata": {}, "score": "93.558945"}
{"text": "express our preftrence between canditlatea for ur ninvagea particularly ! lw.aoo piling muebionry . io.ooirl total cost of constructing 135 miles . , r - i po .t bey ond thi - , i tut . jackson man to use bis own senator the lutler sleeleil , .", "label": "", "metadata": {}, "score": "94.707306"}
{"text": "express our preftrence between canditlatea for ur ninvagea particularly ! lw.aoo piling muebionry . io.ooirl total cost of constructing 135 miles . , r - i po .t bey ond thi - , i tut . jackson man to use bis own senator the lutler sleeleil , .", "label": "", "metadata": {}, "score": "94.707306"}
{"text": "We use as much technology as possible and with the addition of the on - line service ; our sales department is able to access information on their laptops and Blackberrys quickly from any location . \"ADVERTISE WITH CONSTRUCTION DATA .", "label": "", "metadata": {}, "score": "94.78232"}
{"text": "At first my perl scripts ( I 'm a heavy user of regexp ) seemed to work fine .But as I started processing more text files ( \" writer \" html files from Libre Office ) and started adding more regexp code to my script , I started noticing weird goings - on .", "label": "", "metadata": {}, "score": "95.33533"}
{"text": "I have tried other publications and they just do n't measure up to Construction Data .Construction Data saves my company time and money ! ! \"Frank Fey , Owner .F C & C Construction .Customer since 1988 . \"", "label": "", "metadata": {}, "score": "95.60475"}
{"text": "\u00e2- in iration in respect i r \u00e2- ii .", "label": "", "metadata": {}, "score": "99.80572"}
{"text": "Greensburg , PA .Customer since 2005 .\" I write this to express my gratitude to your company .L / B Water Service has used your service for many years and we were happy with it .However , as economic times sometimes dictate , we decided to try a less expensive service and we found out the hard way , \" you only get what you pay for \" .", "label": "", "metadata": {}, "score": "102.65526"}
{"text": "MN .MS .MO .MT .NE .NV .NH .NJ .NM .NY .NC .ND .OH . OK .OR .PA .RI .SC .SD .TN .TX .", "label": "", "metadata": {}, "score": "105.97259"}
{"text": "First Reported : Feb 13 , 2016 Last Published : Feb 13 , 2016 .\u00c2 \u00a9 Copyright2016 , Construction Data Company , All Rights Reserved .This material may not be published , broadcast , rewritten or distributed .Edmore Market Place- Building Renovation and Related Site Work .", "label": "", "metadata": {}, "score": "109.09937"}
{"text": "If you have any suggest i ons , p l ease le t me know .Appreciate i t !_ _ ._ _ _ _ ._ _ _ _ .Purely Functional Random - Access Lists .Copyright ( c ) 2009 David Van Horn .", "label": "", "metadata": {}, "score": "112.10194"}
{"text": "Industry Sub Type : Municipal .First Reported : Feb 13 , 2016 Last Published : Feb 13 , 2016 .\u00c2 \u00a9 Copyright2016 , Construction Data Company , All Rights Reserved .This material may not be published , broadcast , rewritten or distributed .", "label": "", "metadata": {}, "score": "114.12929"}
{"text": "VT .VA .WA .WV .WI .WY .DC .Select a market .Select Your State : Alabama Arkansas Colorado Connecticut Delaware Florida Georgia Illinois Indiana Kansas Kentucky Louisiana Maine Maryland Massachusetts Michigan Mississippi Missouri New Hampshire New Jersey New York North Carolina Ohio Pennsylvania Rhode Island South Carolina Tennessee Texas Vermont Virginia Washington DC West Virginia Wisconsin .", "label": "", "metadata": {}, "score": "126.89111"}
