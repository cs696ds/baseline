{"text": "Generative programming aims at modeling and implementing system families in such a way that a given system can be automatically generated from a specification written in a domain - specific language .We will also discuss the relationship between Generative Programming and Model - Driven Architecture .", "label": "", "metadata": {}, "score": "20.833504"}
{"text": "Generative software development aims at modeling and implementing product lines in such a way that a given system can be automatically generated from a specification written in one or more textual or graphical domain - specific languages ( DSLs ) .Available tools for feature modeling and implementing DSLs as well as related approaches such as Software Factories and Model - Driven Architecture will be surveyed and compared .", "label": "", "metadata": {}, "score": "25.46136"}
{"text": "In engineering , one wants to break down a complex system into as many models as needed in order to address all the relevant concerns in such a way that they become understandable enough .These models may be expressed with a general purpose modeling language such as the UML [ 16 ] , or with Domain Specific Languages when it is more appropriate .", "label": "", "metadata": {}, "score": "28.859348"}
{"text": "We propose a unified approach based on feature logic .Using feature logic , version sets are the basic units of reasoning , making attribution models and version repositories special cases of ... \" .Software Configuration Management suffers from a multitude of models for version identification and control .", "label": "", "metadata": {}, "score": "31.309662"}
{"text": "The deployment of such products can be error prone and highly complex if the dependencies between components and the possible features a component can supply are not managed explicitly .This paper presents a method that uses the knowledge available about components to ensure correct , complete , and consistent deployment of configurations of interrelated components .", "label": "", "metadata": {}, "score": "31.467855"}
{"text": "The number of variables to be generated may become an issue in terms of computational or space complexity and hinder some automated analysis operations of feature models .In the context of feature - based configuration , several other works proposed techniques to separate the configuration process into different steps or stages [ 92 , 105 ] .", "label": "", "metadata": {}, "score": "31.511547"}
{"text": "that synthesize other programs ) , Component Engineering ( raising the level . of modularization and analysis in application design ) , and Domain - Specific .Languages ( elevating program specifications to compact domain - specific . notations that are easier to write and maintain ) are key technologies for . automating program development .", "label": "", "metadata": {}, "score": "31.977962"}
{"text": "Several authors have also focused on proposing mechanisms to implement and manage variability especially at design or code level .This approach opens the possibility of leveraging the good modeling capabilities of object - oriented languages to deal with fully dynamic software configuration , while being able to produce space and time efficient executable when the program contains enough static configuration information .", "label": "", "metadata": {}, "score": "32.539867"}
{"text": "We present descriptions and sketches of algorithms that are the main part of a framework for performing the selection and ranking of components .To conclude our work we compare it with an existing Configuration Management system designed for similar tasks .", "label": "", "metadata": {}, "score": "32.79154"}
{"text": "The approach is adaptive and provides automated test generation for a new product as well as guided test generation support to validate the evolution of a given product .More recently the SPL testing field has attracted the attention of many more researchers , which results in a large number of publications regarding general and specific issues .", "label": "", "metadata": {}, "score": "33.53402"}
{"text": "This paper describes an approach to the design of configuration management tools for dynamically composed systems .The design process involves an analysis of the domain of dynamically composed systems to identify the various problems that are typically addressed by configura ... . ... cies between objects .", "label": "", "metadata": {}, "score": "33.66124"}
{"text": "Based on the decision values set by a user , the assets required for composing the product are automatically determined and product configurations can be generated .In [ 114 ] Rabiser et al . extend the DOPLER metamodel to provide additional means to support , control and manage derivation : guidance , tasks , roles , users , and property .", "label": "", "metadata": {}, "score": "33.722595"}
{"text": "From the amount of studies analyzed in [ 120 ] , only a few addressed testing nonfunctional requirements .They point out that during architecture design , static analysis can be used to give an early indication of problems with non - functional requirements .", "label": "", "metadata": {}, "score": "34.048775"}
{"text": "During application engineering , \" the product is defined by selecting a group of features , for which a carefully coordinated and complicated mixture of parts of different components are involved \" [ 37 ] .Based on this notion of feature , Kang et al .", "label": "", "metadata": {}, "score": "34.089622"}
{"text": "Based on it , the model template is instantiated automatically .To improve the effectiveness of template instantiation , the process can be specialized by introducing additional steps : patch application and simplification .In [ 47 ] , Czarnecki et al . also propose a staged configuration approach where feature models are stepwise specialized and instantiated according to the stakeholder interests at each development stage .", "label": "", "metadata": {}, "score": "34.134274"}
{"text": "Important Dates .Scope .Generative and component approaches have the potential to revolutionize . software development in a similar way as automation and components .revolutionized manufacturing .Generative Programming ( developing . programs that synthesize other programs ) , Component Engineering ( raising .", "label": "", "metadata": {}, "score": "34.544983"}
{"text": "both communities at the same time .The conference solicits submissions . related ( but not limited ) to : . multi - stage and multi - level languages , . substitution , in - lining and macros , templates , program transformation .", "label": "", "metadata": {}, "score": "34.82039"}
{"text": "We show how under certain assumptions , the release and delivery of software updates can be automated in the context of componentbased systems .These updates allow features or fixes to be delivered to users more quickly .Furthermore , user feedback is more accurate , thus enabling quicker response to defects encountered in the field .", "label": "", "metadata": {}, "score": "34.822243"}
{"text": "In this approach , product derivation can be seen as an application of ideas circulating in the \" Partial Evaluation \" community for years .Actually , it can be seen as taking benefit of the fact that the type of configurable parts have bounded static variations ( i.e. , the sets of possible types are known at compile time ) .", "label": "", "metadata": {}, "score": "34.890526"}
{"text": "Our approach allows for interactive configuration management , where a configuration thread is constructed by adding or modifying configuration constraints until either a complete configuration or an inconsistency can be deduced .A set of versions of a software component can be represented and processed as a single source file enriched with preprocessor statements .", "label": "", "metadata": {}, "score": "35.05225"}
{"text": "Our approach allows for interactive configuration management , where a configuration thread is constructed by adding or modifying configuration constraints until either a complete configuration or an inconsistency can be deduced .A set of versions of a software component can be represented and processed as a single source file enriched with preprocessor statements .", "label": "", "metadata": {}, "score": "35.05225"}
{"text": "We outline the main steps of such a development .Furthermore , we argue that a program family provides a basis to assess a DSL .The ideas discussed in this presentation are directly based on our experiences in developing DSLs for various domains and studying existing ones .", "label": "", "metadata": {}, "score": "35.054424"}
{"text": "Although this capability has existed in languages and operating systems for some time , it has more recently become popular with the spread of languages such as Java and those supporting mobile code .However , the increasing pervasiveness of dynamically composed systems has not yet resulted in the development of appropriate tools to manage their configurations .", "label": "", "metadata": {}, "score": "35.1052"}
{"text": "Product - specific test objectives , test scenarios , and test cases are successively generated through an automated process .The key idea of the approach is to describe functional variation points at requirement level to automatically generate the behaviors specific to any chosen product .", "label": "", "metadata": {}, "score": "35.72148"}
{"text": "K. Czarnecki , T. Bednasch , P. Unger , and U. Eisenecker , Generative Programming for Embedded Software : An Industrial Experience Report , Lecture Notes in Computer Science , 2002 .J. Bzivin , N. Farcet , J. M. J\u00e9z\u00e9quel , B. Langlois , and D. Pollet , \" Reective model driven engineering , \" in Proceedings of UML 2003 , G. Booch , P. Stevens , and J. Whittle , Eds . , vol .", "label": "", "metadata": {}, "score": "35.99604"}
{"text": "We show how under certain assumptions , the release and delivery of software updates can be automated in the context of componentbased systems .These updates allow features or fixes to be delivered to users more quickly .Furthermore , user feedback is more accurate , thus enabling quicker res ... \" .", "label": "", "metadata": {}, "score": "36.060776"}
{"text": "Intentional Programming , and Multi - Dimensional Separation of Concerns .Reports on applications of these techniques to real - world problems are . especially encouraged , as are submissions that relate ideas and concepts .from several of these topics , or bridge the gap between theory and practice .", "label": "", "metadata": {}, "score": "36.16942"}
{"text": "Instead of describing a single software system , a SPL model describes a set of products in the same domain .This is accomplished by distinguishing between elements common to all SPL members , and those that may vary from one product to another .", "label": "", "metadata": {}, "score": "36.17954"}
{"text": "( 2 ) Application Engineering , or development with reuse , addresses the development of the final products using core assets and following customer requirements .Figure 1 graphically represents the general SPL engineering process , as it can be found in the research literature [ 6 ] .", "label": "", "metadata": {}, "score": "36.184937"}
{"text": "Feature modeling has several applications in generative software development , including domain analysis , product - line scoping , and feature - based product specification .This paper rep ... \" .Software factories have been proposed as a comprehensive and integrative approach to generative software development .", "label": "", "metadata": {}, "score": "36.598812"}
{"text": "These concepts are gathered and formalized by Dhungana et al . in a specific metamodel ( see Figure 6 ) .It is generic and can be adapted to different domains by defining concrete asset types , asset type attributes , and relationships between assets .", "label": "", "metadata": {}, "score": "36.681255"}
{"text": "One of these is the use and reuse of components .Using components in a development process will also bring some problems .When a software company has a large repository of components to choose from there is the problem of choosing suitable components to use .", "label": "", "metadata": {}, "score": "36.802544"}
{"text": "Software configuration management ( SCM ) is the discipline for controlling the evolution of software systems .The central problems of SCM are closely related to central artificial intelligence ( AI ) topics , such as knowledge representation ( how do we represent the features of versions and components , and how does this knowledge involve in time ? ) , configuration ( how do we compose a consistent configuration from components , and how do we express constraints ? ) , and planning ( how do we construct a software product from a source configuration , and what are the features of this product ? )", "label": "", "metadata": {}, "score": "37.159634"}
{"text": "Many techniques have been proposed to realize compositional approaches ( frameworks , mixin layers , aspects [ 97 ] , stepwise refinement [ 98 ] , etc . ) .In model - based SPL engineering , the idea is that multiple models or fragments , each corresponding to a feature , are composed to obtain an integrated model from a feature model configuration .", "label": "", "metadata": {}, "score": "37.343105"}
{"text": "Several definitions of the software product line concept can be found in the research literature .Northrop defines it as \" a set of software - intensive systems sharing a common , managed set of features that satisfy the specific needs of a particular market segment or mission and are developed from a common set of core assets in a prescribed way \" [ 6 ] .", "label": "", "metadata": {}, "score": "37.840458"}
{"text": "The big disadvantage is , that this intentional software system is a complex beast , with complex editors and generators .Waiting for Intentional Programming I follow Intentional Programming since the year 2000 , when I first saw it described in the \" Tangram book \" on Generative Programming by Czarnecki and Eisenecker .", "label": "", "metadata": {}, "score": "37.968643"}
{"text": "We give an automatic and efficient procedure for computing a feature model from a formula .As a side effect we characterize a class of logical formulas equivalent to feature models and identify logical structures corresponding to their syntactic elements .While many different feature models can be extracted from a single formula , the computed model strives to expose graphically the maximum of the original logical structure while minimizing redundancies in the representation .", "label": "", "metadata": {}, "score": "38.032536"}
{"text": "[ 102 ] coined the term multiple feature models to characterize a set of feature models , possibly interrelated , that are combined together to model the variability of a system .More specifically , Acher et al .[ 103 ] have identified some important issues when dealing with multiple feature models , for example , for representing SPL based on Service - Oriented Architectures .", "label": "", "metadata": {}, "score": "38.22341"}
{"text": "Testing is an important mechanism both to identify defects and assure that completed products work as specified .This is a common practice in single - system development , and continues to hold in Software Product Lines .However , in the early days of SPL research , very few SPL processes addressed the testing of end - product by taking advantage of the specific features of a product line ( commonality and variabilities ) .", "label": "", "metadata": {}, "score": "38.34493"}
{"text": "This tutorial introduces DSM by emphasizing the differences to modelling languages originating from the semantics of programming languages .This is followed by examples from various fields of software product development .The main part of the tutorial addresses the guidelines for implementing DSM for various application domains : how to identify the necessary language constructs ; what options are available for code generation ; and what are the industry experiences .", "label": "", "metadata": {}, "score": "38.411766"}
{"text": "Kermeta has indeed been designed to easily extend metamodels with many different concerns ( such as static semantics , dynamic semantics , model transformations , connection to concrete syntax , etc . ) expressed in heterogeneous languages , using an aspect - oriented paradigm .", "label": "", "metadata": {}, "score": "38.44355"}
{"text": "Application Engineering , also known as product derivation , consists of building the actual systems from the core assets .Central to both processes is the management of variability across the product line [ 3 ] .In common language use , the term variability refers to the ability or the tendency to change .", "label": "", "metadata": {}, "score": "38.65844"}
{"text": "Decision modeling in SPL was initially introduced as a part of the Synthesis Project by Campbell et al .[ 73 ] .Decisions were defined as \" actions which can be taken by application engineers to resolve the variations for a work product of a system \" .", "label": "", "metadata": {}, "score": "38.68621"}
{"text": "We show how feature logic , a description logic with boolean operations , can be used to represent both knowledge about versions and components , as well as to infer the consistency of possible configurations and thus solve configuration problems in SCM .", "label": "", "metadata": {}, "score": "38.986347"}
{"text": "For example , the specific requirements of an application are obtained by configuring the feature model , that is , by gradually removing the variability until only those features that are part of the final product remain .At each step of the process , it should be possible to reiterate the reasoning tasks mentioned above ( consistency checking of FMs , update of FMs , etc ) .", "label": "", "metadata": {}, "score": "39.319183"}
{"text": "Concept analysis will reconstruct a taxonomy of concepts from a relation between objects and attributes .We use concept analysis to infer configuration structures from existing source code .Our tool NORA / RECS will accept source code , where configuration - specific code pieces are controlled by the preprocessor .", "label": "", "metadata": {}, "score": "39.442307"}
{"text": "So it is clear that we need two different metamodels ( i.e. , two different sets of concepts ) to handle both aspects of SPLs , but we also need to somehow connect these two sets of concepts to manipulate models of SPLs .", "label": "", "metadata": {}, "score": "39.72403"}
{"text": "Intentional Software Creation : Editors and Generators An intentional software system is supposed to work differently : .It should be fed with requirements from the domain experts and then should allow to generate a software system from that data , which will finally solve the problem ( see image above ) .", "label": "", "metadata": {}, "score": "39.74175"}
{"text": "Since the introduction of feature models , the literature has contributed with a number of algorithms to support the analysis process .Mannion [ 83 ] was the first to identify the use of propositional logic techniques to reason about properties of a feature model .", "label": "", "metadata": {}, "score": "39.81349"}
{"text": "They describe the variation points in a PL and define the set of choices available at a certain point in time when deriving a product .A representative approach in this category is DOPLER ( Decision - Oriented Product Line Engineering for effective Reuse ) from Dhungana et al .", "label": "", "metadata": {}, "score": "39.990337"}
{"text": "This paper reports on our recent progress in cardinalitybased feature modeling and its support for expressing additional constraints .We show that the Object - Constraint Language ( OCL ) can adequately capture such constraints .Furthermore , we identify a set of facilities based on constraint satisfaction that can be provided by feature modeling and feature - based configuration tools and present a prototype implementing some of these facilities .", "label": "", "metadata": {}, "score": "40.157307"}
{"text": "In the previous approaches , authors extended the UML metamodel for modeling variability in multiple UML diagrams like Class or Sequence diagrams .Morin et al .[ 61 , 62 ] propose a more generic solution that can be applied to any kind of metamodel and that is fully supported by a tool .", "label": "", "metadata": {}, "score": "40.218765"}
{"text": "He was General Chair of the 2003 International Conference on Generative Programming and Component Engineering ( GPCE ) and keynote speaker at UML 2004 .His current work focuses on realizing the synergies between generative and model - driven software development .", "label": "", "metadata": {}, "score": "40.325592"}
{"text": "They identified four main test strategies that have been applied to software product lines .( i ) Incremental testing of product lines : the first product is tested individually and the following products are tested using regression testing techniques .Regression testing focuses on ensuring that everything used to work still works , that is , the product features previously tested are retested through a regression technique .", "label": "", "metadata": {}, "score": "40.604538"}
{"text": "Products within a product family are composed of different component configurations where components have different variable features and a large amount of dependency relationships with each other .The deployment of such products can be error prone and highly complex if the dependencies between ... \" .", "label": "", "metadata": {}, "score": "40.91155"}
{"text": "Hence there was a need for testing methods , adapted to the product line context , that allow reducing the testing cost [ 117 ] .For example , the early approach presented in [ 14 , 118 ] is based on the automation of the generation of application system tests , for any chosen product , from the system requirements of a Product Line [ 119 ] .", "label": "", "metadata": {}, "score": "41.03589"}
{"text": "The initial proposal of Kang et al . was part of the Feature Oriented Domain Analysis ( FODA ) methodology [ 33 ] .Its main purpose was to capture commonalities and variabilities at requirements level .Feature Diagrams proved themselves very useful as a concise way to describe allowed variabilities between products of the same family , to represent feature dependencies , to guide feature selection as to allow the construction of specific products [ 38 ] .", "label": "", "metadata": {}, "score": "41.042778"}
{"text": "With this design framework , the actual configuration management can be programmed within the target language ; it boils down to only create the class instances relevant to a given configuration [ 42 ] .However some care has to be taken for programming the creation of these objects to ensure that the design is flexible enough .", "label": "", "metadata": {}, "score": "41.21266"}
{"text": "The case study consisted of recording both the release management activities for CS - ECIS and its related development and deployment activities , and subsequently comparing these activities with our initial release management model .The description and comparison enabled us to both evaluate and improve this initial model .", "label": "", "metadata": {}, "score": "41.27157"}
{"text": "Hubaux et al . propose a formalization of this kind of multistage configuration [ 105 ] .They notably propose the formalism of feature configuration workflow in order to configure a large feature model in different steps , possibly carried out by different stakeholders .", "label": "", "metadata": {}, "score": "41.35988"}
{"text": "Using an explicit and formal mapping creates opportunities for consistency checking and automation .This way both the configuration and the composition of product instances can be more robust , support more product variants and be performed more often . ... level of formality varies .", "label": "", "metadata": {}, "score": "41.377228"}
{"text": "We apply feature logic to the problem of incremental configuration management .Feature logic has originally been developed in computer linguistics as a knowledge representation and inference mechanism .It offers a uniform formalism for the description of variants and revisions , where sets of version ... \" .", "label": "", "metadata": {}, "score": "41.481693"}
{"text": "More generally along these lines , Svahnberg et al .[29 ] present a taxonomy of different ways to implement variation points , which they refer to as \" variability realization techniques \" .Bridging the Gap between Requirement and Code : Feature Modeling Extensions .", "label": "", "metadata": {}, "score": "41.498035"}
{"text": "This paper describes an approach to automated ent ... \" .Abstract - The decentralized process of configuring enterprise applications is complex and error - prone , involving multiple participants / roles and numerous configuration changes across multiple files , application server settings , and database decisions .", "label": "", "metadata": {}, "score": "41.55374"}
{"text": "Includes fundamental computer science concepts in information representation , computer organization , process application , and social and ethical issues in computing .The one - hour lab introduces the use of software to solve a variety of problems .The prospective student should have a general understanding of computers and their operation .", "label": "", "metadata": {}, "score": "41.60788"}
{"text": "It should be no problem to model the requirements with different notations , covering each part with the description which fits best .Here the software engineer is responsible to provide the generators , which will churn out the solution software system .", "label": "", "metadata": {}, "score": "41.627144"}
{"text": "For example a UML design for a real system will typically contain many packages , components , and classes organized in hierarchies , possibly deep ones .For scalability purposes , CVL must therefore itself accommodate such structures so that product line designs , that is , base models plus CVL variability defined against them , may continue to exhibit the same structures supported by the base models .", "label": "", "metadata": {}, "score": "41.64411"}
{"text": "This limited view on modeling has been useful in the past ( assembly languages abstracting away from machine code , 3GL abstracting over assembly languages , etc . ) and it is still useful today to get , for example , a holistic view on a large C++ program .", "label": "", "metadata": {}, "score": "41.64953"}
{"text": "View at Google Scholar .I. Jacobson , Object - Oriented Software Engineering : A Use Case Driven Approach , Addison Wesley Longman , Redwood City , Calif , USA , 2004 .K. Czarnecki and U. W. Eisenecker , Generative Programming : Methods , Tools , and Applications , ACM Press , Addison - Wesley , New York , NY , USA , 2000 .", "label": "", "metadata": {}, "score": "41.678352"}
{"text": "J. Bayer , O. Flege , and C. Gacek , \" Creating product line architectures , \" in IW - SAPF , pp .210 - 216 , 2000 .View at Google Scholar .G. Campbell , N. Burkhard , J. Facemire , and J. O'Connor , \" Synthesis guidebook , \" Tech .", "label": "", "metadata": {}, "score": "41.684135"}
{"text": "The product derivation process can be defined as a process of constructing products from Software Product lines , based on the modeling of variability and the choices made by the product configurator [ 107 ] .Feature Diagrams are mostly used for product configuration during product derivation .", "label": "", "metadata": {}, "score": "41.91383"}
{"text": "In addition , languages designed to support this paradigm ( such as MetaOCaml ) help the programmer avoid many of the difficulties that are traditionally encountered in developing program generators .This tutorial will introduce you to the basics of this paradigm as well as of programming in MetaOCaml .", "label": "", "metadata": {}, "score": "41.942307"}
{"text": "It is thus clear that more than a simple Feature Model is required for performing product derivation .These limitations generated the need for other more expressive mechanisms for representing variability and linking it to the base assets .An Overview on Representative Variability Modeling Methods .", "label": "", "metadata": {}, "score": "42.078247"}
{"text": "I am still not sure , if this is the intentional tree that was mentioned in the video of the talk .2 comments : .Actually companies like MetaCase have been working in this area for years .They , and more recently Microsoft , have created tooling to allow developers to create such domain - specific languages and the code generators that go with them .", "label": "", "metadata": {}, "score": "42.11093"}
{"text": "Software is nowadays a critical asset for many organizations : many aspects of our daily lives indeed depend on complex software - intensive systems , from banking and communications to transportation and medicine .Constant market evolution triggered an exponential growth in the complexity and variability of modern software solutions .", "label": "", "metadata": {}, "score": "42.66181"}
{"text": "SPL engineering is a process focusing on capturing the commonalities ( assumptions true for each family member ) and variability ( assumptions about how individual family members differ ) between several software products .Models have been used for long as descriptive artifacts , and proved themselves very helpful for formalizing , sharing , and communicating ideas .", "label": "", "metadata": {}, "score": "42.76503"}
{"text": "An increasing number of domain - specific languages ( DSLs ) are being developed and successfully used in a variety of areas including networking , telecommunications , and financial products .Yet , the development of a DSL is still an obscure process and its assessment is often partial .", "label": "", "metadata": {}, "score": "42.898693"}
{"text": "Laguna and Gonz\u00e1lez - Baixauli [ 67 ] separate SPL variability aspects using goal models and UML diagrams , while keeping features at the core of the representation .They combine previous approaches with the UML package merge implementation to provide a set of mapping rules from features to class diagram fragments .", "label": "", "metadata": {}, "score": "42.981953"}
{"text": "Software Product Lines ( SPL ) [ 1 ] , or software product families [ 2 , 3 ] , are emerging as a paradigm shift towards modeling and developing software system families rather than individual systems .SPL engineering embraces the ideas of mass customization and software reuse .", "label": "", "metadata": {}, "score": "43.114464"}
{"text": "107 - 110 , 2009 .M. Mendonca and D. Cowan , \" Decision - making coordination and efficient reasoning techniques for feature - based configuration , \" Science of Computer Programming , vol .75 , no .5 , pp . 311 - 332 , 2010 .", "label": "", "metadata": {}, "score": "43.13669"}
{"text": "The maintenance of enterprise application software at a customer site is a potentially complex task for software vendors .This complexity can unfortunately result in a significant amount of work and risk .This paper presents a case study of a product software vendor that tries to reduce this complex ... \" .", "label": "", "metadata": {}, "score": "43.187386"}
{"text": "View at Google Scholar . D. L. Parnas , \" On the design and development of program families , \" IEEE Transactions on Software Engineering , vol .2 , no . 1 , pp . 1 - 9 , 1976 .", "label": "", "metadata": {}, "score": "43.359512"}
{"text": "[36 ] have formalized some operations and their complexity .Benavides et al .[89 ] presented a structured literature review of the existing proposals for the automated analysis of feature models .Example analyses include consistency check or dead feature detections [ 90 ] , interactive guidance during configuration [ 91 , 92 ] , or fixing models and configurations [ 93 - 95 ] .", "label": "", "metadata": {}, "score": "43.384823"}
{"text": "I. Jacobson , M. Griss , and P. Jonsson , Software Reuse : Architecture , Process and Organization for Business sucCess , ACM Press / Addison - Wesley , New York , NY , USA , 1997 .J. M. J\u00e9z\u00e9quel , \" Reifying configuration management for object - oriented software , \" in International Conference on Software Engineering , ICSE'20 , Kyoto , Japan , April 1998 .", "label": "", "metadata": {}, "score": "43.38717"}
{"text": "This complexity can unfortunately result in a significant amount of work and risk .This paper presents a case study of a product software vendor that tries to reduce this complexity by integrating product data management ( PDM ) , software configuration management ( SCM ) , and customer relationship management ( CRM ) into one system .", "label": "", "metadata": {}, "score": "43.610184"}
{"text": "The method and model are discussed and presented to provide an alternative to current component deployment techniques . ... ribe our feature model is the fact that there are many tools available to perform calculations and operations on the feature descriptions .", "label": "", "metadata": {}, "score": "43.61847"}
{"text": "Perrouin et al .[ 64 ] address specific and unforeseen customer requirements in product derivation by combining automated model composition with flexible product derivation approaches [ 65 ] .Their generic feature metamodel leverages Schobbens et al . 's pivot abstract syntax [ 36 ] that subsumes many of the existent FD dialects .", "label": "", "metadata": {}, "score": "43.87142"}
{"text": "All of these topics support the development of both web pages and web sites .Prerequisite : CS 1309 .2321 COMPUTER SCIENCE I ( 4 credits ) Introduction to the basic principles of software development using a modern high - level language , including using selection , looping , function calls , and recursion , along with simple data structures such as arrays and objects , to solve problems .", "label": "", "metadata": {}, "score": "44.073856"}
{"text": "For Morin et al .[ 62 ] , product derivation starts by computing a feature diagram from the product line model .Then , for a selected group of features , the derive operation ( implemented in a generic way in the base metamodel ) is called .", "label": "", "metadata": {}, "score": "44.11355"}
{"text": "S. Ferber , J. Haag , and J. Savolainen , \" Feature interaction and dependencies : modeling features for reengineering a legacy product line , \" in Software Product Lines ( SPLC ) , Lecture Notes in Computer Science , pp .", "label": "", "metadata": {}, "score": "44.156303"}
{"text": "It is hard to develop a D&C engine for a PLA that can both capture the numerous nuanced requirements of a PLA 's variant construction rules and the unique characteristics of a large number of mobile devices .It is even harder to fin a valid variant to deploy to the target device fast enough to support automatic deployment in an ad - hoc environment .", "label": "", "metadata": {}, "score": "44.24122"}
{"text": "Domain - Specific Languages ( elevating program specifications to compact .domain - specific notations that are easier to write and maintain ) are key . technologies for automating program development .GPCE arose as a joint conference , merging the prior conference on .", "label": "", "metadata": {}, "score": "44.24447"}
{"text": "These constraints are defined using OCL pre and post conditions on an abstract eval operation , woven into each relevant class of the CVL metamodel .On the implementation side , Kermeta can readily be used to get an interpretor for deriving products from a product line , as implemented in [ 115 ] .", "label": "", "metadata": {}, "score": "44.27851"}
{"text": "[ 24 ] dedicate several chapters of their book to explain how product line variability can be exploited to develop different applications .In [ 71 ] Sinnema et al . discuss in detail the entire COVAMOF Derivation Process .The goal of DOPLER [", "label": "", "metadata": {}, "score": "44.29029"}
{"text": "[29 ] , many researchers proposed to extend Feature Models to encompass a wider spectrum of assets .A first extension of FODA is the Feature Oriented Reuse Method ( FORM ) [ 43 ] developed by Kang et al . in 1998 .", "label": "", "metadata": {}, "score": "44.532196"}
{"text": "These core assets extend beyond simple code reuse and may include the architecture , software components , domain models , requirements statements , documentation , test plans , or test cases .The SPL engineering process consists of two major steps .", "label": "", "metadata": {}, "score": "44.921745"}
{"text": "A D&C planning engine captures the unique OS , middleware , and hardware signature of the device and rapidly finds a valid variant of the PLA that ca ... \" .Product - line architectures ( PLAs ) designed for mobile devices create a unique challenge for deployment and configuration ( D&C ) planning engines .", "label": "", "metadata": {}, "score": "45.338516"}
{"text": "Apel et al .[ 68 ] propose to revisit superimposition technique and analyze its feasibility as a model composition technique .Perrouin et al . propose a flexible , tool - supported derivation process in which a product model is generated by merging UML class diagram fragments [ 64 ] .", "label": "", "metadata": {}, "score": "45.484093"}
{"text": "Expected benefits : more concise , more robust , easier program development .Charles Consel is a professor of Computer Science at ENSEIRB / University of Bordeaux I. He leads the Compose group at INRIA / LaBRI .He has been designing and implementing domain - specific languages ( DSLs ) for a variety of areas including device drivers , programmable routers , and stream processing .", "label": "", "metadata": {}, "score": "45.580917"}
{"text": "With DSM , the models are made up of elements representing concepts that are part of the domain world , not the code world ( like e.g. in UML ) .These languages follow domain abstractions and semantics , allowing developers to perceive themselves as working directly with domain concepts .", "label": "", "metadata": {}, "score": "45.662064"}
{"text": "In the feature diagram metamodel , the Feature meta - class is connected using a composite association to a class called Model that defines the core assets involved in feature realization .This relation specifies that a feature may be implemented by several model fragments .", "label": "", "metadata": {}, "score": "45.845272"}
{"text": "The module system breaks with the antimodular tradition of a global variability model in product - line development and provides a path toward software ecosystems and product lines of product lines developed in an open fashion .We discuss the design and implementation of such a module system on a core calculus and provide an implementation for C , which we use to type check the open source product line Busybox with 811 compile - time options . ...", "label": "", "metadata": {}, "score": "45.960297"}
{"text": "K. Pohl , G. B\u00f6ckle , and F. J. van der Linden , Software Product Line Engineering : Foundations , Principles and Techniques , Springer , New York , NY , USA , 2005 .J. Estublier , \" Software configuration management : a roadmap , \" in Proceedings of the Conference on the Future of Software Engineering ( ICSE ) , pp .", "label": "", "metadata": {}, "score": "45.980743"}
{"text": "In addition , cross - tree constraints between features are specified in such a way that each child feature F is related to the corresponding features F in each appropriate SSFM .This approach has the advantage to be realizable by current feature modeling tools and techniques .", "label": "", "metadata": {}, "score": "46.027847"}
{"text": "51 , no . 2 , pp .456 - 479 , 2007 .View at Google Scholar .M. L. Griss , \" Implementing product - line features with component reuse , \" in Proceedings of the 6th International Conerence on Software Reuse ( ICSR-6 ) , pp .", "label": "", "metadata": {}, "score": "46.042023"}
{"text": "Specific testing activities are often split among the two types of activities : domain engineering and application engineering .Alternatively , the testing activities can be grouped into core asset and product development .From the set of studies they overview , around four adopt ( or advocate the use of ) the V - model as an approach to represent testing throughout the software development life cycle .", "label": "", "metadata": {}, "score": "46.078014"}
{"text": "This leads to natural pairings of quality attributes and their associated tests .When a variation point represents a variation in a quality attribute , the static analysis should be sufficiently complete to investigate different outcomes .da Mota Silveira Neto et al .. highlight that investigations towards making explicit which techniques currently applied for single - system development can be adopted in SPL are needed , since studies do not address such an issue .", "label": "", "metadata": {}, "score": "46.19084"}
{"text": "M. O. Reiser , R. T. Kolagari , and M. Weber , \" Unified feature modeling as a basis for managing complex system families , \" in Proceedings of the 1stInternational Workshop on Variability Modelling of Software - Intensive Systems ( VaMoS'07 ) , pp .", "label": "", "metadata": {}, "score": "46.255028"}
{"text": "However , this way variability dictates a dominant decomposition .Instead , we introduce a variability - aware module system that supports compile - time variability inside a module and its interface .This way , each module can be considered a product line that can be type checked in isolation .", "label": "", "metadata": {}, "score": "46.37449"}
{"text": "Finally , we broaden the scope of this tutorial by presenting a domain , namely communication services , where DSLs can be used as a paradigm for software development .Level : Between introductory and intermediate Required experience : Programming experience and basic notations in programming languages .", "label": "", "metadata": {}, "score": "46.385654"}
{"text": "Topics of Interest .The conference solicits submissions related ( but not limited ) to : .o Reuse , meta - programming , partial evaluation , multi - stage and .multi - level languages , step - wise refinement .", "label": "", "metadata": {}, "score": "46.390793"}
{"text": "In particular , a feature model might represent no valid configuration , typically due to the presence of incompatible cross - tree constraints , or a feature model might have dead features , that is , features not present in any valid configuration .", "label": "", "metadata": {}, "score": "46.425945"}
{"text": "129 - 139 , 2003 .View at Google Scholar . D. Batory , R. E. Lopez - Herrejon , and J. P. Martin , \" Generating product - lines of product - families , \" in Proceedings of the Automated Software Engineering ( ASE'02 ) , pp .", "label": "", "metadata": {}, "score": "46.571804"}
{"text": "M. Erwig and E. Walkingshaw , \" The choice calculus : a representation for software variation , \" ACM Transactions on Software Engineering and Methodology , vol .21 , no . 1 , 2011 .View at Google Scholar . D. M. Weiss and C. T. R. Lai , Software Product - Line Engineering : A Family - Based Software Development Process , Addison - Wesley , Longman , Boston , Mass , USA , 1999 .", "label": "", "metadata": {}, "score": "46.780502"}
{"text": "As for the previous approach , the variation point concept is used .It is are modeled using UML inheritance and stereotypes : a variation point is defined by an abstract class and a set of subclasses which represent its variants .", "label": "", "metadata": {}, "score": "46.79754"}
{"text": "The use of such an MDE environment thus makes it quite straightforward to build a wide range of tools able to process Variability Models in several different ways that are described in the following sections .Automated Analysis of Feature Models .", "label": "", "metadata": {}, "score": "46.815796"}
{"text": "From the methods that extend UML , those of Ziadi and J\u00e9z\u00e9quel [ 12 ] , Gomaa and Shin [ 59 ] , and de Oliveira Jr. et al .[ 60 ] provide formalizations of their approaches in the form of metamodel extensions .", "label": "", "metadata": {}, "score": "46.849594"}
{"text": "Assets for one application are developed .Then , the application derived from the product line use the assets developed for the first application .This form of reuse is not performed systematically , which means that there is no method that supports the activity of selecting the test assets .", "label": "", "metadata": {}, "score": "46.893753"}
{"text": "T. Ziadi , L. H\u00e9lou\u00ebt , and J. M. J\u00e9z\u00e9quel , \" Revisiting statechart synthesis with an algebraic approach , \" in Proceedings of the 26th International Conference on Software Engineering ( ICSE'04 ) , pp .242 - 251 , ACM , Edinburgh , UK , May 2004 .", "label": "", "metadata": {}, "score": "46.9247"}
{"text": "3014 of Lecture Notes in Computer Science , Springer , 2003 .C. Nebut , F. Fleurey , Y. le Traon , and J. M. J\u00e9z\u00e9quel , \" Requirements by contracts allow automated system testing , \" in Proceedings of the 14th International Symposium on Software Reliability Engineering ( ISSRE'03 ) , pp .", "label": "", "metadata": {}, "score": "47.02836"}
{"text": "422 - 437 , Springer , 2005 .View at Google Scholar .M. A. Laguna and B. Gonz\u00e1lez - Baixauli , \" Product line requirements : multiparadigm variability models , \" in Proceedings of the 11th Workshop on Requirements Engineering WER , 2008 .", "label": "", "metadata": {}, "score": "47.24086"}
{"text": "Using MDE technology , SPLs can be planned , specified , processed , and maintained on a higher abstraction level .In recent years , several variability modeling techniques have been developed , aiming to explicitly and effectively represent SPL variability , and to leverage these models for a variety of engineering purposes .", "label": "", "metadata": {}, "score": "47.403584"}
{"text": "Domain Engineering consists of collecting , organizing , and storing past experiences in building systems in the form of reusable assets and providing an adequate means for reusing them for building new systems [ 9 ] .It starts with a domain analysis phase to identify commonalities and variability among SPL members .", "label": "", "metadata": {}, "score": "47.416267"}
{"text": "Using feature logic , version sets are the basic units of reasoning , making attribution models and version repositories special cases of a more general scheme .Version sets are identified by their features , that is , a boolean expression over ( name : value ) attributions .", "label": "", "metadata": {}, "score": "47.445026"}
{"text": "M. Mendonca , A. Wasowski , and K. Czarnecki , \" SAT - based analysis of feature models is easy , \" in Proceedings of the 13th International Software Product Line Conference ( SPLC'09 ) , pp .231 - 241 , IEEE , 2009 .", "label": "", "metadata": {}, "score": "47.452583"}
{"text": "Level : The tutorial level is introductory ( requires almost no experience with any specific programming language . )Required experience : Familiarity with a functional language , or generic typing , would be useful , but is not necessary .Expected audience : Software engineers , graduate and undergraduate students , researchers .", "label": "", "metadata": {}, "score": "47.598648"}
{"text": "191 - 200 , IEEE , 2009 . A. Hubaux , A. Classen , and P. Heymans , \" Formal modelling of feature configuration workows , \" in Proceedings of the 13th International Software Product Line Conference ( SPLC'09 ) , pp .", "label": "", "metadata": {}, "score": "47.709053"}
{"text": "Deursen and Klint in [ 49 ] defines an abstract syntax and semantics for Feature Diagrams .Batory [ 50 ] introduces propositional constraints defined between features .Ferber et al .[51 ] defines a separate view to represent feature dependencies and interactions .", "label": "", "metadata": {}, "score": "47.86485"}
{"text": "Feature modeling is a notation and an approach for modeling commonality and variability in product families .In their basic form , feature models contain mandatory / optional features , feature groups , and implies and excludes relationships .It is known that such feature models can be translated into pr ... \" .", "label": "", "metadata": {}, "score": "47.865273"}
{"text": "( iv ) Division of responsibilities : this strategy relates to select testing levels to be applied in both domain and application engineering , depending upon the objective of each phase , that is , whether thinking about developing for or with reuse .", "label": "", "metadata": {}, "score": "47.879868"}
{"text": "T. Asikainen , T. M\u00e4nnist\u00f6 , and T. Soininen , \" A unified conceptual foundation for feature modelling , \" in Proceedings of the 10th International Software Product Line Conference ( SPLC'06 ) , pp .31 - 40 , IEEE Computer Society , August 2006 .", "label": "", "metadata": {}, "score": "47.94842"}
{"text": "C. Nebut , S. Pickin , Y. le Traon , and J. M. J\u00e9z\u00e9quel , \" Automated requirements - based generation of test cases for product families , \" in Proceedings of the 18thIEEE International Conference on Automated Software Engineering ( ASE'03 ) , 2003 .", "label": "", "metadata": {}, "score": "48.13555"}
{"text": "Variability management is thus growingly seen as the cornerstone of SPL development , covering the entire development life cycle , from requirements elicitation [ 11 ] to product derivation [ 12 ] to product testing [ 13 , 14 ] .A traditional way used by scientists to master the increasing complexity and variability of real - world phenomena is to resort to modeling .", "label": "", "metadata": {}, "score": "48.22312"}
{"text": "Product Line Use Case modeling for System and Software engineering ( PLUSS ) [ 48 ] is another approach based on FeatuRSEB [ 44 ] that combines Feature Diagrams and Use Cases .The originality of this approach is that the decomposition operator is made explicit to compose feature : two new types of nodes are introduced : single adapters ( represent XOR - decomposition ) and multiple adapters ( OR decomposition ) .", "label": "", "metadata": {}, "score": "48.292084"}
{"text": "Elements of a model template can be annotated .These annotations are defined in terms of features from the feature model , and can be evaluated according to a particular feature configuration .Possible annotations are presence conditions ( PCs ) and metaexpressions ( MEs ) .", "label": "", "metadata": {}, "score": "48.464703"}
{"text": "Pohl et al .[ 24 ] propose the OVM concept , that is , later refined in [ 69 ] ; a model that defines the variability of a SPL separately and then relates it to other development artifacts like Use Cases , component , and test models .", "label": "", "metadata": {}, "score": "48.530544"}
{"text": "Feature logic has originally been developed in computer linguistics as a knowledge representation and inference mechanism .It offers a uniform formalism for the description of variants and revisions , where sets of versions rather than single versions are the basic units of reasoning .", "label": "", "metadata": {}, "score": "48.55233"}
{"text": "Feature logic has originally been developed in computer linguistics as a knowledge representation and inference mechanism .It offers a uniform formalism for the description of variants and revisions , where sets of versions rather than single versions are the basic units of reasoning .", "label": "", "metadata": {}, "score": "48.55233"}
{"text": "[ 64 ] first configure the feature model , based on the user 's feature selection , and then compose the model fragments associated to the selected features .Product Derivation in Separated Approaches .Model template elements ( structural or behavioral ) can be annotated with presence conditions ( PCs ) and metaexpressions ( MEs ) .", "label": "", "metadata": {}, "score": "48.607758"}
{"text": "ICE is based on the version set model , where versions , components , and aggregates are grouped into sets according to their features , using feature logic as a formal base to denote sets and operations and to deduce consistency .", "label": "", "metadata": {}, "score": "48.910934"}
{"text": "Multiviews and Compositional Approaches .At the code level , when features are implemented separately in distinct modules ( files , classes , packages , plug - ins , etc . ) , they can easily be composed in different combinations to generate variants .", "label": "", "metadata": {}, "score": "48.9208"}
{"text": "[ 24 ] .Other classification proposals come from Meekel et al .[ 31 ] ( feature , hardware platform , performances , and attributes variability ) or Bachmann and Bass [ 32 ] who discuss about variability at the architectural level .", "label": "", "metadata": {}, "score": "49.003197"}
{"text": "We apply mathematical concept analysis to the problem of reengineering configurations .Concept analysis will reconstruct a taxonomy of concepts from a relation between objects and attributes .We use concept analysis to infer configuration structures from existing source code .Our tool NORA / RECS will ... \" .", "label": "", "metadata": {}, "score": "49.020523"}
{"text": "53 - 59 , 2010 .S. Deelstra , M. Sinnema , and J. Bosch , Experiences in Software Product Families : Problems and Issues During Product Derivation , Lecture Notes in Computer Science , 2004 .T. von der Massen and H. Lichter , \" Requiline : a requirements engineering tool for software product lines , \" in Software Product - Family Engineering , Lecture Notes in Computer Science , pp .", "label": "", "metadata": {}, "score": "49.04451"}
{"text": "M. Mezini and K. Ostermann , \" Variability management with feature - oriented programming and aspects , \" SIGSOFT Software Engineering Notes , vol .29 , no .6 , pp .127 - 136 , 2004 .View at Google Scholar .", "label": "", "metadata": {}, "score": "49.41752"}
{"text": "( i )Accommodate the modular specification of large , complex systems with variability .( ii )Accommodate the construction of libraries of reusable assets ( components with variability in them ) which are used in multiple projects of a given organization after configuring their variability .", "label": "", "metadata": {}, "score": "49.43925"}
{"text": "L. M. Northrop , \" A framework for software product line practice , \" in Proceedings of the Workshop on Object - Oriented Technology , pp .365 - 376 , Springer , London , UK , 1999 .G. Halmans and K. Pohl , \" Communicating the variability of a software product family to customers , \" Software and System Modeling , vol .", "label": "", "metadata": {}, "score": "49.45963"}
{"text": "[36 ] .Batory [ 50 ] established the relationship that exists between feature model , propositional logic , and grammar .Batory also suggested to use logic truth maintenance system ( LTMS ) to infer some choices during the configuration process .", "label": "", "metadata": {}, "score": "49.471214"}
{"text": "Since both domains are structured differently ( features vs. artifacts ) , there is no natural way to map one to the other .Using an explicit and formal mapping creates opportunities ... \" .Abstract .Bridging problem domain and solution in product line engi - neering is a time - consuming and error - prone process .", "label": "", "metadata": {}, "score": "49.624825"}
{"text": "We present the version set model , where versions , components , and aggregates are grouped into sets according to their features , using feature logic as a formal base to denote sets and operations and deduce consistency .Version sets generalize well - known CM concepts such as components , repositories , workspaces , aggregates , or configurations .", "label": "", "metadata": {}, "score": "49.678753"}
{"text": "Czarnecki and Antkiewicz [ 66 ] proposes a general template - based approach for mapping feature models to concrete representations using structural or behavioural models .They use a model representing a superimposition of all variants , whose elements relate to corresponding features through annotations .", "label": "", "metadata": {}, "score": "49.67968"}
{"text": "Within services , there are complex relationships between services ' concerns .Across services , interactions between services ( e.g. , a feature of one service may exclude another feature of another service ) have to be managed when services are combined to form workflows .", "label": "", "metadata": {}, "score": "49.680702"}
{"text": "There are small differences in the notation compared to FODA : feature names appear in boxes , three new types of feature relations introduced ( composed - of , generalization / specialization , implemented - by ) .Griss et al . propose FeatuRSEB [ 44 ] , a combination of FODA and the Reuse - Driven Software Engineering Business ( RSEB ) method .", "label": "", "metadata": {}, "score": "49.717476"}
{"text": "Using Aspect - Oriented Modeling ( AOM ) techniques , variability can be woven into a given base metamodel , allowing its integration into a wide variety of metamodels in a semiautomatic way .A key point of this method is the definition of a general variability metamodel , based on the work of Schobbens et al .", "label": "", "metadata": {}, "score": "49.78561"}
{"text": "Feature logic ensures early detection of inconsistencies as well as automatic completion of the configuration thread .We have implemented a tool called ICE , realizing the above approach .As ICE uses the common C preprocessor ( CPP ) representation , one can select , add , or modify arbitrary version subsets as user - readable entities .", "label": "", "metadata": {}, "score": "49.798183"}
{"text": "Key words : software configuration management , version control , deduction and theorem proving , knowledge representation formalisms and methods . ... a configuration thread can be determined or inconsistencies can be detected .Feature terms are boolean expressions over ( name : value)- attributions , called features , where values may be atomic constants , variables or nested feature terms .", "label": "", "metadata": {}, "score": "49.8964"}
{"text": "From the standpoint of CVL the base model is just a collection of objects and links between them .The Foundation Layer comprises means to define abstract variability with proper constraints , how to resolve the variability to define products , and how to realize the products to produce products defined in the base language .", "label": "", "metadata": {}, "score": "49.97184"}
{"text": "Source files can then be simplified according to the lattice structure .Finally , we show how governing expressions can be simplified by utilizing an isomorphism theorem of mathematical concept analysis . by Andreas Zeller - IN ICE .SOFTWARE CONFIGURATION MANAGEMENT : ICSE&apos;96 SCM-6 WORKSHOP SELECTED PAPERS , 1995 . \" ...", "label": "", "metadata": {}, "score": "50.070198"}
{"text": "The work of Gomaa and Shin [ 58 , 59 ] on multiple view product line modeling using UML also falls into this category .It promotes the use of different perspectives for a better understanding of the product line .The used views are use case model view for functional SPL requirements ; static model view for static structural SPL aspects ; collaboration model view to capture the sequence of messages passed between objects ; state chart model view to address dynamic SPL aspects .", "label": "", "metadata": {}, "score": "50.091255"}
{"text": "View at Google Scholar .T. Ziadi and J. M. J\u00e9z\u00e9quel , \" Product line engineering with the UML : products derivation , \" in Families Research Book , Lecture Notes in Computer Science , chapter WP4 , Springer , New York , NY , USA , 2004 .", "label": "", "metadata": {}, "score": "50.222904"}
{"text": "Beyond being used for a mere description and documentation of variability , variability models are more and more leveraged to produce other artifacts , such as configurators , code , or test cases .This paper overviews several classification dimensions of variability modeling and explores how do they fit with such artifact production purposes .", "label": "", "metadata": {}, "score": "50.2388"}
{"text": "Van Gurp et al .[45 ] slightly extend FeatuRSEB by introducing binding times ( annotation to indicate when features can be selected ) and external features ( capabilities offered by the target platform ) .Riebisch proposed to explicitly represent cardinalities in Feature Diagram and thus extends them with UML multiplicities [ 46 ] .", "label": "", "metadata": {}, "score": "50.24926"}
{"text": "J. M. J\u00e9z\u00e9quel , \" Reifying variants in configuration management , \" ACM Transaction on Software Engineering and Methodology , vol . 8 , no . 3 , pp .284 - 295 , 1999 .View at Google Scholar .K. C. Kang , S. Kim , J. Lee , K. Kim , E. Shin , and M. Huh , \" Form : a feature - oriented reuse method with domain - specific reference architectures , \" Annuals of Software Engineering , vol .", "label": "", "metadata": {}, "score": "50.291443"}
{"text": "Krzysztof Czarnecki is an Assistant Professor at the University of Waterloo , Canada .Before coming to Waterloo , he spent 8 years at DaimlerChrysler Research working on the practical applications of generative programming ( GP ) .Together with Ulrich Eisenecker , he co - authored the book \" Generative Programming \" ( Addison - Wesley , 2000 ) .", "label": "", "metadata": {}, "score": "50.36114"}
{"text": "782 - 796 , 2008 .M. Acher , P. Collet , P. Lahire , A. Gaignard , R. France , and J. Montagnat , \" Composing multiple variability artifacts to assemble coherent workows , \" Software Quality Journal , p. 40 , 2011 , Special issue on Quality Engineering for Software Product Lines .", "label": "", "metadata": {}, "score": "50.37732"}
{"text": "Concepts regarding variability and those that describe the assets metamodel are combined into a new language , that may either have a new , mixed syntax , or one based on that of the base model extended by the syntax of the variability language .", "label": "", "metadata": {}, "score": "50.38491"}
{"text": "In general , SPL testing lack evidence , in many aspects .Regression test selection techniques , test automation and architecture - based regression testing are points for future research as well as techniques that address the relationships between variability and testing and techniques to handle traceability among test and development artifacts .", "label": "", "metadata": {}, "score": "50.4573"}
{"text": "Finally , some conditions for efficient real ... . by Andreas Zeller , Abteilung Softwaretechnologie - In Proceedings of the Workshop on Knowledge Representation and Configuration Problems , 1996 . \" ...Software configuration management ( SCM ) is the discipline for controlling the evolution of software systems .", "label": "", "metadata": {}, "score": "50.638763"}
{"text": "The provision of effective means for handling such concerns makes it possible to effectively manage variability in product - lines .Modeling variability allows a company to capture and select which version of which variant of any particular aspect is wanted in the system [ 10 ] .", "label": "", "metadata": {}, "score": "50.85352"}
{"text": "The recent outburst of variability modeling methods that we are witnessing is somehow resembling the blossoming of so many general purpose modeling languages of the early 90 's , that were ultimately unified by the OMG into the UML .Maybe it is also time for variability modeling methods to be unified into something well accepted by the community .", "label": "", "metadata": {}, "score": "51.148903"}
{"text": "For the collaboration and state chart models , concepts from single - system development such as alternative branches , message sequences , and state transitions are used .Of course , when a view is modified at a variation point , the other views also need to be modified in order to maintain consistency .", "label": "", "metadata": {}, "score": "51.15139"}
{"text": "Object substitution involves two objects and means redirecting all links in which one is involved to the other and then deleting the former .Fragment substitution involves identifying a placement fragment in the base model via boundary element , thereby creating a conceptual \" hole \" to be filled by a replacement fragment of a compatible type .", "label": "", "metadata": {}, "score": "51.204285"}
{"text": "Introductory . tutorials should seek to educate the participants about the basic concepts .and techniques of generative and component - based development .More advanced tutorials may cover advanced development techniques and/or . underlying theory .Demonstrations .We invite proposals for demonstrating novel tools , systems , or techniques .", "label": "", "metadata": {}, "score": "51.210396"}
{"text": "26 , no . 3 , pp .126 - 132 , 2001 .View at Google Scholar .K. C. Kang , S. G. Cohen , J. A. Hess , W. E. Novak , and A. S. Peterson , \" Featureoriented domain analysis ( foda ) feasibility study , \" Tech .", "label": "", "metadata": {}, "score": "51.261223"}
{"text": "To validate the approach , we developed a configuration engine , called Fresh , for enterprise Java applications and conducted experiments to measure how effectively Fresh can configure the canonical Java Pet Store application .Our results show that Fresh reduces the number of lines of hand written XML code by up to 92 % and the total number of configuration steps by up to 72 % .", "label": "", "metadata": {}, "score": "51.282852"}
{"text": "A feature model consists of a feature diagram and other associated information : constraints and dependency rules .Feature diagrams provide a graphical tree - like notation depicting the hierarchical organization of high - level product functionalities represented as features .The root of the tree refers to the complete system and is progressively decomposed into more refined features ( tree nodes ) .", "label": "", "metadata": {}, "score": "51.31405"}
{"text": "Model - Driven Engineering ( MDE ) makes it possible to automate this weaving process [ 19 ] .MDE has started to be used by organizations to effectively manage software product lines .An entire SPL can be expressed and created from a single configurable model .", "label": "", "metadata": {}, "score": "51.503372"}
{"text": "The base metamodel is just extended , none of its elements are removed .This allows an easy translation of models encoded in the variability - woven metamodel into the original one and the reuse of already developed tools such as model editors or checkers .", "label": "", "metadata": {}, "score": "51.513153"}
{"text": "35 , no . 8 , pp .705 - 754 , 2005 .View at Google Scholar .F. Bachmann and P. Clements , \" Variability in software product lines , \" Tech .Rep. cmu / sei-2005-tr-012 , Software Engineering Institute , Pittsburgh , Pa , USA , 2005 .", "label": "", "metadata": {}, "score": "51.585625"}
{"text": "175 - 189 , Springer , San Francisco , Calif , USA , 2003 .View at Google Scholar .S. Pickin , C. Jard , T. J\u00e9ron , J. M. J\u00e9z\u00e9quel , and Y. le Traon , \" Test synthesis from UML models of distributed software , \" IEEE Transactions on Software Engineering , vol .", "label": "", "metadata": {}, "score": "51.772087"}
{"text": "M. Mannion , \" Using first - order logic for product line model validation , \" in Proceedings of the 2nd International Conference on Software Product Lines ( SPLC 2 ) , pp .176 - 187 , Springer , London , UK , 2002 .", "label": "", "metadata": {}, "score": "51.855812"}
{"text": "Rep. , FUNDP Namur , 2003 .View at Google Scholar .T. Ziadi and J. M. J\u00e9z\u00e9quel , \" Product line engineering with the UML : deriving products , \" in Software Product Lines , pp .557 - 586 , Springer , New York , NY , USA , 2006 .", "label": "", "metadata": {}, "score": "51.86618"}
{"text": "the programming languages community on the other , in addition to . supporting the original research goals of both the GCSE and the SAIG . communities .We seek papers both in software engineering and in programming .languages , and especially those that bridge the gap and are accessible to .", "label": "", "metadata": {}, "score": "51.962173"}
{"text": "KobrA decision models are described using a tabular notation .A clear distinction is made between simple and high level decisions .For simple decision , references are given to the involved assets and variation points .In the case of high - level decisions , references are given to the other decisions that are affected by resolving it .", "label": "", "metadata": {}, "score": "52.017384"}
{"text": "Classifications of Variability .Several possible classifications have been proposed .Halmans and Pohl [ 3 ] distinguish between essential and technical variability , especially at requirements level .Essential variability corresponds to the customer 's viewpoint , defining what to implement , while technical variability relates to product family engineering , defining how to implement it .", "label": "", "metadata": {}, "score": "52.039886"}
{"text": "One of these is the use and reuse of components .Using components in a development process will also bring some problems .When a softwa ... \" .The software industry has been struggling with issues like cost efficiency , development speed and reliability .", "label": "", "metadata": {}, "score": "52.047092"}
{"text": "Other Contributions .Work related to generative programming and component engineering can also .be presented in other forms than papers .GPCE has separate days for . tutorials and workshops .During the conference there are sessions for tool . demonstrations and practitioner reports .", "label": "", "metadata": {}, "score": "52.177563"}
{"text": "These usages of variability models require that they are no longer informal , and that the language used to describe them has a well - defined abstract syntax ( i.e. , metamodel ) and semantics .The goal of this paper was not to present an exhaustive survey on variability modeling methods and related tools , but to organize the plethora of existing approaches into several classification dimensions , and provide representative examples of Model - Driven Engineering tools and algorithms exploiting them .", "label": "", "metadata": {}, "score": "52.20263"}
{"text": "While I am able to see how those special notation editors ( with knowledge of the notation to allow stuff like code completion ) might be implemented , I always wondered about the mythical database where all requirements are fed in and how the powerful generators would look like .", "label": "", "metadata": {}, "score": "52.44499"}
{"text": "Weiss and Lai [ 28 ] defined variability in SPL as \" an assumption about how members of a family may differ from each other \" .From a software perspective [ 29 ] , variability can be seen as the \" the ability of a software system or artifact to be efficiently extended , changed , customized , or configured for use in a particular context \" .", "label": "", "metadata": {}, "score": "52.469566"}
{"text": "[ 68 ] introduce superimposition as a technique to merge code fragments belonging to different features .They extend the approach and analyse whether UML class , state , and sequence diagrams can be decomposed into features and then recomposed using superimposition to create complete models corresponding to SPL products .", "label": "", "metadata": {}, "score": "52.474583"}
{"text": "The figure shows what each feature modeling dialect is able to represent , as well as its limitations .Figure 2 : Feature Diagram Dialects - synthesis of variability modeling concepts .Despite their popularity and widespread use , all these Feature Models variants only provide a hierarchical structuring of high - level product functionalities [ 53 ] , with very little connection with the actual software products .", "label": "", "metadata": {}, "score": "52.562836"}
{"text": "o Intentional programming , and multi - dimensional separation of concerns .Reports on applications of these techniques to real - world problems are . especially encouraged , as are submissions that relate ideas and concepts .from several of these topics , or bridge the gap between theory and practice .", "label": "", "metadata": {}, "score": "52.600002"}
{"text": "Istoan [ 52 ] further identifies three subcategories of methods which share the same principle but differ in the type of variability model they use .Connect Feature Diagrams to Model Fragments .Since Feature Diagrams only concentrate on a specific aspect of SPL modeling , there is a need to combine them with other product representations , that is , to associate model fragments to features .", "label": "", "metadata": {}, "score": "52.609787"}
{"text": "Hence Czarnecki and Eisenecker adapted this definition to the SPL domain as \" a system property relevant to some stakeholder used to capture commonalities or discriminate among systems in a family \" [ 35 ] .A feature can play different roles during the SPL engineering process .", "label": "", "metadata": {}, "score": "52.62696"}
{"text": "We present the Incremental Configuration Environment ( ICE ) , a novel SCM system providing smooth integration with both the software process and the development environment .ICE is based on th ... \" .Implementing software configuration management ( SCM ) in an organization raises various integration problems .", "label": "", "metadata": {}, "score": "52.681698"}
{"text": "Instead of merging multiple feature models as in [ 102 ] , another approach is to reference those multiple feature models , as proposed by Hartmann et al .[ 104 ] .This approach introduces the Supplier Independent Feature Model ( SIFM ) in order to select products among the set of products described by several Supplier Specific Feature Models ( SSFM ) .", "label": "", "metadata": {}, "score": "52.832596"}
{"text": "209 - 218 , 2008 .View at Google Scholar .T. Ziadi , L. H\u00e9elou\u00ebt , and J. M. J\u00e9z\u00e9quel , \" Towards a UML profile for software product lines , \" in Software Product - Family Engineering , vol .", "label": "", "metadata": {}, "score": "52.879208"}
{"text": "The presence or absence of optional expressions .( ii )The choice of a variant expression for variation expressions .( iii )The refinement of virtual expressions .is the instance of the decision model related to a specific product .", "label": "", "metadata": {}, "score": "52.92126"}
{"text": "View at Google Scholar .J. Xabier Mansell and D. Sellier , \" Decision model and exible component definition based on xml technology , \" in Software Product Family Engineering ( PFE ) , Lecture Notes in Computer Science , pp .", "label": "", "metadata": {}, "score": "52.95708"}
{"text": "Using MDE to Process Variability Models .Models have been used for long as descriptive artifacts , and proved themselves very helpful for formalizing , sharing , and communicating ideas .Modeling variability in SPL is thus already very useful by itself , as highlighted by the popularity of feature modeling languages and their supporting tools ( Pure::Variants [ 80 ] , RequiLine , Gears [ 81 ] , etc . ) .", "label": "", "metadata": {}, "score": "52.993813"}
{"text": "Decision Model Based Approaches .This class of approaches keeps the same general characteristics as all other in this category .They differ in using decision models as variability model .Decision - oriented approaches were designed to guide the product derivation process based on decision models .", "label": "", "metadata": {}, "score": "53.10327"}
{"text": "Here we only subjectively select a set of approaches that we feel are representative of the possible ways of modeling variability in SPL .Going from contemplative to productive , in Section 4 we present some MDE tools leveraging variability models for a range of product line engineering activities .", "label": "", "metadata": {}, "score": "53.24008"}
{"text": "Weiss and Lai [ 28 ] define it as \" the document defining the decisions that must be made to specify a member of a domain \" .For Bayer et al .[ 72 ] it is a model that \" captures variability in a product line in terms of open decisions and possible resolutions \" .", "label": "", "metadata": {}, "score": "53.248"}
{"text": "( iii ) Accommodate configuration dependencies between units over base models of different domains , that is , different metamodels .For example , the configuration of a unit of requirements may trigger the configuration of a UML unit designed to fulfill those requirements .", "label": "", "metadata": {}, "score": "53.2538"}
{"text": "Workshops will take . place on the first day of the conference .Young Researchers Workshop .As in the past year , the conference will feature a one day doctoral . symposium , where a panel of experts will review and discuss submissions .", "label": "", "metadata": {}, "score": "53.31188"}
{"text": "It defines a set of stereotypes , tagged values , and structural constraints and gather them in a UML profile for product lines [ 12 ] .Class diagrams are first extended with the concept of optionality .The . stereotype marks model elements that can be omitted in some products .", "label": "", "metadata": {}, "score": "53.475662"}
{"text": "I and II provide students a capstone experience that integrates the theory and practice of SE .SE I investigates a variety of SE models and guidelines used in industry .In the first part of a year - long project , students complete the requirements and specifications phases and reviews of SE and begin the formal design phase .", "label": "", "metadata": {}, "score": "53.494667"}
{"text": "198 - 216 , Springer , London , UK , 2002 .View at Google Scholar .V. Vranic , \" Reconciling feature modeling : a feature modeling metamodel , \" in Proceedings of the 5th Net .ObjectDays , pp .", "label": "", "metadata": {}, "score": "53.536285"}
{"text": "Czarnecki and Antkiewicz define a set of choices of IPCs that can be used for UML class and activity diagrams , based on the element 's type .General guidelines for applying this method for a particular target notation are provided .", "label": "", "metadata": {}, "score": "53.88043"}
{"text": "Stephen J. Mellor is Vice - President and co - founder of Project Technology , Inc. , a company focused on tools to execute and translate UML models .He is active in the OMG , chairing the consortium that added executable actions to the UML , and he is now active in specifying MDA .", "label": "", "metadata": {}, "score": "54.10196"}
{"text": "( 2 )A variable is a kind of VSpec whose resolution involves providing a value of a specified type .This value is meant to be used in the base model , but similar to choices , it is unknown in this level exactly where and how .", "label": "", "metadata": {}, "score": "54.113167"}
{"text": "The Emergence of Variability Modeling .Definitions of Variability .The basic vision underlying SPL can probably be traced back to Parnas seminal article [ 23 ] on the Design and Development of Program Families .Central to the SPL paradigm is the modeling and management of variability , the commonalities and differences in the applications in terms of requirements , architecture , components , and test artifacts [ 24 ] .", "label": "", "metadata": {}, "score": "54.164776"}
{"text": "There are two other changes : first a feature is allowed to have multiple parents and second , it is no longer features that are optional or mandatory , but edges .Czarnecki and Eisenecker adapted Feature Diagrams in the context of Generative Programming [ 35 ] by adding an OR feature decomposition and defining a graphical representation of features dependencies .", "label": "", "metadata": {}, "score": "54.176785"}
{"text": "The versions T that match S will ... . \" ...We apply feature logic to the problem of incremental configuration management .Feature logic has originally been developed in computer linguistics as a knowledge representation and inference mechanism .It offers a uniform formalism for the description of variants and revisions , where sets of version ... \" .", "label": "", "metadata": {}, "score": "54.243725"}
{"text": "M. Riebisch , \" Towards a more precise definition of feature models , \" in Modelling Variability for Object - Oriented Product Lines , pp .64 - 76 , 2003 .View at Google Scholar .M. Eriksson , J. B\u00f6rstler , and K. Borg , \" The pluss approach - domain modeling with features , use cases and use case realizations , \" in Software Product Lines ( SPLC ) , Lecture Notes in Computer Science , pp .", "label": "", "metadata": {}, "score": "54.276897"}
{"text": "explicit substitution , in - lining and macros , templates , . program transformation .o Runtime code generation , compilation , active libraries , . synthesis from specifications , development methods , generation . of non - code artifacts , formal methods , reflection .", "label": "", "metadata": {}, "score": "54.324585"}
{"text": "Ulrich W. Eisenecker is a professor for computer science at the University of Applied Sciences Kaiserslautern , Zweibruecken , where he directs the Institute of Componentware and Window - Interfaces .He has been working on generative programming for more than five years and is responsible for several projects in generative programming research funded by industry and public institutes .", "label": "", "metadata": {}, "score": "54.326767"}
{"text": "P. A. da Mota Silveira Neto , I. D. Carmo MacHado , J. D. McGregor , E. S. de Almeida , and S. R. de Lemos Meira , \" A systematic mapping study of software product lines testing , \" Information and Software Technology , vol .", "label": "", "metadata": {}, "score": "54.3574"}
{"text": "o Embedded systems .o Model - driven architecture .o Reuse , distributed platforms , distributed systems , evolution , . analysis and design patterns , development methods , formal methods .o Domain - specific languages ( DSLs ) including visual and UML - based DSLs .", "label": "", "metadata": {}, "score": "54.48513"}
{"text": "It is specified by a unique name and has a type , which defines the range of values which can be assigned to a decision .Available decision types in DOPLER are boolean , string , number , and enumeration .Decisions can be annotated using decision attributes to capture further information ( description , question ) for the modeler or user .", "label": "", "metadata": {}, "score": "54.515663"}
{"text": "Demonstrations should focus .on technical aspects .Demonstrations showing how a specific technology is . used in real world scenarios are particularly welcome .Both work in progress .or proven techniques are appropriate .Product marketing is inappropriate in .", "label": "", "metadata": {}, "score": "54.577534"}
{"text": "The lattice not only displays tine - grained dependencies between configurations , but also visualizes the overall quality of configuration structures according to software engineering principles .In a second step , interferences between configurations can be analyzed in order to restructure or simplify configurations .", "label": "", "metadata": {}, "score": "54.6395"}
{"text": "Clafer has a minimalistic syntax and semantics ( very few underlying concepts ) , trying to unify existing notations ( such as feature , class , and metamodels ) , both syntactically and semantically .It supports the most common constructions from domain modeling , modeling requirements , and structural modeling .", "label": "", "metadata": {}, "score": "54.641262"}
{"text": "S. Robak , R. Franczyk , and K. Politowicz , \" Extending the UML for modeling variability for system families , \" International Journal of Applied Mathematics Computer Sciences , vol .12 , no . 2 , pp .285 - 298 , 2002 .", "label": "", "metadata": {}, "score": "54.715073"}
{"text": "6 , pp .513 - 537 , 2005 .View at Publisher \u00b7 View at Google Scholar .L. M. Northrop , \" SEI 's software product line tenets , \" IEEE Software , vol .19 , no .4 , pp .", "label": "", "metadata": {}, "score": "54.73638"}
{"text": "Domain test aims at testing common parts and preparing for testing variable parts .In application engineering , these test assets are reused , extended and refined to test specific applications .General approaches to achieve core assets reuse are : repository , core assets certification , and partial integration .", "label": "", "metadata": {}, "score": "54.77543"}
{"text": "Not bad , or ?One can imagine the mathematicans or electrical engineers to provide their requirements in their favourite notation .While this looks like Visual Studio on steroids ( which seemed to have been considered seriously for a short time at Microsoft ) , it is a glimpse on the intentional software system which Simonyi 's company Intentional Software seems to develop since nearly a decade .", "label": "", "metadata": {}, "score": "54.838795"}
{"text": "M. Sinnema , S. Deelstra , and P. Hoekstra , \" The COVAMOF derivation process , \" in Proceedings of the 9th International Conference on Reuse of Off - the - Shelf Components ( ICSR'06 ) , pp .101 - 114 , 2006 .", "label": "", "metadata": {}, "score": "54.863365"}
{"text": "Feature l .. \" ...Dynamically composed systems ( DCSs ) are software systems that can be constructed , modified and maintained as they execute .Although this capability has existed in languages and operating systems for some time , it has more recently become popular with the spread of languages such as Java and those su ... \" .", "label": "", "metadata": {}, "score": "54.976475"}
{"text": "J. Meekel , T. B. Horton , and C. Mellone , \" Architecting for domain variability , \" in Proceedings of the 2nd International ESPRIT ARES Workshop on Development and Evolution of Software Architectures for Product Families , pp .205 - 213 , 1998 .", "label": "", "metadata": {}, "score": "55.025673"}
{"text": "For the static model view , additional stereotypes are introduced : .( interface to external environment ) .Variation is also expressed using classical UML concepts like abstract classes and inheritance .Finally , de Oliveira Jr. et al .[ 60 ] present a UML - based process for variability management that allows the identification , representation , and delimitation of variabilities .", "label": "", "metadata": {}, "score": "55.12598"}
{"text": "The abstract syntax proposed in [ 38 ] serves as the basis for the variability metamodel defined by Morin et al .[ 61 ] .In this meta - model , the central metaclass PointOfVariability can be woven with any base metamodel element on which variants are needed .", "label": "", "metadata": {}, "score": "55.191353"}
{"text": "This support enables the creation of product families , product lines , and product populations through module composition .In the model , variability can be bound at the various times , for example , re ... . by Christian K\u00e4stner , Klaus Ostermann , Sebastian Erdweg - In Proc . of OOPSLA , 2012 . \" ...", "label": "", "metadata": {}, "score": "55.221626"}
{"text": "The effect on the base model may be indicated by binding VSpecs to variation points which refer to the base model .VSpecs may be arranged as trees , where the parent - child relationship organizes the resolution space by imposing structure and logic on permissible resolutions .", "label": "", "metadata": {}, "score": "55.25824"}
{"text": "We further distinguish 3 subcategories : ad hoc extensions to existing languages , generic extensions that can be woven into any language , and finally ad hoc languages .Annotate a Base Model by Means of Extensions .Clauss [ 55 , 56 ] , first proposed to apply variability extensions to UML Class Diagrams , leveraging the UML of extension mechanism that allows designers to describe generic models .", "label": "", "metadata": {}, "score": "55.3238"}
{"text": "The remainder of the paper is organized as follows .Section 2 gives an historical perspective on the emergence of variability modeling .In Section 3 , we define several dimensions of variability modeling and then illustrate them with an overview of representative variability modeling methods .", "label": "", "metadata": {}, "score": "55.534714"}
{"text": "This separation applies at both metamodel and model level , with the following advantages : each asset model may have more than one variability model ; designers can focus on the product line itself and not on its variability , which is addressed separately .", "label": "", "metadata": {}, "score": "55.749172"}
{"text": "Product derivation methods slightly differ depending on whether the variability modeling follows an Amalgamated Approach or a Separated Approach , as defined in Sections 3.2 and 3.3 .Product Derivation in Amalgamated Approaches .Ziadi et al .[ 12 ] propose an algebraic specification of UML sequence diagrams as reference expressions , extended with variability operators ( optionality , choice , etc . ) .", "label": "", "metadata": {}, "score": "55.795338"}
{"text": "Table 1 summarizes the classification proposed in [ 52 ] .It outlines what does happen at metamodel and model level for the identified classes and subclasses of variability modeling techniques .Amalgamated Approach .Techniques using an amalgamated approach extend a language or a general purpose metamodel with specific concepts that allow designers to describe variability .", "label": "", "metadata": {}, "score": "55.919792"}
{"text": "Combine a Common Variability Language with Different Base Languages .Methods in this category propose a generic language or model that subsumes variability related concepts .The same general variability model can be combined with different base models , extending them with variability .", "label": "", "metadata": {}, "score": "55.963882"}
{"text": "[ 24 ] use an explicit ad hoc metamodel , as well as Sinnema et al . who regroup the concepts used by the COVAMOF framework in a well defined metamodel described in [ 70 , 71 ] .The concepts introduced in DOPLER are also gathered in a specific metamodel detailed in [ 74 ] .", "label": "", "metadata": {}, "score": "55.988564"}
{"text": "To implement compile - time variability in software product lines , modules can be composed in different combinations .However , this way variability dictates a dominant decomposition .Instead , we introduce a variability - aware ... \" .Module systems enable a divide and conquer strategy to software development .", "label": "", "metadata": {}, "score": "56.174934"}
{"text": "His research interests include language design , program analysis , compilation and compiler generation , prototyping , program transformation , and formal specification .Claus Brabrand received his PhD in computer science from the BRICS Research Center at the University of Aarhus , Denmark , 2003 .", "label": "", "metadata": {}, "score": "56.358063"}
{"text": "View at Google Scholar .J. Bosch , Design and Use of Software Architectures : Adopting and Evolving a Product - Line Approach , ACM Press , Addison - Wesley , New York , NY , USA , 2000 .J. Coplien , D. Hoffman , and D. Weiss , \" Commonality and variability in software engineering , \" IEEE Software , vol .", "label": "", "metadata": {}, "score": "56.381546"}
{"text": "15 - 36 , 2003 .View at Publisher \u00b7 View at Google Scholar . A. Maccari and A. Heie , \" Managing infinite variability in mobile terminal software : research articles , \" Software : Practice and Experience , vol .", "label": "", "metadata": {}, "score": "56.51018"}
{"text": "View at Publisher \u00b7 View at Google Scholar .M. Erwig , \" A language for software variation research , \" in Proceedings of the 9th International Conference on Generative Programming and Component Engineering ( GPCE'10 ) , pp .3 - 12 , ACM , New York , NY , USA , October 2010 .", "label": "", "metadata": {}, "score": "56.570457"}
{"text": "K. Czarnecki and A. Wasowski , \" Feature diagrams and logics : there and back again , \" in Proceedings of the 11th International Software Product Line Conference ( SPLC'07 ) , pp .23 - 34 , Kyoto , Japan , September 2007 .", "label": "", "metadata": {}, "score": "56.583054"}
{"text": "View at Google Scholar . A. Deursen and P. Klint , \" Domain - specific language design requires feature descriptions , \" Journal of Computing and Information Technology , vol .10 , p. 2002 , 2001 .View at Google Scholar . D. S. Batory , \" Feature models , grammars , and propositional formulas , \" in Proceedings of the 9th international conference on Software Product Lines ( SPLC'05 ) , pp . 7 - 20 , 2005 .", "label": "", "metadata": {}, "score": "56.7125"}
{"text": "The configuration space may be very large , and the integration process must take the binding variation points into account .Addi ... . by Slinger Jansen , Sjaak Brinkkemper , Gerco Ballintijn - in Proceedings of the 21stInternational Conference on Software Maintenance .", "label": "", "metadata": {}, "score": "56.718918"}
{"text": "( 1 ) Interpreting an optional expression means deciding on its presence or not in the product expression .This is defined as .The second part of the derivation process proposed in [ 12 ] is to leverage StateCharts synthesis from these scenarios [ 112 ] , from which direct implementations can easily be obtained [ 113 ] .", "label": "", "metadata": {}, "score": "56.750637"}
{"text": "C. W. Krueger , \" The biglever software gears unified software product line engineering framework , \" in Proceedings of the 12th International Software Product Line Conference ( SPLC'08 ) , p. 353 , Limerick , UK , September 2008 .M. Acher , P. Collet , P. Lahire , and R. France , \" Slicing feature models , \" in Proceedings of the 26th IEEE / ACM International Conference on Automated Software Engineering ( ASE'11 ) , pp .", "label": "", "metadata": {}, "score": "56.810646"}
{"text": "6 , pp .37 - 45 , 1998 .View at Google Scholar \u00b7 View at Scopus .G. Perrouin , Architecting software systems using model transformation and architectural frameworks [ Ph.D. thesis ] , University of Luxembourg ( LASSY)/University of Namur ( PReCISE ) , 2007 .", "label": "", "metadata": {}, "score": "56.997772"}
{"text": "'s approach [ 64 ] , to support product derivation in [ 12 ] , and to weave variability into metamodels [ 62 ] .Another example is fmp2rsm , a tool supporting Czarnecki and Antkiewicz template based approach [ 66 ] .", "label": "", "metadata": {}, "score": "57.1418"}
{"text": "The report submissions will be reviewed separately from technical paper . submissions by a practitioner report committee .Workshops .GPCE workshops provide intensive collaborative environment to explore .a specific sub - area of generative and component technology in depth , . cover areas that cross the borders of several sub - areas , or focus on .", "label": "", "metadata": {}, "score": "57.148926"}
{"text": "However it lacks expressiveness to model relations between variants or to explicitly represent variation points .Consequently , several extensions were added to Kang et al . 's original notation , in particular for people wanting to extend Feature Diagrams beyond the requirement level .", "label": "", "metadata": {}, "score": "57.21237"}
{"text": "Krzysztof Czarnecki ( University of Waterloo )Ulrich Eisenecker ( University of Applied Sciences Kaiserslautern , Zweibr\u00fccken )Simon Helsen ( University of Waterloo ) .System family engineering seeks to exploit the commonalities among systems from a given problem domain while managing the variabilities among them in a systematic way .", "label": "", "metadata": {}, "score": "57.214317"}
{"text": "Topics include search engines and searching strategies , privacy and security issues , and elementary Web authoring .Graded Satisfactory / Unsatisfactory only .Prerequisite or Corequisite : CS 1150 .1309 PROBLEM SOLVING AND COMPUTER SCIENCE ( 4 credits ) Introduction to general problem - solving techniques applicable to solving problems in computing .", "label": "", "metadata": {}, "score": "57.23246"}
{"text": "e been devised to handle the complexity of configuring applications .This related work focuses on how a configuration problem can be formalized as a CSP .Our work on Fresh extends these ideas , particularly those that describe a generic model of configuration as a CSP ... . by Tijs Van Der Storm - In Proceedings of the 12th International Workshop on Software Configuration Management ( SCM-12 , 2005 . \" ...", "label": "", "metadata": {}, "score": "57.291035"}
{"text": "View at Google Scholar .View at Publisher \u00b7 View at Google Scholar .K. Bak , K. Czarnecki , and A. Wasowski , \" Feature and meta - models in clafer : mixed , specialized , and coupled , \" in Software Language Engineering , B. Malloy , S. Staab , and M. van den Brand , Eds . , vol .", "label": "", "metadata": {}, "score": "57.297924"}
{"text": "His current research focusses on the applicability and viability of MDA in the context of Generative Programming .Before coming to Waterloo , he was a research assistant at the Universities of T\u00fcbingen and Freiburg where he worked with Peter Thiemann on program specialization and partial evaluation .", "label": "", "metadata": {}, "score": "57.443974"}
{"text": "Every construct of the realization layer defines a Variation Point of the base model representing a small modification of the base model into the product model .There are several kinds of variation points .( i )Existence is an indication that the existence of a particular object or link in the base model is in question .", "label": "", "metadata": {}, "score": "57.5101"}
{"text": "Since standard languages are generally not developed to explicitly represent all types of variability , SPL models are frequently expressed by extending or annotating standard languages ( models ) .The annotated models are unions of all specific models in a model family and contain all necessary variability concepts .", "label": "", "metadata": {}, "score": "57.613026"}
{"text": "For integration in software development environments , ICE provides a featured file system ( FFS ) , where version sets are represented as files and directories .In the FFS , arbitrary programs can incrementally access and explore version sets .Using the well - known C preprocessor ( CPP ) representation , users can vi ... . ... ledge representation [ 3 , 26 ] and as a basis for logic programming [ 15 , 33]. 1 In feature logic , feature terms denote sets of objects characterized by certain features .", "label": "", "metadata": {}, "score": "57.689552"}
{"text": "53 , no . 3 , pp .259 - 284 , 2004 .View at Publisher \u00b7 View at Google Scholar .F. Fleurey , O. Haugen , B. Moller - Pedersen , G. Olsen , A. Svendsen , and Z. Xiaorui , \" A generic language and tool for variability modeling , \" Tech .", "label": "", "metadata": {}, "score": "57.74312"}
{"text": "A synthesis of OVM concepts together with their graphical representation is shown in Figure 3 .OVM is a general approach that can be used to document variability in several software artifacts .Requirements variability is handled by relating the OVM to textual requirements or Use Cases .", "label": "", "metadata": {}, "score": "57.982338"}
{"text": "Multiple Perspectives Support : Ideally , different experts should focus on different , specific dimension ( e.g. , security ) and the details that are out of the scope of their expertise should be hidden .Dedicated decomposition facilities should be applied to feature models .", "label": "", "metadata": {}, "score": "58.017467"}
{"text": "The factory features one Factory Method ( encapsulating the procedure for creating an object ) for each of the variability dimensions .The Factory Methods are parameterized to let them create various kinds of products ( i.e. , variants of a type ) , depending on the dynamic configuration selected at runtime .", "label": "", "metadata": {}, "score": "58.060936"}
{"text": "A collection of assets is defined in an asset model .Assets can have a type ( defined for specific domains ) and several attributes .Relations between assets are specified using asset dependencies .Assets are linked to decisions using inclusion conditions which describe the context in which a particular asset is required in a particular product .", "label": "", "metadata": {}, "score": "58.400352"}
{"text": "3713 of Lecture Notes in Computer Science , Springer , Montego Bay , Jamaica , 2005 .View at Google Scholar .View at Publisher \u00b7 View at Google Scholar .M. Gouyette , O. Barais , J. le Noir et al . , \" Movida studio : a modeling environment to create viewpoints and manage variability in views , \" in IDM-7\u00e9me journ\u00e9es sur l'Ing\u00e9nierie Dirig\u00e9e par les Mod\u00e8Les-2011 , I. Ober , Ed . , vol .", "label": "", "metadata": {}, "score": "58.58459"}
{"text": "Grouping similar services helps in finding the relevant service and in maintaining the service directory .Updating Feature Models : When concerns are interrelated within a service by constraints , some features of some concerns may become dead or mandatory .Hence for each concern of service the variability information needs to be updated so that each feature model is a correct representation of the set of configurations .", "label": "", "metadata": {}, "score": "58.702065"}
{"text": "A feature is a ( name : value)-pair used to represent a description or attribute of an object .Feature terms denote sets of objects characterized by certain features .In their simplest form , feature t .. \" ...The software industry has been struggling with issues like cost efficiency , development speed and reliability .", "label": "", "metadata": {}, "score": "58.891216"}
{"text": "Similarly , plastic partial components [ 41 ] introduce variability interfaces for architectural components and realize variability internally with aspect - oriented programming .However , all these approaches do not ... boost / detail / ob_call_traits . hpp .// ( C ) Copyright Steve Cleary , Beman Dawes , Howard Hinnant & John Maddock 2000 .", "label": "", "metadata": {}, "score": "58.918503"}
{"text": "- 896 , 2008 .View at Google Scholar .M. Janota , SAT solving in interactive configuration [ Ph.D. thesis ] , Department of Computer Science at University College Dublin , 2010 .M. Voelter and I. Groher , \" Product line implementation using aspect - oriented and model - driven software development , \" in Proceedings of the 11th International Software Product Line Conference ( SPLC'07 ) , pp .", "label": "", "metadata": {}, "score": "59.033436"}
{"text": "5 , pp .407 - 423 , 2011 .View at Publisher \u00b7 View at Google Scholar \u00b7 View at Scopus . S. Mujtaba , K. Petersen , R. Feldt , and M. Mattsson , \" Software product line variability : a systematic mapping study , \" 2008 . \" ...", "label": "", "metadata": {}, "score": "59.12956"}
{"text": "According to Bachmann and Clements [ 30 ] \" variability means the ability of a core asset to adapt to usages in different product contexts that are within the product line scope \" .For Pohl et al .[ 24 ] it is the \" variability that is modeled to enable the development of customized applications by reusing predefined , adjustable artifacts \" .", "label": "", "metadata": {}, "score": "59.471375"}
{"text": "447 - 478 , Springer , New York , NY , USA , 2006 .View at Google Scholar .J. M. J\u00e9z\u00e9quel , \" Model driven design and aspect weaving , \" Journal of Software and Systems Modeling , vol .", "label": "", "metadata": {}, "score": "59.557484"}
{"text": "[62 ] also propose an explicit variability metamodel , to be woven into other metamodels as discussed before .Once variability is actually modeled , based on a well - defined metamodel , standard Language Engineering tools can be leveraged .", "label": "", "metadata": {}, "score": "59.568302"}
{"text": "B. Morin , F. Fleurey , N. Bencomo et al . , \" An aspect - oriented and model - driven approach for managing dynamic variability , \" in Proceedings of the 11th International Conference on Model Driven Engineering Languages and Systems ( MoDELS'08 ) , vol .", "label": "", "metadata": {}, "score": "59.638474"}
{"text": "Mr Tolvanen has good presentation skills and experience on organizing workshops and tutorials .Reference information and third - party feedback reports from past presentations are available upon request .Stephen J. Mellor is Vice - President and co - founder of Project Technology , Inc. , a company focused on tools to execute and translate UML models .", "label": "", "metadata": {}, "score": "59.71544"}
{"text": "View at Google Scholar . D. Beuche , \" Modeling and building software product lines with pure : variants , \" in Proceedings of the 12th International Software Product Line Conference ( SPLC'08 ) , p. 358 , Limerick , Ireland , September 2008 .", "label": "", "metadata": {}, "score": "59.83544"}
{"text": "View at Publisher \u00b7 View at Google Scholar .M. Clauss , \" Generic modeling using UML extensions for variability , \" in Proceedings of OOPSLA Workshop on Domain - specific Visual Languages , pp .11 - 18 , 2001 .", "label": "", "metadata": {}, "score": "59.875526"}
{"text": "Areas of interest and research include : domain specific languages , general purpose languages , program analysis , compilers , and Web technology .Walid Taha ( Rice University ) Cristiano Calcagno ( Imperial College London ) .Multi - stage programming is a new paradigm for developing generic programs that do not pay a runtime overhead .", "label": "", "metadata": {}, "score": "59.9553"}
{"text": "Expected audience : This tutorial is for experienced developers , architects , team leaders , and those responsible for developing or selecting a methodology for their software product development .Juha - Pekka Tolvanen is the CEO of MetaCase Consulting .He received his Ph.D. in 1998 from the University of Jyv\u00e4skyl\u00e4 , Finland .", "label": "", "metadata": {}, "score": "59.960297"}
{"text": "M. Sinnema , S. Deelstra , J. Nijhuis , and J. Bosch , \" COVAMOF : a framework for modeling variability in software product families , \" in Proceedings of the 3rd Software Product Line Conference ( SPLC'04 ) , pp .", "label": "", "metadata": {}, "score": "60.20239"}
{"text": "Central to the modeling of variability is the notion of feature , originally defined by Kang et al . as \" a prominent or distinctive user - visible aspect , quality or characteristic of a software system or systems \" [ 33 ] .", "label": "", "metadata": {}, "score": "60.486145"}
{"text": "Integration of configuration management ( CM ) tools into software development environments raises the need for CM models to interoperate through a unified CM model .We present the version set model , where versions , components , and aggregates are grouped into sets according to their features , using fe ... \" .", "label": "", "metadata": {}, "score": "60.50391"}
{"text": "To satisfy the research goal of also incorporating binding times , each relationship between ... . by Tijs Van Der Storm - In Markus Lumpe and Wim Vanderperren , editors , Software Composition , volume 4829 of LNCS , 2007 . \" ... Abstract .", "label": "", "metadata": {}, "score": "60.511932"}
{"text": "74 ] .It aims at supporting the modeling of variability for industrial SPL with a focus on automating the derivation of customer - specific products .It is a flexible and extensible decision - oriented variability modeling language .DOPLER was designed to support the modeling of both problem space variability ( stakeholder needs ) using decision models , and solution space variability ( architecture and components of technical solution ) using asset models and also to assure traceability between them .", "label": "", "metadata": {}, "score": "60.628754"}
{"text": "This information is established during the variability delimitation process .Table 2 ( from [ 52 ] ) recalls the stereotypes and extensions introduced by each method discussed above , while Table 3 presents which type of UML diagrams are supported .", "label": "", "metadata": {}, "score": "60.71521"}
{"text": "They led to one software system for certain domain experts and resulted in a CS seminar talk a fellow student and I held some years ago .This is the image from the Tangram book , which pretty much impressed me : .", "label": "", "metadata": {}, "score": "60.758522"}
{"text": "M. Clauss and I. Jena , \" Modeling variability with UML , \" in Proceedings of the GCSE Young Researchers Workshop , 2001 .T. Ziadi , L. H\u00e9lou\u00ebt , and J. M. J\u00e9z\u00e9quel , \" Modeling behaviors in product lines , \" in Proceedings of the International Workshop on Requirements Engineering for Product Lines ( REPL'02 ) , pp .", "label": "", "metadata": {}, "score": "60.915115"}
{"text": "This is done using a realization relation which defines how variation points in one abstraction layer realize variation points in a higher layer .Dependencies are associated with one or more variation points in the CVV and are used to restrict the selection of associated variants .", "label": "", "metadata": {}, "score": "61.040836"}
{"text": "From such releases traceable and incremental updates are derived .We have validated our solution with a prototype tool that computes and delivers updates for a component - based software system developed at CWI . ... source software .Another interesting direction concerns the notion of variability .", "label": "", "metadata": {}, "score": "61.10289"}
{"text": "[ 54 , 79 ] .CVL models specify both variabilities and their resolution .By executing a CVL model , a base SPL model is transformed into a specific product model as illustrated in Figure 7 .The Variability Model and the Resolution Models are defined in CVL while the Base Model and Resolved Models can be defined in any MOF - defined language ( see Figure 8 ) .", "label": "", "metadata": {}, "score": "61.11531"}
{"text": "There are two possible kinds of decisions : unrestricted and restricted .Furthermore , VManage supports collections of decisions ( instances of a decision or set of decisions ) .A metamodel that supports the approach and defines the general elements that form a decision model is available in [ 75 ] .", "label": "", "metadata": {}, "score": "61.14209"}
{"text": "Prerequisites : CS 2810 and CS 3528 .4362 SOFTWARE ENGINEERING II ( 3 credits )A continuation of the capstone experience begun in SE I. SE II continues the year - long project , including design and implementation , with structured walk - throughs of all phases , and module , integration , and system testing .", "label": "", "metadata": {}, "score": "61.178417"}
{"text": "Three different types of dependencies are possible : logical , numerical , and nominal , which express the validity of the dependency in different ways .CVV also explicitly defines dependency interactions which specify how two or more dependencies mutually interact .", "label": "", "metadata": {}, "score": "61.209114"}
{"text": "The feature diagram defines the product line variability , with each feature having an associated implementation .Concerning our classification , we make a clear distinction between assets and variability related concepts at metamodel level .This situation extends to model level : separate assets and variability models do coexist .", "label": "", "metadata": {}, "score": "61.214447"}
{"text": "Excel and Word on Steroids ?You all know it .Both are powerful graphical editors , which allowed domain experts from document writing and economics who have no programming skills to define and solve their problems .So coming from there the idea of intentional software seems like a logical next step .", "label": "", "metadata": {}, "score": "61.242577"}
{"text": "Typical PCs are boolean formulas over a set of variables , each variable corresponding to a feature from the FD .Complex PCs can be expressed using XPath .MEs are used to compute attributes of model elements .When a PC is not explicitly assigned to an element of a model template , an implicit presence condition ( IPC ) is assumed .", "label": "", "metadata": {}, "score": "61.461956"}
{"text": "143 - 168 , 1998 .View at Publisher \u00b7 View at Google Scholar .J. van Gurp , J. Bosch , and M. Svahnberg , \" On the notion of variability in software product lines , \" in Proceedings of the Working IEEE / IFIP Conference on Software Architecure ( WICSA'01 ) , pp .", "label": "", "metadata": {}, "score": "61.53305"}
{"text": "Additional constraints between SSFMs are expressed so that features F of SSFMs can not be selected at the same time .By defining such constraints between SIFM and SSFMs , Hartmann et al .[104 ] allow users to build a multiple SPL thanks to several suppliers ' SPLs .", "label": "", "metadata": {}, "score": "61.69108"}
{"text": "P. Trinidad , D. Benavides , A. Dur\u00e1n , A. Ruiz - Cort\u00e9s , and M. Toro , \" Automated error analysis for the agilization of feature modeling , \" Journal of Systems and Software , vol .81 , no .", "label": "", "metadata": {}, "score": "62.00073"}
{"text": "( Might not be offered every year ) .2260 LINUX SYSTEMS PROGRAMMING ( 3 credits ) Introduction to systems programming tools , including shell , awk , and perl programming .These tools are helpful in developing software in a Linux environment , doing system administration , and developing websites .", "label": "", "metadata": {}, "score": "62.048615"}
{"text": "These are models with variability , conforming to the variability extended metamodel .Ad Hoc Language Supporting Variability : Clafer .Contrary to previous approaches , Clafer [ 63 ] ( Class , Feature , and Reference ) is a standalone , lightweight modeling language with first - class support for feature modeling .", "label": "", "metadata": {}, "score": "62.128223"}
{"text": "A CSP is solved by finding states ( values for variables ) in which all constraints are satisfied .A problem described in terms of description logic is usually composed by a set of concepts ( i.e. , classes ) , a set of roles ( e.g. , properties or relationships ) , and set of individuals ( i.e. , instances ) .", "label": "", "metadata": {}, "score": "62.322678"}
{"text": "View at Google Scholar .P. Istoan , M\u00e9thodologie pour la d\u00e9rivation des mod\u00e8les comportementaux des produits dans les lignes de d\u00e9veloppement logiciel [ Ph.D. thesis ] , Universit\u00e9 de Rennes 1 , University of Luxembourg ( LASSY ) , 2013 . A. Classen , P. Heymans , and P. Y. Schobbens , \" What 's in a feature : a requirements engineering perspective , \" in Proceedings of 11th International Conference on Fundamental Approaches to Software Engineering , pp .", "label": "", "metadata": {}, "score": "62.46426"}
{"text": "Currently , Clafer relies on Alloy ( which uses SAT - solvers ) to do analyses .Separated Approaches .Techniques in this category have separate representations for the variability and for the assets model .Elements from the variability model relate to asset model elements by referencing them one way or another .", "label": "", "metadata": {}, "score": "62.522804"}
{"text": "I apologize if you receive multiple copies of this anouncement .In Cooperation with ACM SIGPLAN and SIGSOFT .Generative and component approaches have the potential to revolutionize . software development in a similar way as automation and components .revolutionized manufacturing .", "label": "", "metadata": {}, "score": "62.553032"}
{"text": "Behavioral product derivation is formalized using Reference Expressions for Sequence Diagrams ( RESD ) , that are expressions on basic Sequence Diagrams ( bSDs ) composed by interaction operators to provide the so - called Combined Sequence Diagrams of UML2 .A RESD is an expression of the form : . is the empty Sequence Diagram ( without any interaction ) .", "label": "", "metadata": {}, "score": "62.630135"}
{"text": "It offers an XML - based solution to formally specify a PL decision model and use it for automatic product derivation .Each decision from the decision model has a set of properties : name , description , type , default value , validity , and dependencies .", "label": "", "metadata": {}, "score": "62.64885"}
{"text": "4 , pp .252 - 268 , 2007 .View at Google Scholar .L. Chen , M. Ali Babar , and N. Ali , \" Variability management in software product lines : a systematic review , \" in Software Product Line Conference , pp .", "label": "", "metadata": {}, "score": "62.736534"}
{"text": "Topics include line and curve drawing , windowing , clipping , shading , geometric transformations and 3-dimensional viewing .Prerequisites : MATH 2171 or MATH 2471 , and CS 2322 .( Might not be offered every year ) .", "label": "", "metadata": {}, "score": "62.921562"}
{"text": "Includes a two - hour lab .Prerequisite : CS 2321 .2810 COMPUTER ORGANIZATION AND ASSEMBLY LANGUAGE PROGRAMMING ( 3 credits )An introduction to the register level architecture of a modern computer and programming with an assembly language for that processor .", "label": "", "metadata": {}, "score": "63.925045"}
{"text": "To this end CVL introduces a basic constraint language , a restricted subset of The Object Constraint Language ( OCL ) , that is , amenable to formal processing and practical constraint solving .Resolutions VSpecs are resolved by VSpec resolutions , thus three kinds of VSpec resolutions mirror the three kinds of VSpecs .", "label": "", "metadata": {}, "score": "63.933975"}
{"text": "[ 106 ] provide view mechanisms to decompose a large feature model .However they do not propose a comprehensive solution when dealing with cross - tree constraints .They also consider that the root feature should always be included , which is a limitation not imposed in [ 102 ] .", "label": "", "metadata": {}, "score": "64.029335"}
{"text": "Variability in time , referring to the existence of different versions of an artifact that are valid at different times ; Variability in space , referring to the existence of an artifact in different shapes at the same time .Variability in time is primarily concerned with managing program variation over time and includes revision control system and the larger field of software configuration management [ 25 ] .", "label": "", "metadata": {}, "score": "64.23172"}
{"text": "the prior conference on Generative and Component - Based Software Engineering .( GCSE ) and the Workshop on Semantics , Applications , and Implementation of .Program Generation ( SAIG ) .The goal of GPCE is to provide a meeting place .", "label": "", "metadata": {}, "score": "65.04533"}
{"text": "This deadline is firm .Simultaneous . submission to other venues and submission of previously published material . are not allowed .Electronic submission will be required , except by special .arrangement with the program chairs .Practitioner Reports .GPCE ' 03 will feature a track geared towards industry and practice , . where practitioners will present their experience and insight in applying . generative and component - based technologies .", "label": "", "metadata": {}, "score": "65.11041"}
{"text": "This course builds on topics from CS 2270 .Students learn server - side scripting , database connectivity , and dynamic web - page updating .Web development frameworks are also studied .Prerequisite : CS 2270 .3350 EVENT - DRIVEN PROGRAMMING IN A WINDOWS ENVIRONMENT ( 3 credits ) Uses a language suitable for creating event - driven programs while focusing on methodology suitable for developing event handlers in windows - oriented programs .", "label": "", "metadata": {}, "score": "65.19046"}
{"text": "Check with department for semester when these courses are offered .Read each course description for prerequisites .1107 INTRODUCTION TO COMPUTERS ( 3 credits )An examination of the development of computing devices , modern computing practices , components of a computing system , common application software , and uses of computers in society .", "label": "", "metadata": {}, "score": "65.21503"}
{"text": "Modeling VPs , Vs and how they are connected is just a first step of the OVM process .The variability model can be related to software artifacts specified by other models .Pohl et al . document these relations using traceability links between the variability model and the other development artifacts .", "label": "", "metadata": {}, "score": "65.261856"}
{"text": "G7 ( GPCE ) : Generative Software Development .Wednesday , Oct 25 , from 13:30 to 17:00 .Product - line engineering seeks to exploit the commonalities among systems from a given problem domain while managing the variabilities among them in a systematic way .", "label": "", "metadata": {}, "score": "65.35464"}
{"text": "Contributions The contributions of this paper can be summarized as follows : ... . by Gerco Ballintijn - in proceedings of the IEEE International Conference on Software Maintenance , ICSM2005 , Industrial Applications track , 2005 . \" ...This paper describes a case study of the release management of CS - ECIS , a health - care information system developed by the Dutch software vendor ChipSoft .", "label": "", "metadata": {}, "score": "65.36479"}
{"text": "Acknowledgments .The authors wish to thank Clementine Nebut , Tewfik Ziadi , Paul Istoan , and Mathieu Acher for so many fruitful discussions on the topic of Model - Driven Engineering for Software Product Lines .This paper , largely based on common work with them , could not have been written without all their contributions to the field .", "label": "", "metadata": {}, "score": "65.56359"}
{"text": "A variation point is an item that defines one step in the process of how the base model is modified to reach the specified product .This module is the part of CVL that impacts the base model .The variation points refer to base model elements via base model handles .", "label": "", "metadata": {}, "score": "65.64614"}
{"text": "In addition , the PL consists of the software products developed using the mentioned reusable assets \" .In spite of the similarities , these definitions provide different perspectives of the concept : market - driven , as seen by Northrop , and technology - oriented for Bosch .", "label": "", "metadata": {}, "score": "66.17642"}
{"text": "Note : This course is not intended for Computer Science majors or minors .Liberal Education Category 9 .1150 CAMPUS COMPUTING ( 2 credits ) Introduction to and overview of the campus network , the information and resources accessible through the network , and use of these resources .", "label": "", "metadata": {}, "score": "66.34556"}
{"text": "Intermediate : Basic knowledge of object - oriented programming and modeling are required .Krzysztof Czarnecki , University of Waterloo : Krzysztof Czarnecki is an Assistant Professor at the University of Waterloo , Canada .Before coming to Waterloo , he spent 8 years at DaimlerChrysler Research working on the practical applications of generative programming .", "label": "", "metadata": {}, "score": "66.4509"}
{"text": "Walid Taha is an Assistant Professor at Rice University , USA .He played a lead role in development of both the multi - stage programming paradigm and the MetaOCaml implementation .Cristiano Calcagno is a Researcher at Queen Mary University , UK .", "label": "", "metadata": {}, "score": "66.59738"}
{"text": "In their basic form , feature models contain mandatory / optional features , feature groups , and implies and excludes relationships .It is known that such feature models can be translated into propositional formulas , which enables the analysis and configuration using existing logicbased tools .", "label": "", "metadata": {}, "score": "66.65672"}
{"text": "Scatter provides automatic variant selection based on configuration and resource constraints and also ensures that variant selection is optimal with regard to a configurable cost function . vered and dealt with efficiently and correctly .One common capability lacking in each of these ... . by Jules White , Doulas C. Schmidt , Krzysztof Czarnecki - In EDOC 2007 , 2007 . \" ...", "label": "", "metadata": {}, "score": "66.7652"}
{"text": "The extensions proposed are based on the notions of variation points and variants : variation points help locate variability ; each variant denotes a concrete way to realize that variability .Variation points and variants are explicitly marked with the stereotypes . stereotype can be used together with several tagged values to specify the binding time ( development , installation , or runtime ) and the multiplicity of variants associated to a variation point .", "label": "", "metadata": {}, "score": "66.80065"}
{"text": ".. to the application of existing logic - based tools to support feature configuration and feature model debugging .For example , Batory [ 4 ] explores the use of SAT solvers for that purpose . by Jules White , Douglas C. Schmidt - in : Proceedings of the 11th Annual Software Product Line Conference ( SPLC , 2007 . \" ...", "label": "", "metadata": {}, "score": "67.46727"}
{"text": "To represent SPL variability in the Use Case model view , Use Cases are stereotyped as either kernel , optional or variant , while extend and include relations allow a Use Case to extend or include another Use Case at a variation point .", "label": "", "metadata": {}, "score": "67.58545"}
{"text": "It adds binding times , set - typed relations , selector types , mapping selector types to specific notations , using multiplicity to allow the selection of subsets of possible resolutions , clear separation of constraints on the presence and value of decisions .", "label": "", "metadata": {}, "score": "68.08858"}
{"text": "141 - 145 , Polytech , Universit\u00e9 Lille 1 , Service Reprographie de Polytech , Lille , France , 2011 .View at Google Scholar .J. D. McGregor , \" Building reusable testing assets for a software product line , \" in Proceedings of the 12th International Software Product Line Conference ( SPLC'08 ) , p. 378 , Limerick , UK , September 2006 .", "label": "", "metadata": {}, "score": "68.14794"}
{"text": "Visibility conditions specify when a particular decision becomes relevant to the user and thus define hierarchical dependencies between decisions .Decisions are usually not independent of each other and can not be made in isolation .Dependencies between them can be specified using decision effects .", "label": "", "metadata": {}, "score": "68.42057"}
{"text": "The GPCE ' 03 exhibits will be held together with the exhibits of NetObjectDays'03 , . one of the largest main - stream software development conferences in Germany .Therefore , this will be an excellent forum to reach potential customers with . news and demonstrations of your latest products , publications or services .", "label": "", "metadata": {}, "score": "68.52892"}
{"text": "The AMM is actually the metamodel of the base language on which the common variability language is applied .At model level , variability model elements relate to assets model elements by referencing and using substitutions .We discuss in more detail the Common Variability Language ( CVL ) as proposed for standardization at the OMG .", "label": "", "metadata": {}, "score": "68.5845"}
{"text": "Each VSPpec resolution resolves exactly one VSpec of the appropriate kind .In the absence of classifiers each VSpec is resolved by at most one VSpec resolution .Compositional Layer The abstraction and realization modules of the foundation layer provide constructs for specifying logically organized variation points on a base model but do not provide means for grouping such specifications into units configurable as wholes .", "label": "", "metadata": {}, "score": "68.65991"}
{"text": "Initially , the resolved model is equal to the base model .Then the execution of each statement of the variability model adds new constraints on the solution space , hence progressively reducing its cardinality , eventually down to 1 to get a fully resolved model , or to 0 if there are inconsistencies in the CVL model .", "label": "", "metadata": {}, "score": "68.79378"}
{"text": "Thanks to the co - location with NetObjectDays , one of the largest .main - stream software development conferences in Germany , the GPCE'03 . presentations are expected to have a high attendance by industry .practitioners , in addition to regular conference attendees .", "label": "", "metadata": {}, "score": "69.34676"}
{"text": "Program Committee Members ( near - final ) : .Giuseppe Attardi , University of Pisa , Italy .Don Batory , University of Texas , USA .Ira Baxter , Semantic Designs , USA .Shigeru Chiba , Tokyo Institute of Technology , Japan .", "label": "", "metadata": {}, "score": "69.459175"}
{"text": "Jason uses classification and a firstorder logic language to allow the explicit definition of validit ... . by Abteilung Softwaretechnologie , Andreas Zeller , Andreas Zeller , Gregor Snelting , Gregor Snelting - In Proceedings 5th European Software Engineering Conference , LNCS 989 , 1995 . \" ...", "label": "", "metadata": {}, "score": "69.677475"}
{"text": "102 - 122 , Springer , Berlin , Germany , 2011 .View at Publisher \u00b7 View at Google Scholar \u00b7 View at Scopus .G. Perrouin , \" Coherent integration of variability mechanisms at the requirements elicitation and analysis levels , \" in Proceedingd of the Workshop on Managing Variability for Software Product Lines : Working with Variability Mechanisms at 10th Software Product Line Conference , August 2006 .", "label": "", "metadata": {}, "score": "69.71068"}
{"text": "Posters .Posters at GPCE provide an excellent forum for authors to present their . work in an informal and interactive setting .Posters are ideal for presenting .speculative , late - breaking results or for giving an introduction to interesting , . innovative work .", "label": "", "metadata": {}, "score": "69.84163"}
{"text": "The optional expression ( OpE ) is specified in the following form : .The first step towards product behaviors derivation is to derive the corresponding product expressions from PL - RESD .Derivation needs some decisions ( or choices ) associated to these variability expressions to be made to produce a product specific RESD .", "label": "", "metadata": {}, "score": "70.05737"}
{"text": "Workshop on Semantics , Applications , and Implementation of Program .Generation ( SAIG ) .The goal of GPCE is to provide a meeting place for . researchers and practitioners interested in cutting edge approaches to . software development .We aim to foster further cross - fertilization .", "label": "", "metadata": {}, "score": "70.88562"}
{"text": "Includes a two - hour lab .Prerequisite : CS 1309 and MATH 1170 or MATH 1470 or higher .2322 COMPUTER SCIENCE II ( 4 credits ) Topics include pointers , dynamic allocation , recursion , and structured data types such as objects , strings , lists , stacks , queues , templates , containers , binary trees , and hash tables .", "label": "", "metadata": {}, "score": "70.89061"}
{"text": "Last year , he completed his latest book \" Executable UML : A Foundation for Model - Driven Architecture . \"He has almost finished his latest book \" MDA Distilled , \" available from Addison Wesley in late 2003 .In his copious spare time , he is a member of the IEEE Software Industrial Advisory Board .", "label": "", "metadata": {}, "score": "71.24309"}
{"text": "3360 OBJECT - ORIENTED SOFTWARE DEVELOPMENT ( 3 credits ) Techniques used in object - oriented software development .Key components of these techniques include design patterns , abstraction , encapsulation , modularity , message passing , polymorphism , inheritance , and incremental software development .", "label": "", "metadata": {}, "score": "71.30196"}
{"text": "This insight would enable us to pro - po ... \" .This paper describes a case study of the release management of CS - ECIS , a health - care information system developed by the Dutch software vendor ChipSoft .We performed this case study to gain insight into the release management activities of a real - life company .", "label": "", "metadata": {}, "score": "71.391045"}
{"text": "3507 FILE PROCESSING AND DATABASE SYSTEMS ( 3 credits )An examination and analysis of algorithms and file structures used by computer systems including sequential , direct ( random ) access , and keyed ( indexed ) files .Covers the creation , deletion , modification , and maintenance of files and their use in database systems .", "label": "", "metadata": {}, "score": "71.62012"}
{"text": "Boolean operators inspired from feature diagrams are used to actually represent variability : and , xor , or , opt .The cardinality operator Vp(i , j ) provides a greater degree of flexibility .Operators can either be homogeneous ( apply only to elements of the same type ) or heterogeneous ( apply to elements of different types ) .", "label": "", "metadata": {}, "score": "71.71808"}
{"text": "Variability is represented using boolean operators .All classical feature diagram operators are provided : or , and , xor , opt , and card .They are subtypes of the abstract Operator metaclass .Decomposition edges represent relations between features .", "label": "", "metadata": {}, "score": "71.93536"}
{"text": "The central concept in this module is that of a variability specification ( abbreviated as VSpec ) , which is an indication of variability in the base model .VSpec are similar to features in feature modeling , to the point that the concrete syntax of the variability abstraction is similar to a feature diagram where the variability specifications are shown as trees .", "label": "", "metadata": {}, "score": "72.76126"}
{"text": "( 1 ) A choice is a VSpec whose resolution requires a yes / no decision .Nothing is known about the nature of the choice in the level of a VSpec tree , beyond what is suggested by its name .", "label": "", "metadata": {}, "score": "73.00542"}
{"text": "First , the root feature SIFM has two subfeatures : the feature Suppliers and the common root feature of SSFMs .Then , the feature Suppliers contains as many subfeatures as there are suppliers and those features are mutually exclusive ( only one supplier must be selected ) .", "label": "", "metadata": {}, "score": "73.069"}
{"text": "// Crippled version for crippled compilers : .// see libs / utility / call_traits.htm . 01stOctober 2000 : .Fixed call_traits on VC6 , using \" poor man 's partial specialisation \" , . using ideas taken from \" Generative programming \" by Krzysztof Czarnecki .", "label": "", "metadata": {}, "score": "73.69037"}
{"text": "Computer - assisted instruction , computer supplemented instruction , computer - managed instruction , and management information systems .Note : Open only to students in a teacher education program and others by consent of instructor .Prerequisite : CS 1107 or equivalent .", "label": "", "metadata": {}, "score": "73.967285"}
{"text": "4840 OPERATING SYSTEMS ( 3 credits ) Fundamentals of operating system design with emphasis on at least one modern operating system .Topics include scheduling , memory management , paging , file management , and mutual exclusion .Required work will include programming investigations .", "label": "", "metadata": {}, "score": "74.13998"}
{"text": "This is an open access article distributed under the Creative Commons Attribution License , which permits unrestricted use , distribution , and reproduction in any medium , provided the original work is properly cited .Abstract .Modeling variability in the context of software product - lines has been around for about 25 years in the research community .", "label": "", "metadata": {}, "score": "75.07938"}
{"text": "// sorry call_traits is completely non - functional .// blame your broken compiler : . struct call_traits .typedef T value_type ; . typedef T & reference ; . typedef const T & const_reference ; . # endif // member templates .", "label": "", "metadata": {}, "score": "75.25334"}
{"text": "The configurable unit module provides the constructs that are needed for the modularization and encapsulation of variability as configurable units , that is , component - like structures that may be configured through an exposed variability interface .Let us now detail the Foundation Layer , which is made of the variability realization model , the variability abstraction model , and Constraints and Resolutions , as shown in Figure 8 .", "label": "", "metadata": {}, "score": "75.3354"}
{"text": "Dependency relations between variants are also supported .These extensions are applied to UML class and Use Case diagrams .For each stereotype , the set of UML relations on which it can be applied is provided .In addition to stereotypes , UML notes are used to support variability representation .", "label": "", "metadata": {}, "score": "75.33766"}
{"text": "Prerequisite : CS 4361 .4390 SOCIAL , ETHICAL , AND PROFESSIONAL ISSUES IN COMPUTING ( 2 credits ) Features topics related to standards for computing professionals .Prerequisite or Corequisite : At least one CS course numbered 3000 or higher .", "label": "", "metadata": {}, "score": "75.36705"}
{"text": "Prerequisite : Programming experience at the level of CS 2207 or higher .( Might not be offered every year ) .2270 INTRODUCTION TO WEB PROGRAMMING ( 3 credits )This course expands on basic knowledge of markup languages and web programming languages .", "label": "", "metadata": {}, "score": "75.37113"}
{"text": "conference website for details about format and submission .Contact the . relevant chair for more information .Important Dates .Technical papers .Submissions of proposals .Conference .Organization .General chair .Program committee chairs .Program committee .", "label": "", "metadata": {}, "score": "75.54194"}
{"text": "required , except by special arrangement with the program chairs .Authors . will be notified of acceptance by May 17 , 2004 .Final versions of . accepted papers must be submitted by July 25 , 2004 .Accepted papers will appear in the conference proceedings published in .", "label": "", "metadata": {}, "score": "75.73154"}
{"text": "It also has a unique name used to clearly associate it to its variants .Concerning variants , it is possible to capture dependencies between them using the . stereotype .Presence conditions , similar with those used for variants , and tagged values for the binding time , can also be used with optional elements .", "label": "", "metadata": {}, "score": "75.86248"}
{"text": "For more details about .submissions , please contact the YRW Chairs Isabel John ( john@iese.fhg.de ) .and Matthias Clauss ( Matthias.Clauss@gmx.de ) .Tutorials .We invite proposals for high - quality tutorials in all areas of . generative programming and component - based development .", "label": "", "metadata": {}, "score": "76.23332"}
{"text": "A variability classifier ( abbreviated as VClassifier ) is a kind of VSpec whose resolution means creating instances and then providing per - instance resolutions for the VSpecs in its subtree .Like choices and variables , it is unknown at this level what the effect of each instance will be .", "label": "", "metadata": {}, "score": "76.368286"}
{"text": "Variability is represented as variation points and dependencies and provides means to explicitly model simple and complex relations between dependencies .Variation points in the CVV reflect the variation points of the product family and are associated with product family artifacts .", "label": "", "metadata": {}, "score": "76.38984"}
{"text": "ConIPF Variability Modeling Framework ( COVAMOF ) .The COVAMOF method [ 70 , 71 ] is yet another orthogonal variability method that differs in the type of variability model , that is , used .COVAMOF was hence designed to uniformly model variability in all abstraction layers of a SPL .", "label": "", "metadata": {}, "score": "77.63808"}
{"text": "Premkumar Devanbu , University of California , Davis , USA .Ulrich W. Eisenecker , University of Applied Sciences Kaiserslautern , Germany .Robert Glueck , Waseda University , Japan .Trevor Jim , AT&T Labs Research , USA .Gregor Kiczales , University of British Columbia , Canada .", "label": "", "metadata": {}, "score": "78.16199"}
{"text": "Additional topics may include applets , markup languages , multi - threaded programming , and rudimentary network programming .Prerequisite : CS 2322 or equivalent .( Might not be offered every year ) .3420 EDUCATIONAL APPLICATIONS OF COMPUTERS ( 3 credits )", "label": "", "metadata": {}, "score": "78.42929"}
{"text": "He has almost finished his latest book \" MDA Distilled , \" available from Addison Wesley in late 2003 .In his copious spare time , he is a member of the IEEE Software Industrial Advisory Board .He was a Guest Editor for a special issue on Model - Driven Development published September 2003 .", "label": "", "metadata": {}, "score": "78.61122"}
{"text": "Tutorial Chair .Demonstrations Chair .Contact .Model - Driven Engineering for Software Product Lines .Institut de Recherche en Informatique et Syst\u00e8mes Al\u00e9atoire ( IRISA ) , University of Rennes 1 , 35042 Rennes , France .Received 24 September 2012 ; Accepted 14 October 2012 .", "label": "", "metadata": {}, "score": "79.08165"}
{"text": "[54 ] use two transformations to derive products .A Resolution Transformation takes a variation model and a resolution model as input and produces a resolved variation model .Then a Variability Transformation takes the resolved variation model and a domain - specific model as input and produces a new , resolved domain - specific base model .", "label": "", "metadata": {}, "score": "79.1868"}
{"text": "3560 DATA COMMUNICATIONS AND NETWORKS ( 3 credits ) Principles of data communications as applied to modern computer networks .Prerequisite : CS 2810 .( Might not be offered every year ) .3610 INTRODUCTION TO OPERATIONS RESEARCH ( 3 credits )", "label": "", "metadata": {}, "score": "79.485146"}
{"text": "Prerequisite : CS 3528 .4298 COMPILER CONSTRUCTION ( 3 credits )The theory , design , and construction of a compiler .Prerequisite : CS 3528 .( Might not be offered every year ) .4361 SOFTWARE ENGINEERING I ( 3 credits )", "label": "", "metadata": {}, "score": "79.63443"}
{"text": "( Might not be offered every year ) .3528 DATA STRUCTURES AND ALGORITHMS ( 3 credits ) Study of advanced abstract information storage structures , including priority queues , binary trees , generalized trees , and graphs .Study of algorithm development techniques , including divide and conquer , greedy algorithms , and dynamic programming .", "label": "", "metadata": {}, "score": "79.70244"}
{"text": "Prerequisites : MATH 2172 or MATH 2472 , and CS 2321 .( Might not be offered every year ) .3627 THEORY OF COMPUTATION ( 3 credits ) Explores the theoretic roots and limits of computing .Prerequisites : CS 2322 and MATH 3210 .", "label": "", "metadata": {}, "score": "80.76833"}
{"text": "the art .The program committee will evaluate each contributed paper based .on its relevance , significance , clarity and originality .The program .committee is happy to advise on the appropriateness of a particular . subject .Authors are invited to submit papers of at most 12 pages in ACM proceedings .", "label": "", "metadata": {}, "score": "81.41228"}
{"text": "Prerequisites : MATH 1170 and CS 1107 or equivalent .( Might not be offered every year ) .2229 COMPUTER PROGRAMMING : C / C++ ( 3 credits ) Fundamental concepts of computer programming using ANSI Standard C and a brief introduction to C++ .", "label": "", "metadata": {}, "score": "81.5861"}
{"text": "A variation point also contains a description , some information about its state , the rationale of the binding , the realization mechanism , and the associated binding time .The state can be either opened ( new variants can be added ) or closed ( not possible to add new variants ) .", "label": "", "metadata": {}, "score": "81.74692"}
{"text": "Boolean operators exclusive alternative ( XOR ) , inclusive alternative ( OR ) , or inclusive ( AND ) are used to select one , several , or all the features from a feature group .Dependencies between features can be modeled using textual constraints : requires ( presence of a feature imposes the presence of another ) , mutex ( presence of a feature automatically excludes another ) .", "label": "", "metadata": {}, "score": "82.11813"}
{"text": "Variability can be expressed in several ways .Presence or absence of a feature from a product is modeled using mandatory or optional features .Features are graphically represented as rectangles while some graphical elements ( e.g. , unfilled circle ) are used to describe the variability ( e.g. , a feature may be optional ) .", "label": "", "metadata": {}, "score": "82.37302"}
{"text": "Notification of acceptance for .Technical papers : May 25 , 2003 .Workshop proposals : Apr 20 , 2003 .Practitioner reports : Jun 1 , 2003 .Tutorials proposals : Jun 1 , 2003 .Demonstration proposals : Jun 1 , 2003 .", "label": "", "metadata": {}, "score": "82.51436"}
{"text": "VSpecs are organized in a Tree Structure .( ii )Each choice has a field isImpliedByParent which , when True , indicates that if its parent is resolved positively then it must be decided positively .A resolution for a nonchoice VSpec is always considered positive for this definition .", "label": "", "metadata": {}, "score": "83.45789"}
{"text": "the conference , please refer to the web site for submission instructions .GPCE'03 Best Contribution Awards .The GPCE'03 audience will elect the best contributions in the following categories : .Organizing Committee .General Chair : .( chair03@gpce.org ) .", "label": "", "metadata": {}, "score": "83.51764"}
{"text": "Paper Submission .Authors are invited to submit a title and abstract by March 12 , 2004 , . and a full paper by March 19 , 2004 .These deadlines are firm .Simultaneous submission to other venues and submission of previously . published material are not allowed .", "label": "", "metadata": {}, "score": "83.531784"}
{"text": "( iv ) Opaque variation point is an indication that a domain specific ( user defined ) variability is associated with the object(s ) where the semantic of domain specific variability is specified explicitly using a suitable transformation language .Variability Abstraction The variability abstraction module provides constructs for specifying and resolving variability in an abstract level , that is , without specifying the exact nature of the variability w.r.t . the base model .", "label": "", "metadata": {}, "score": "83.92439"}
{"text": "Program Committee Chairs : . ( pc03@gpce.org ) .Frank Pfenning , Carnegie Mellon University , USA .Yannis Smaragdakis , Georgia Institute of Technology , USA .Workshop Chair : .( workshops03@gpce.org ) .Kasper Osterbye , IT University of Copenhagen , Denmark .", "label": "", "metadata": {}, "score": "84.215454"}
{"text": "Technical paper submission : Apr 6 , 2003 .Workshop proposal submission : Apr 6 , 2003 .Practitioner report submission : May 18 , 2003 .Tutorials proposal submission : May 18 , 2003 .Demonstration proposal submission : May 18 , 2003 .", "label": "", "metadata": {}, "score": "85.423615"}
{"text": "The central concepts used in OVM are variation points ( VP ) and variants ( V ) .A VP documents a variable item and a V its possible instances .Both VPs and Vs can be either optional or mandatory .", "label": "", "metadata": {}, "score": "85.60037"}
{"text": "An optional variant may be part of at most one alternative group .To determine how many Vs may be chosen in an alternative choice , the cardinality notation [ min . max ] is used .OVM also supports the documentation of Vs belonging to different VPs .", "label": "", "metadata": {}, "score": "86.00403"}
{"text": "( industrial03@gpce.org ) .Ulrich W. Eisenecker , University of Applied Sciences Kaiserslautern , Germany .Publicity Chair : .( publicity03@gpce.org ) .Akos Ledeczi , Vanderbilt University , USA .Young Researchers Workshop Chairs .Isabel John , Fraunhofer IESE , Germany ( john@iese.fhg.de ) .", "label": "", "metadata": {}, "score": "86.86042"}
{"text": "Camera ready copy : Jun 22 , 2003 .Technical Papers .The GPCE'03 conference invites high quality papers reporting research .results and/or experience related to generative programming and component .engineering .We seek papers both in software engineering and in programming .", "label": "", "metadata": {}, "score": "87.05248"}
{"text": "typedef T value_type ; . typedef T reference ; . typedef T const_reference ; . struct call_traits_chooser . struct rebind . struct rebind . struct rebind . struct call_traits_sizeof_chooser2 . struct small_rebind . struct small_rebind . struct rebind .// namespace detail . struct call_traits .", "label": "", "metadata": {}, "score": "89.171005"}
{"text": "Julia Lawall , DIKU , University of Copenhagen , Denmark .Eugenio Moggi , DISI , University of Genova , Italy .Jim Neighbors , Bayfront Technologies , USA .Calton Pu , Georgia Tech , USA .Olin Shivers , Georgia Tech , USA .", "label": "", "metadata": {}, "score": "90.79419"}
{"text": "View at Google Scholar .European Software Engineering Institute Spain and IKV++ Technologies AG Germany , \" Master : model - driven architecture instrumentation , enhancement and renement , \" Tech .Rep. IST-2001 - 34600 , IST , 2002 .View at Google Scholar .", "label": "", "metadata": {}, "score": "92.35967"}
{"text": "With Orthogonal Variability Modeling , the assets model and the variability model are kept separate .The variability model relates to different parts of the assets model using artifact dependencies .The differentiating factor from the previous category is the type of variability model used : an orthogonal variability model ( OVM ) .", "label": "", "metadata": {}, "score": "92.89481"}
{"text": "2120 PERSONAL COMPUTING SYSTEMS ( 3 credits )Covers operating systems , software tools , and essential application software for one or more single - user computing systems .Prerequisite : CS 1107 or equivalent .( Might not be offered every year ) .", "label": "", "metadata": {}, "score": "93.534386"}
{"text": "Peter Thiemann , University of Freiburg , Germany .Eelco Visser , Utrecht University , The Netherlands This needs one or more development cycles and might result in systems which the software engineers are more comfortable with than the domain experts are .", "label": "", "metadata": {}, "score": "93.89461"}
{"text": "Prerequisite or Corequisite : CS 2322 .3160 MICROCOMPUTER SYSTEMS ( 3 credits )A survey of current microcomputer systems including both software and hardware components of small computers , programming , and special features .Prerequisite : CS 2321 .( Might not be offered every year ) .", "label": "", "metadata": {}, "score": "97.8049"}
{"text": "# define BOOST_OB_CALL_TRAITS_HPP . # ifndef BOOST_CONFIG_HPP . # endif .# ifndef BOOST_ARITHMETIC_TYPE_TRAITS_HPP . # endif .# ifndef BOOST_COMPOSITE_TYPE_TRAITS_HPP . # endif .# ifdef BOOST_MSVC6_MEMBER_TEMPLATES .// use member templates to emulate .// partial specialisation : . struct standard_call_traits . typedef T value_type ; . typedef T & reference ; . typedef const T & const_reference ; . struct simple_call_traits .", "label": "", "metadata": {}, "score": "98.00982"}
{"text": "What I missed until now was this announcement last year : .Thus they seem to have a protype running at a Dutch provider of pension funds .The funny bit is that the domain specific notation those pension fund experts prefer is \" Excel sheets \" .", "label": "", "metadata": {}, "score": "99.47693"}
{"text": "( tutorials03@gpce.org ) .Gerd Frick , FZI , Karlsruhe , Germany .Demonstration Chair : .( demos03@gpce.org ) .Markus Voelter , independent consultant , Germany .Poster Chair : .( posters03@gpce.org ) .Jorn Bettin , SoftMetaWare , New Zealand .", "label": "", "metadata": {}, "score": "100.5243"}
