{"text": "There are no system wide dependencies , no dependencies are shared between different apps , and the dependency tree is flat .Edit : Quoting @jlafay 's comment : . ...it 's dependency structure remains more flat which is better suited for web pages due to a max length for url 's .", "label": "", "metadata": {}, "score": "46.55717"}
{"text": "If you do n't have edit rights to the site , feel free to add comments at the bottom of the page with additional recipes .Dependency Inversion .Dependency inversion is the most fundamental approach to breaking dependencies .Sometimes you 'll find that the feature you want to extract has a fairly big dependency on a fairly big chunk of code .", "label": "", "metadata": {}, "score": "50.460358"}
{"text": "The parameter might be , for example , range or sensitivity selection .This is plainly incorrect .It illustrates that the basic general rules set forth above are insufficient to properly order and interleave the tasks of the data flow represented by diagram 110 .", "label": "", "metadata": {}, "score": "51.9263"}
{"text": "TaskScheduler .That is , there is no limit to the number of tasks that can be outstanding on a given engine .This greatly benefits the latency of execution , because network traffic can be hidden behind computation .However , this means that workload is assigned without knowledge of how long each task might take , and can result in poor load - balancing , particularly for submitting a collection of heterogeneous tasks all at once .", "label": "", "metadata": {}, "score": "52.00468"}
{"text": "It is important to note that the pure ZeroMQ scheduler does not support dependencies , and you will see errors or warnings if you try to use dependencies with the pure scheduler .Functional dependencies are used to determine whether a given engine is capable of running a particular task .", "label": "", "metadata": {}, "score": "52.04641"}
{"text": "It is important to note that the pure ZeroMQ scheduler does not support dependencies , and you will see errors or warnings if you try to use dependencies with the pure scheduler .Functional dependencies are used to determine whether a given engine is capable of running a particular task .", "label": "", "metadata": {}, "score": "52.04641"}
{"text": "Sometimes you want to restrict the time and/or location to run a given task as a function of the time and/or location of other tasks .This is implemented via a subclass of set , called a Dependency .A Dependency is just a set of msg_ids corresponding to tasks , and a few attributes to guide how to decide when the Dependency has been met .", "label": "", "metadata": {}, "score": "52.060772"}
{"text": "Sometimes you want to restrict the time and/or location to run a given task as a function of the time and/or location of other tasks .This is implemented via a subclass of set , called a Dependency .A Dependency is just a set of msg_ids corresponding to tasks , and a few attributes to guide how to decide when the Dependency has been met .", "label": "", "metadata": {}, "score": "52.060772"}
{"text": "3 .GENERAL RULES FOR ORDERING TASKS .Ordering the tasks with respect to an individual resource is determined according to the following general internal task - positioning rules : .Set up precedes Function ; .Function precedes Terminate ; and .", "label": "", "metadata": {}, "score": "52.227177"}
{"text": "The first alternative is appropriate when the //content dependencies are not significant ( e.g. , dependencies on content::BrowserThread that can be replaced by having SingleThreadedTaskRunners injected into the component ) .The second alternative is necessary when the feature has significant //content dependencies , e.g. it interacts heavily with content::WebContents .", "label": "", "metadata": {}, "score": "52.654995"}
{"text": "In [17 ] : with lview . apply ( f3 )In [ 18 ] : with lview . apply ( f3 ) .The schedulers do perform some analysis on graph dependencies to determine whether they are not possible to be met .", "label": "", "metadata": {}, "score": "52.81413"}
{"text": "In [17 ] : with lview . apply ( f3 )In [ 18 ] : with lview . apply ( f3 ) .The schedulers do perform some analysis on graph dependencies to determine whether they are not possible to be met .", "label": "", "metadata": {}, "score": "52.81413"}
{"text": "It might e.g. be an object that has some internal state machine that the component needs to use , and also initiates or participates in a bunch of UI interactions .It 's worth noting that the programming interfaces that result from the types of dependency - breaking operations listed above are not always optimal , in fact they are often not as nice as what would have resulted from a feature being written as a component from the start .", "label": "", "metadata": {}, "score": "53.006622"}
{"text": "You may also want to set a time - limit for how long the scheduler should wait before a task 's dependencies are met .This is done via a timeout , which defaults to 0 , which indicates that the task should never timeout .", "label": "", "metadata": {}, "score": "53.00985"}
{"text": "You may also want to set a time - limit for how long the scheduler should wait before a task 's dependencies are met .This is done via a timeout , which defaults to 0 , which indicates that the task should never timeout .", "label": "", "metadata": {}, "score": "53.00985"}
{"text": "Note .Dependencies only work within the task scheduler .You can not instruct a load - balanced task to run after a job submitted via the MUX interface .In these cases , you can skip using Dependency objects , and just pass msg_ids or AsyncResult objects as the follow and after keywords to client.apply ( ) : .", "label": "", "metadata": {}, "score": "53.079605"}
{"text": "Note .Dependencies only work within the task scheduler .You can not instruct a load - balanced task to run after a job submitted via the MUX interface .In these cases , you can skip using Dependency objects , and just pass msg_ids or AsyncResult objects as the follow and after keywords to client.apply ( ) : .", "label": "", "metadata": {}, "score": "53.079605"}
{"text": "19 , it shows a network indicating the dependencies among the tasks of the data flow diagram of FIG .15 , including the additional dependencies , represented by bold lines , resulting from application of ordering rules 21 and 22 where indicated .", "label": "", "metadata": {}, "score": "53.64076"}
{"text": "To illustrate , the first general external rule set forth above is , \" Downstream block 's Set - up precedes upstream blocks ' Function .\" Referring to FIG .3 , B is the downstream block and A is the upstream block .", "label": "", "metadata": {}, "score": "55.711113"}
{"text": "The dependency line 185 interconnecting these two blocks in the network is labeled \" R14 , \" signifying the rule ( Rule No . 14 ) listed in Appendix A which requires this dependency .Thus , according to Rule 14 , \" A connection 's Function task follows upstream block 's Function .", "label": "", "metadata": {}, "score": "55.77596"}
{"text": "When the user can break up the user 's work into segments that do not depend on previous execution , the task interface is ideal .But it also has more power and flexibility , allowing the user to guide the distribution of jobs , without having to assign tasks to engines explicitly .", "label": "", "metadata": {}, "score": "56.33882"}
{"text": "Alternatively , where multiprocessing capability is provided , the sort procedure may be omitted and the taskList used to control execution .Having illustrated and described the principles of our invention in a preferred embodiment thereof , it should be apparent to those skilled in the art that the invention can be modified in arrangement and detail without departing from such principles .", "label": "", "metadata": {}, "score": "56.59842"}
{"text": "7 , the directed graph 114 includes the tasks of data flow diagram 110 properly ordered in accordance with the refined rule list .The rule number which dictates each dependency is indicated with an R adjacent the line indicating that dependency .", "label": "", "metadata": {}, "score": "57.16271"}
{"text": "Thus , it is incremented for each predecessor added to the list .The foregoing data structures facilitate sorting the tasks to produce a partially ordered list for execution or code transmission as further explained in the next section .Methods of Execution .", "label": "", "metadata": {}, "score": "57.39244"}
{"text": "This is the default scheme .Always assign tasks to the engine with the fewest outstanding tasks ( LRU breaks tie ) .Requires numpy .Pick two engines at random using the number of outstanding tasks as inverse weights , and use the one with the lower load .", "label": "", "metadata": {}, "score": "57.432095"}
{"text": "This is the default scheme .Always assign tasks to the engine with the fewest outstanding tasks ( LRU breaks tie ) .Requires numpy .Pick two engines at random using the number of outstanding tasks as inverse weights , and use the one with the lower load .", "label": "", "metadata": {}, "score": "57.432095"}
{"text": "linking the standard processes in accordance with the network , the tasks and the predetermined set of task - positioning rules , thereby defining root processes and dependent processes ; and .executing the root and dependent processes .A method as recited in claim 1 wherein the interleaving step comprises the steps of : . applying internal rules from the set of predetermined task - positioning rules for positioning the tasks associated with each resource relative to each other ; and .", "label": "", "metadata": {}, "score": "57.499893"}
{"text": "This way , if the scheduler realized that a task can never be run , it wo n't sit indefinitely in the scheduler clogging the pipeline .Warning .This analysis has not been proven to be rigorous , so it is likely possible for tasks to become impossible to run in obscure situations , so a timeout may be a good choice .", "label": "", "metadata": {}, "score": "57.76562"}
{"text": "This way , if the scheduler realized that a task can never be run , it wo n't sit indefinitely in the scheduler clogging the pipeline .Warning .This analysis has not been proven to be rigorous , so it is likely possible for tasks to become impossible to run in obscure situations , so a timeout may be a good choice .", "label": "", "metadata": {}, "score": "57.76562"}
{"text": "Identification of these rules is essential to the \" interleaving \" of different resources ' tasks .Interleaving refers to an ordering among all of the tasks associated with a data flow system ( for example , among the 7 tasks shown in Table 90 in FIG .", "label": "", "metadata": {}, "score": "57.852093"}
{"text": "In these cases , you may want to associate some kind of Dependency that describes when , where , or whether a task can be run .In IPython , we provide two types of dependencies : Functional Dependencies and Graph Dependencies .", "label": "", "metadata": {}, "score": "58.16088"}
{"text": "An order of execution of tasks relative to the tasks of other resources is determined by external task - positioning rules .A set of such rules is as follows : . downstream block 's Set - up precedes upstream blocks ' Function ; . downstream block 's Function follows upstream blocks ' Function ; . downstream block 's Terminate follows upstream blocks ' Terminate ; . connection 's Set - up precedes upstream block 's Function ; . connection 's Function follows upstream block 's Function ; and .", "label": "", "metadata": {}, "score": "58.7507"}
{"text": "Application of the ordering rules defines a number of dependencies among the tasks .Each such dependency , for example , that a first task precedes a second task , results in the first task being added to the second task 's list of predecessors and , conversely , the second task being added to the first task 's list of successors .", "label": "", "metadata": {}, "score": "58.78038"}
{"text": "FIG .3 is a second illustrative data flow diagram and corresponding state diagrams and resource table .FIG .4 is a diagram of the dependencies resulting from application of the general task - positioning rules to the tasks associated with the data flow process of FIG .", "label": "", "metadata": {}, "score": "58.796585"}
{"text": "12 .These tasks must precede the multiplier block Function task 162 in accordance with the dependencies shown in FIG .12 as prescribed by ordering Rule 6 ( APP .A ) .Next , the linearization method of execution requires sorting the tasks .", "label": "", "metadata": {}, "score": "58.980923"}
{"text": "In these cases , you 've probably discovered that the component you want is n't a \" leaf node , \" whereas its dependency may be .In these cases you probably want to componentize this dependency first .Exceptions to this might be where the dependency would be fulfilled in entirely different ways , rather than in one common way , by different embedders ; if this is the case then a large client interface may still be appropriate .", "label": "", "metadata": {}, "score": "59.32064"}
{"text": "The interleaving is accomplished in accordance with the internal task - positioning rules set forth above and , additionally , for each resource relative to another in accordance with the following general external task - positioning rules : .Downstream block 's Set - up precedes upstream blocks ' Function .", "label": "", "metadata": {}, "score": "59.444695"}
{"text": "In systems that require them , input ordering restrictions can be included in the prestored code block for implementing the resource , or may be specified as part of data defining the requirements of a particular block .General rules are provided for implementing such restrictions .", "label": "", "metadata": {}, "score": "59.448708"}
{"text": "5 shows a sorted , directed graph of the tasks and dependencies of FIG .4 in which control flows from left to right .It illustrates pictorially a partially ordered list of tasks for execution , discussed below .The tasks are properly interleaved to protect the test instrument and produce valid measurement data .", "label": "", "metadata": {}, "score": "59.479218"}
{"text": "This form assumes that the controller was started on localhost with default configuration .If not , the location of the controller must be given as an argument to the constructor : .For load - balanced execution , we will make use of a LoadBalancedView object , which can be constructed via the client 's load_balanced_view ( ) method : .", "label": "", "metadata": {}, "score": "59.51522"}
{"text": "FIG .16 shows the network of tasks of the data flow process illustrated in FIG .15 as related by the applicable ordering rules .The rule numbers , corresponding to the numbers used in Appendix A , are shown adjacent the respective dependency line in FIG .", "label": "", "metadata": {}, "score": "59.6418"}
{"text": "In a preferred embodiment , all positioning rules are applied ( if they can be applied ) to every data flow diagram .This results in redundant dependencies on occasion , but they cause no harm in practice and allowing them obviates substantial additional code necessary to identify and remove such redundant dependencies .", "label": "", "metadata": {}, "score": "59.771797"}
{"text": "When resources can be in different states , their states must change to perform the computation expressed in the program .Continuing the instrumentation example , each physical device should be in a quiescent , or safe state when not in use .", "label": "", "metadata": {}, "score": "59.947567"}
{"text": "A method as recited in claim 6 wherein the interleaving step further comprises the step of applying input ordering rules from the set of predetermined task - positioning rules to each resource having multiple inputs for positioning the resources upstream of the resource having multiple inputs relative to each other .", "label": "", "metadata": {}, "score": "60.130383"}
{"text": "This makes recovery from engine shutdown very difficult .Previous topic .Next topic .This Page .Quick search .The task interface to the cluster presents the engines as a fault tolerant , dynamic load - balanced system of workers .", "label": "", "metadata": {}, "score": "60.650986"}
{"text": "Often , pure atomic load - balancing is too primitive for your work .In these cases , you may want to associate some kind of Dependency that describes when , where , or whether a task can be run .In IPython , we provide two types of dependencies : Functional Dependencies and Graph Dependencies .", "label": "", "metadata": {}, "score": "60.67104"}
{"text": "The preferred embodiment includes screen \" animation \" such that resources in a data flow diagram are highlighted when their underlying software is executed .The list of tasks and their dependencies can be used to link the instructions or drivers together in a proper sequence for executing the tasks .", "label": "", "metadata": {}, "score": "60.90863"}
{"text": "Since there is no Python logic inside the Scheduler , routing decisions can not be made based on message content .Early destination notification .The Python schedulers know which engine gets which task , and notify the Hub .This allows graceful handling of Engines coming and going .", "label": "", "metadata": {}, "score": "60.979137"}
{"text": "Since there is no Python logic inside the Scheduler , routing decisions can not be made based on message content .Early destination notification .The Python schedulers know which engine gets which task , and notify the Hub .This allows graceful handling of Engines coming and going .", "label": "", "metadata": {}, "score": "60.979137"}
{"text": "( See text below describing FIG .14 . )Within each interior list , the tasks are executed sequentially in any order .Their execution changes the state of the resources , often producing data for their successor tasks .The resulting order of execution is one of many that assure correct execution of the data flow program .", "label": "", "metadata": {}, "score": "61.177048"}
{"text": "In the linearization execution technique , the network of dependencies is partially ordered by a technique called \" topological sorting . \"( Knuth , Donald E. , Fundamental Algorithms , Addison - Wesley , 1973 , Page 258 . )The sorting procedure produces a sequence of lists of tasks called \" interior lists .", "label": "", "metadata": {}, "score": "61.221672"}
{"text": "When an AsyncResult object actually maps multiple results ( e.g. the AsyncMapResult object ) , you can actually iterate through them , and act on the results as they arrive : .but want to perform logic on elements in the result , or even abort subsequent tasks in cases where you are searching for the first affirmative result .", "label": "", "metadata": {}, "score": "61.23864"}
{"text": "Ordering rules are provided for enforcing separate restrictions on data application and signal application and/or removal .Data Structures .In a preferred embodiment , hierarchic data structures are provided for representing in the computer a block diagram representative of a data flow process .", "label": "", "metadata": {}, "score": "61.261406"}
{"text": "If not , the location of the controller must be given as an argument to the constructor : .For load - balanced execution , we will make use of a LoadBalancedView object , which can be constructed via the client 's load_balanced_view ( ) method : .", "label": "", "metadata": {}, "score": "61.34206"}
{"text": "In many cases , you simply want to apply a Python function to a sequence of objects , but in parallel .Like the multiengine interface , these can be implemented via the task interface .The exact same tools can perform these actions in load - balanced ways as well as multiplexed ways : a parallel version of map ( ) and @parallel ( ) function decorator .", "label": "", "metadata": {}, "score": "61.374836"}
{"text": "In many cases , you simply want to apply a Python function to a sequence of objects , but in parallel .Like the multiengine interface , these can be implemented via the task interface .The exact same tools can perform these actions in load - balanced ways as well as multiplexed ways : a parallel version of map ( ) and @parallel ( ) function decorator .", "label": "", "metadata": {}, "score": "61.374836"}
{"text": "The resulting network is an acyclic graph .It may be represented pictorially , as shown e.g. in FIG .12 .The network is used to generate code for controlling the data flow process as more fully explained below .General Task - Positioning Rules .", "label": "", "metadata": {}, "score": "61.635017"}
{"text": "If desired , fix up . gypi files and add export declarations to build it as a component .See examples in other components , e.g. //components / webdata / common / webdata_export.h and its uses .Note that we have tools for moving source files that updates include guards and updates references to files ( # includes and # imports in other source files , references in .", "label": "", "metadata": {}, "score": "61.666985"}
{"text": "20 , the block diagram of FIG .15 is sorted into the sortList shown in FIG .20 in accordance with all the dependencies shown in the network in FIG .19 .Comparison of this diagram to FIG .17 shows the effect of the input ordering restrictions .", "label": "", "metadata": {}, "score": "61.731167"}
{"text": "The turn - on and turn - off restrictions thus implemented in the data structures are applied by rules 21 and 22 , respectively , shown in Appendix A. These restrictions and associated rules give rise to additional dependencies in the data flow network .", "label": "", "metadata": {}, "score": "61.825275"}
{"text": "This scheduler does not support any of the advanced features of the Python Scheduler .Disabled features when using the ZMQ Scheduler : .Engine unregistration .Task farming will be disabled if an engine unregisters .Further , if an engine is unregistered during computation , the scheduler may not recover .", "label": "", "metadata": {}, "score": "61.89811"}
{"text": "This scheduler does not support any of the advanced features of the Python Scheduler .Disabled features when using the ZMQ Scheduler : .Engine unregistration .Task farming will be disabled if an engine unregisters .Further , if an engine is unregistered during computation , the scheduler may not recover .", "label": "", "metadata": {}, "score": "61.89811"}
{"text": "There are other switches for interpretation that are made at the task level .These are specified via keyword arguments to the client 's apply ( ) method .after , follow .You may want to run a task after a given set of dependencies have been run and/or run it where another set of dependencies are met .", "label": "", "metadata": {}, "score": "61.9318"}
{"text": "There are other switches for interpretation that are made at the task level .These are specified via keyword arguments to the client 's apply ( ) method .after , follow .You may want to run a task after a given set of dependencies have been run and/or run it where another set of dependencies are met .", "label": "", "metadata": {}, "score": "61.9318"}
{"text": "The frame structure provides sequential execution of the individual data flow diagrams thus achieving the proper state change sequence .This technique prevents programmers from using a single data flow block to represent a multiple - state resource in cases where the resource 's state changes must be interleaved with those of other resources .", "label": "", "metadata": {}, "score": "61.937416"}
{"text": "failure [ default : False ] .Whether to consider tasks that failed as fulfilling dependencies .Sometimes you want to run a task after another , but only if that task succeeded .In this case , success should be True and failure should be False .", "label": "", "metadata": {}, "score": "62.06862"}
{"text": "failure [ default : False ] .Whether to consider tasks that failed as fulfilling dependencies .Sometimes you want to run a task after another , but only if that task succeeded .In this case , success should be True and failure should be False .", "label": "", "metadata": {}, "score": "62.06862"}
{"text": "3 - 7 ) , the abbreviation \" s \" stands for Set - up , \" f \" stands for Function , and \" t \" refers to Terminate .Referring now to FIG .4 , the collection of tasks to be interleaved to implement the data flow of FIG .", "label": "", "metadata": {}, "score": "62.673286"}
{"text": "Explicit specification , i.e. require the Plasma metadata to list dependencies explicitly .Pros : reliable , allows installing dependencies immediately .Cons : does not work for existing plasmoids , error - prone .Automatic extraction from the source code , similar to how the RPM dependency extractors for scripting languages work .", "label": "", "metadata": {}, "score": "63.02134"}
{"text": "There are some wrapper scripts to simplify this , like Tools / Scripts / check - blink - deps .There are a few wrinkles to be aware of , which result in checkdeps not checking particular directories , confusingly returning SUCCESS without any work .", "label": "", "metadata": {}, "score": "63.222824"}
{"text": "By allowing the IPython scheduler to assign work , this interface is simultaneously simpler and more powerful .Best of all , the user can use both of these interfaces running at the same time to take advantage of their respective strengths .", "label": "", "metadata": {}, "score": "63.229057"}
{"text": "Thereby , a sequence of tasks is produced to control the systems so as to assure valid data collection and protect physical resources from abuse .Data structures are illustrated for implementing the invention in an object - oriented programming environment . prestoring in the computer system for each resource block and physical connection a set of implementing instructions ; . identifying for each prestored set of implementing instructions a set of different types of tasks to be performed for each resource indicated by the block diagram data ; . generating from the network the sequence of computer instructions for controlling the data flow process .", "label": "", "metadata": {}, "score": "63.720093"}
{"text": "For each code block corresponding to a resource used in the process , instructions for implementing each of a set of tasks are identified , as well as a portion of the code block associated with each task .For an electronic test and measurement system , as well as many other systems , the set of tasks associated with a given resource can include no task , or one or more of the tasks : Set - up , Function and Terminate .", "label": "", "metadata": {}, "score": "63.758118"}
{"text": "These kinds of relationships among state changes in resources are termed \" dependencies .\" The power supply can be turned off only when all of the downstream functions that depend on the power supply signal have completed their functions .Likewise , the signal path between the power supply and the next device must be made before the signal is applied and broken only after it has been removed .", "label": "", "metadata": {}, "score": "63.78144"}
{"text": "Cons : dependencies can only be installed on first use , which is not the most user - friendly approach .My plan is to try implementing all 3 approaches .It is likely that a combination of multiple approaches will be retained ( e.g. use explicitly specified dependencies where available , try automatic extraction otherwise , fall back to runtime downloading if everything else fails ) .", "label": "", "metadata": {}, "score": "63.926357"}
{"text": "15 .FIGS . 8 - 14 illustrate a preferred implementation of the invention in a simple software example by means of hierarchic data structures .FIGS .15 - 21 extend the principles of the invention to input ordering in an example of a test system .", "label": "", "metadata": {}, "score": "64.159676"}
{"text": "FIG .5 is a directed , acyclic graph ( DAG ) of the tasks of the data flow diagram of FIG .3 ordered in accordance with the dependencies shown in FIG .4 .FIG .6 is a third illustrative data flow diagram and corresponding resource table .", "label": "", "metadata": {}, "score": "64.35321"}
{"text": "A system of this type may conveniently be modeled and controlled using a block diagram editor and electronic instrument control system designed for this purpose , as described in the above - referenced U.S. Pat .Nos .4,812,996 and 4,868,785 .", "label": "", "metadata": {}, "score": "64.41571"}
{"text": "17 their order was indeterminate .Thus , FIG .20 includes a sorted list of all of the tasks required to properly set up , operate and terminate operation of the system represented by the block diagram in FIG .15 .", "label": "", "metadata": {}, "score": "64.44732"}
{"text": "8 are shown in the network in FIG .12 , as related by the applicable rules .Note , for example , that both of the constant number generators ( 2 and 5 ) and their connections to the multiplier block must function before the multiplier block may Function ( task 162 ) .", "label": "", "metadata": {}, "score": "64.45123"}
{"text": "The task positioning rules in their simplest form include the following internal task positioning rules : .Set - up precedes Function ; .Function precedes Terminate ; and .Set - up precedes Terminate ( if no Function task ) .", "label": "", "metadata": {}, "score": "64.597496"}
{"text": "FIG .19 is a sorted network showing dependencies among the tasks of the data flow diagram of FIG .15 with the DUT 's turn - on and turn - off ordering enforced .FIG .20 is a diagram of the FIG .", "label": "", "metadata": {}, "score": "64.68229"}
{"text": "This sequence is important to avoid abusing the instrument by changing measurement parameters while an upstream device is applying a signal .Once the device is set up , the Function task changes it to ON or active state and the Terminate task returns it to standby state .", "label": "", "metadata": {}, "score": "64.80467"}
{"text": "Refined Task - Positioning Rules .More complex positioning rules may be required to properly order tasks in networks having certain combinations of resources and topology .For example , Appendix A includes a refined set of rules which distinguish among different types of connections ( hardware and software ) and distinguish among types of inputs ( software inputs , hardware inputs and parameter inputs ) .", "label": "", "metadata": {}, "score": "64.80537"}
{"text": "When AsyncResult or the AsyncMapResult do n't provide what you need ( for instance , handling individual results as they arrive , but with metadata ) , you can always just split the original result 's msg_ids attribute , and handle them as you like .", "label": "", "metadata": {}, "score": "64.97226"}
{"text": "The code segments corresponding to the tasks are linked sequentially in accordance with the list .The resulting code may be written to a file or compiled for execution .ILLUSTRATIVE DATA STRUCTURES .FIGS . 8 - 20 include illustrative data structures for implementing the present invention in an object - oriented programming environment .", "label": "", "metadata": {}, "score": "65.3625"}
{"text": "You can manually raise the UnmetDependency yourself , but IPython has provided some decorators for facilitating this behavior .There are two decorators and a class used for functional dependencies : .The @depend decorator lets you decorate any function with any other function to evaluate the dependency .", "label": "", "metadata": {}, "score": "65.455574"}
{"text": "You can manually raise the UnmetDependency yourself , but IPython has provided some decorators for facilitating this behavior .There are two decorators and a class used for functional dependencies : .The @depend decorator lets you decorate any function with any other function to evaluate the dependency .", "label": "", "metadata": {}, "score": "65.455574"}
{"text": "A resource might not have a function task where it has no way of controlling its output .This is the case where an input signal is applied and an output signal is immediately present , as across a resistor .Terminate : A Terminate task makes an output physical signal unavailable , disconnects a resource from an input signal , or returns a resource to a quiescent , ready , or safe state .", "label": "", "metadata": {}, "score": "65.50548"}
{"text": "Referring now to Appendix A , note that rule 4 of the refined rule list applies to this system .It provides , \" A block 's Set - up task follows software connections ' Function [ tasks ] upstream of parameter inputs .", "label": "", "metadata": {}, "score": "65.5551"}
{"text": "Its use is very simple : if a task fails with an UnmetDependency exception , then the scheduler , instead of relaying the error up to the client like any other error , catches the error , and submits the task to a different engine .", "label": "", "metadata": {}, "score": "65.591995"}
{"text": "Its use is very simple : if a task fails with an UnmetDependency exception , then the scheduler , instead of relaying the error up to the client like any other error , catches the error , and submits the task to a different engine .", "label": "", "metadata": {}, "score": "65.591995"}
{"text": "15 is a fifth illustrative data flow diagram including blocks representing hardware instrument resources and connections representing physical data paths .FIG .16 is the network of tasks of the data flow diagram of FIG .15 as related by the applicable ordering rules .", "label": "", "metadata": {}, "score": "65.720024"}
{"text": "This is an integer , specifying how many times a task should be resubmitted after failure .This is useful for tasks that should still run if their engine was shutdown , or may have some statistical chance of failing .The default is to not retry tasks .", "label": "", "metadata": {}, "score": "65.723885"}
{"text": "This is an integer , specifying how many times a task should be resubmitted after failure .This is useful for tasks that should still run if their engine was shutdown , or may have some statistical chance of failing .The default is to not retry tasks .", "label": "", "metadata": {}, "score": "65.723885"}
{"text": "Set - up : A Set - up task uses parameters to prepare a resource to function , placing it in a state ready to produce an output , or ready for the arrival of data ( including physical signals ) .", "label": "", "metadata": {}, "score": "65.856926"}
{"text": "The scheme can be selected via the scheme argument to ipcontroller , or in the TaskScheduler.schemename attribute of a controller config object .The built - in routing schemes : .To select one of these schemes , simply do : . lru : Least Recently Used .", "label": "", "metadata": {}, "score": "65.92253"}
{"text": "The scheme can be selected via the scheme argument to ipcontroller , or in the TaskScheduler.schemename attribute of a controller config object .The built - in routing schemes : .To select one of these schemes , simply do : . lru : Least Recently Used .", "label": "", "metadata": {}, "score": "65.92253"}
{"text": "Present Need .SUMMARY OF THE INVENTION .Overview .An object of the present invention is to implicitly order tasks in a computer controlled test and measurement system so that users need not explicitly do so .Another object of the invention is to automatically generate an executable sequence of computer instructions to control a system of resources topologically interconnected and operable to implement a dataflow process .", "label": "", "metadata": {}, "score": "66.06828"}
{"text": "Provides : This is the easier part because it is already well covered by metadata .The main goal there is to bring the information provided by the metadata into a form usable in RPM .Requires : This is the harder part because the metadata provided by upstream does not currently include dependencies .", "label": "", "metadata": {}, "score": "66.20752"}
{"text": "If the dependency returns anything other than ' ' False ' ' , the rest of the task will continue .In [ 10 ] : def platform_specific ( plat ): .... : import sys .... : return sys .In this case , any time you apply mytask , it will only run on an OSX machine .", "label": "", "metadata": {}, "score": "66.28968"}
{"text": "Input Ordering Restrictions .The invention further provides for properly interleaving tasks for systems in which one or more resources has multiple inputs and the sequence of applying and/or removing input signals is restricted .For example , a device ( or resource ) may have a power supply input and a signal input .", "label": "", "metadata": {}, "score": "66.47496"}
{"text": "The system of resources may conveniently be represented as a block diagram and , preferably , created and manipulated as disclosed in the above - referenced co - pending patents .The method includes providing a computer system including prestored code blocks or drivers for implementing the resources .", "label": "", "metadata": {}, "score": "66.62171"}
{"text": "Though any number of task types may be identified , three types or classes of tasks are sufficient for common instrument control situations .These three tasks are denominated \" Set - up , \" \" Function , \" and \" Terminate .", "label": "", "metadata": {}, "score": "66.66577"}
{"text": "But it also has more power and flexibility , allowing the user to guide the distribution of jobs , without having to assign tasks to engines explicitly .The first step is to import the IPython IPython.parallel module and then create a Client instance , and we will also be using a LoadBalancedView , here called lview : .", "label": "", "metadata": {}, "score": "66.79167"}
{"text": "Whether the dependency is considered met if any of the dependencies are done , or only after all of them have finished .This is set by a Dependency 's all boolean attribute , which defaults to True . success [ default : True ] .", "label": "", "metadata": {}, "score": "66.90025"}
{"text": "Whether the dependency is considered met if any of the dependencies are done , or only after all of them have finished .This is set by a Dependency 's all boolean attribute , which defaults to True . success [ default : True ] .", "label": "", "metadata": {}, "score": "66.90025"}
{"text": "7 is an unsorted diagram of the tasks associated with the data flow of FIG .6 and the dependencies among those tasks .FIG .8 is a fourth illustrative data flow diagram depicting a system which is implemented solely in software to display the product of two numbers .", "label": "", "metadata": {}, "score": "66.942665"}
{"text": "FIG .3 depicts a second illustrative data flow diagram 83 consisting of Stimulus Block A connected to a Sensor B by a physical Connection C. The stimulus A , such as a signal generator , may be in either of two states , ON or OFF .", "label": "", "metadata": {}, "score": "67.01102"}
{"text": "Function ( simple software function , e.g. , fft , add ) .Set - up , Function , Terminate ( device that can control its input , e.g. , digitizer with input coupling ) .Simple Illustration of Data Flow Diagram .", "label": "", "metadata": {}, "score": "67.32324"}
{"text": "If their dependencies are met , they will be assigned to an engine right away , and multiple tasks can be assigned to an engine at a given time .This limit is set with the TaskScheduler.hwm ( high water mark ) configurable in your ipcontroller_config.py config file , with : . # the most common choices are : c .", "label": "", "metadata": {}, "score": "67.67688"}
{"text": "If time permits , some additional aspects of PackageKit integration with KDE can be considered .For example , it would be nice to have a debuginfo installation script for DrKonqi based on PackageKit and KPackageKit / Apper instead of the current solution invoking debuginfo - install in a Konsole ; this will be implemented as an additional deliverable if time permits .", "label": "", "metadata": {}, "score": "67.7715"}
{"text": "Map the high - level tasks into a bugtree whose leaf nodes are individual - CL - granularity bugs .Give all bugs in the bugtree a relevant hotlist ( e.g. , Hotlist - Foo - Component ) so that the list can be easily searched for and analyzed .", "label": "", "metadata": {}, "score": "67.78639"}
{"text": "You can not resubmit a task that is pending - only those that have finished , either successful or unsuccessful .There are a variety of valid ways to determine where jobs should be assigned in a load - balancing situation .", "label": "", "metadata": {}, "score": "68.147095"}
{"text": "You can not resubmit a task that is pending - only those that have finished , either successful or unsuccessful .There are a variety of valid ways to determine where jobs should be assigned in a load - balancing situation .", "label": "", "metadata": {}, "score": "68.147095"}
{"text": "Similarly , FIG .12 reflects the requirements that the product thus produced be valid and the connection from that product to the display must function ( task 188 ) before the display functions ( task 189 ) .This ensures that the information displayed is valid .", "label": "", "metadata": {}, "score": "68.27456"}
{"text": "npm dependencies can have child dependencies and they tend to nest those child dependencies in their respective parent 's directory . - jlafay Jul 11 ' 14 at 13:44 . @jlafay Uh that is right !I forgot this point .Which is a very important difference between bower and npm .", "label": "", "metadata": {}, "score": "68.283325"}
{"text": "This makes recovery from engine shutdown very difficult .I am starting to use these tools and am still in the process of understanding their meta - dependencies .As I see Yeoman , it is a client for npm with some \" wizard \" capabilities .", "label": "", "metadata": {}, "score": "68.32119"}
{"text": "Programmers implementing data flow diagrams using conventional , text - based programming languages ( e.g. , BASIC , C , Pascal , etc . ) not only must identify the relevant tasks and dependencies , but also must order the tasks in a strictly linear way . and do not address resources having multiple states .", "label": "", "metadata": {}, "score": "68.62553"}
{"text": "In effect , these tasks drive the physical device through state transitions taking it from a quiescent or safe state to an active , functioning state , and then back .Other types of resources may require no tasks at all because they have but one state .", "label": "", "metadata": {}, "score": "68.820114"}
{"text": "This could be because it failed for some reason , and you have fixed the error , or because you want to restore the cluster to an interrupted state .For this , the Client has a rc.resubmit ( ) method .", "label": "", "metadata": {}, "score": "68.821976"}
{"text": "This could be because it failed for some reason , and you have fixed the error , or because you want to restore the cluster to an interrupted state .For this , the Client has a rc.resubmit ( ) method .", "label": "", "metadata": {}, "score": "68.821976"}
{"text": "Typical task combinations and representative examples include : .( passive device , e.g. , filter ) .Set - up ( programmable passive device , e.g. , programmable filter bank ) .Set - up , Function ( measurement device , e.g. , multi - meter , digitizer ) .", "label": "", "metadata": {}, "score": "69.14313"}
{"text": "If the dependency returns anything other than ' ' False ' ' , the rest of the task will continue .In [ 10 ] : def platform_specific ( plat ): .... : import sys .... : return sys .In this case , any time you apply mactask , it will only run on an OSX machine .", "label": "", "metadata": {}, "score": "69.39509"}
{"text": "Finally , we highly encourage the usage of \" git cl format \" to ease the tedious process of reformatting that often needs to occur when doing refactorings .If the component will be shared by iOS and has //content dependencies , then you have two choices : .", "label": "", "metadata": {}, "score": "69.50874"}
{"text": "3 , in which the letter S stands for Set - up , F for Function and T for Terminate .Block A accordingly has associated with it a set of tasks including Set - up , Function and Terminate .Set - up generally is conducted with the device in an off or quiescent state and does not change that state , as indicated by arrow 87 .", "label": "", "metadata": {}, "score": "69.68184"}
{"text": "( See Signal Processing WorkSystem \u2122 Technical Backgrounder , Tektronix CAE Systems Division , 1987 ) .All blocks in SPW , including instrument blocks , can be built with control token inputs and outputs .Programmers must explicitly connect control logic to processing blocks to achieve proper ordering of block functions , as well as make connections representing data flow .", "label": "", "metadata": {}, "score": "69.96114"}
{"text": "17 is a diagram of the sortList portion of the data structure of the data flow diagram of FIG .15 , showing the diagram 's sorted task list .FIG .18 is a diagram of another portion of the data structure for the diagram of FIG .", "label": "", "metadata": {}, "score": "70.32933"}
{"text": "A method as recited in claim 2 wherein the generating and executing steps comprise the steps of : . sorting the tasks to form a sorted list of tasks in accordance with the network and the predetermined set of task - positioning rules ; .", "label": "", "metadata": {}, "score": "70.43374"}
{"text": "Proceeding down the hierarchy , each task has data structures including a component for identifying the associated block , an object identifying the type of task , a list of predecessor tasks , a reference count , and a list of successor tasks .", "label": "", "metadata": {}, "score": "70.94449"}
{"text": "The DMM is a physical resource having associated tasks Set - up and Function .The connection C , as noted above , is a physical connection , having associated tasks Set - up and Terminate .Resource table 90 in FIG .", "label": "", "metadata": {}, "score": "71.01853"}
{"text": "Cons : probably needs extra code for each scripting language , can be fooled by convoluted code ( e.g. requesting a data engine in a non - obvious way ) .Runtime downloading , i.e. firing up KPackageKit / Apper ( KPackageKit will be renamed to Apper as of the next upstream release ) when a service which is not installed yet is requested .", "label": "", "metadata": {}, "score": "71.03847"}
{"text": "FIG .6 depicts a third data flow diagram 110 and corresponding resource table 112 .Specifically , the data flow diagram 110 includes three resource blocks , labeled A , B , and C respectively , and interconnections x and y.", "label": "", "metadata": {}, "score": "71.126625"}
{"text": "In [ 62 ] : lview .Parallel functions are just like normal function , but they can be called on sequences and in parallel .The multiengine interface provides a decorator that turns any Python function into a parallel function : .", "label": "", "metadata": {}, "score": "71.14921"}
{"text": "In [ 62 ] : lview .Parallel functions are just like normal function , but they can be called on sequences and in parallel .The multiengine interface provides a decorator that turns any Python function into a parallel function : .", "label": "", "metadata": {}, "score": "71.14921"}
{"text": "A method as recited in claim 3 wherein the sorting step comprises the steps of : . partially ordering the network of tasks and dependencies by topological sorting to produce a list of tasks ; and .sequentially executing each list of tasks on the sorted task list , including sequentially executing the tasks on each sorted task list , thereby changing the state of the corresponding resource and producing data for successor tasks .", "label": "", "metadata": {}, "score": "71.21922"}
{"text": "( Idea by Rex Dieter . )Plasma widgets can be installed from distro packages or through OCS .They can depend on script or data engines .The need to be addressed is how to drag in those dependencies in an effective way .", "label": "", "metadata": {}, "score": "71.45862"}
{"text": "Lines are drawn between the tasks showing dependencies in accordance with the general rules set forth above .The solid lines are dependencies arising from general external positioning rules .The dashed lines show examples of dependencies arising from the general internal positioning rules .", "label": "", "metadata": {}, "score": "71.777054"}
{"text": "// the sample configuration then just provides a template to be copied to jetspeed-mvn-settings.xml // and further configured by the developer / deployer locally .The above example project layout is what the Jetspeed Archetype Maven plugin ( partly ) generates , where the \" my- \" prefix and the maven artifact coordinates ( groupId , artifactId , version ) are configurable .", "label": "", "metadata": {}, "score": "72.07612"}
{"text": "data engines : These engines act as libraries providing some information to plasmoids .They can be used to bridge languages ( e.g. a Python plasmoid can use a data engine written in C ) , share code or just provide a clean frontend ( plasmoid ) / backend ( data engine ) separation .", "label": "", "metadata": {}, "score": "72.17335"}
{"text": "This document is a cookbook -type guide for how to create a new component , and how to extract an existing feature from //chrome into a component .The below diagram shows the place of components in the Chromium hierarchy .Note that the diagram is over - simplified in that not all components allow dependences on //content ; for example , a component that is shared by iOS will either disallow dependencies on //content entirely or be in the form of a layered component .", "label": "", "metadata": {}, "score": "72.20426"}
{"text": "The concurrency of operation of electronic system components also is usefully modeled , and their simulation and control effectively programmed , using data flow systems .Data flow systems are characterized in pertinent part by ( 1 ) data - activated , asynchronous executions of operations ; ( 2 ) operands consumed by operators ; and ( 3 ) the absence of internal state or explicit storage .", "label": "", "metadata": {}, "score": "72.40422"}
{"text": "10 shows additional detail of a block 's data structure .Because the multiplier block is implemented in software , Function is the only task associated with it .Referring now to FIG .11 , Function task 162 itself has a data structure 170 which includes five instance variables .", "label": "", "metadata": {}, "score": "72.476685"}
{"text": "Is n't that a surprising decision ? to duplicate tools inside a framework ?But thanks anyway , that seems to be the answer .- gpe Jul 11 ' 14 at 13:36 .Yes and no ... npm is great , but having bower only for client dependencies is somewhat cleaner than having npm with two configurations , because I certainly do n't like the idea of having jquery - ui or angularjs installed in the node_modules folder .", "label": "", "metadata": {}, "score": "72.63545"}
{"text": "Similarly , the instruction \" Connection position tasks \" 270 applies the task order rules to order the connections ' tasks .Then , the ordered connections ' tasks are appended to taskList .The completed taskList is sorted by the \" BlockDiagram sort \" procedure 276 , and the results used to fill in the sortList collection .", "label": "", "metadata": {}, "score": "72.76489"}
{"text": "Physically , this means that the DMM must be set up , i.e. , set to an appropriate range , before the signal generator functions , i.e. , produces a signal .This restriction protects the DMM input circuitry .This requirement is modeled as a dependency represented by line 98 .", "label": "", "metadata": {}, "score": "72.82637"}
{"text": "Processes that do not depend on others ( i.e. those having no predecessors ) , the root processes , ( i.e. , no predecessors ) are executed .As they complete , they signal their successors .When a waiting process has been signaled by all the upstream processes on which it depends , the waiting process then executes .", "label": "", "metadata": {}, "score": "72.93866"}
{"text": "A close relative of round - robin , it will be fair with respect to the number of tasks , agnostic with respect to runtime of each task .plainrandom : Plain Random .Requires numpy .Pick two engines at random , and use the LRU of the two .", "label": "", "metadata": {}, "score": "73.01465"}
{"text": "A close relative of round - robin , it will be fair with respect to the number of tasks , agnostic with respect to runtime of each task .plainrandom : Plain Random .Requires numpy .Pick two engines at random , and use the LRU of the two .", "label": "", "metadata": {}, "score": "73.01465"}
{"text": "Such applications often include a device producing a physical output , such as a device - under - test , shown here as resource B. Resource C may be a measurement or data acquisition instrument , such as a programmable multimeter .", "label": "", "metadata": {}, "score": "73.01645"}
{"text": "Referring to FIG .2A , each instrument , or \" resource \" , is represented by a block .Blocks 75 , 76 and 77 correspond to the signal generators 68 , 70 and 72 , respectively in FIG .1 .", "label": "", "metadata": {}, "score": "73.27843"}
{"text": "11 is a diagram of the data structure of the Function task of the multiply block of FIG .8 .FIG .12 is a network of tasks of the data flow of FIG .8 as related by the applicable ordering rules shown in Appendix A. .", "label": "", "metadata": {}, "score": "73.69673"}
{"text": "The task interface to the cluster presents the engines as a fault tolerant , dynamic load - balanced system of workers .Unlike the multiengine interface , in the task interface the user have no direct access to individual engines .By allowing the IPython scheduler to assign work , this interface is simultaneously simpler and more powerful .", "label": "", "metadata": {}, "score": "74.3929"}
{"text": "Data flow diagrams can be understood as programs .In these diagrams , blocks represent functions performed on data and connections represent the transmission of data between the functions .When the resources in a data flow diagram represent only computer - based transformations or transmissions of data , a simple rule determines when each can run : upstream resources function before downstream resources .", "label": "", "metadata": {}, "score": "74.413605"}
{"text": "For runtime downloading , this needs to happen when the uninstalled service is requested by a plasmoid .The goal is to have the output of the project included in the KDE Software Compilation 4.8.0 release and in Fedora 16 ( backported , if and to the extent reasonably possible ) or 17 ( as part of 4.8 .", "label": "", "metadata": {}, "score": "74.94519"}
{"text": "9 shows the data structure of the block diagram of FIG .8 .Here and in subsequent data structure illustrations , angled lines such as line 142 in FIG .9 illustrate the hierarchic relationship from one data structure to a descendent data structure , generally shown to the right of its parent .", "label": "", "metadata": {}, "score": "74.97934"}
{"text": "9 is provided by a block diagram editor , similar to that described in U.S. Pat .No . 4,868,875 .The ordered collection 152 designated \" sortList , \" a list of tasks sorted into an appropriate sequence , will be filled in preparation for execution of the data flow diagram , as further explained below .", "label": "", "metadata": {}, "score": "75.10466"}
{"text": "1 .FIG .2B shows the relationship between three of the physical elements of the test system of FIG .1 , and its virtual implementation as a network of blocks and connections in a system according to the present invention .", "label": "", "metadata": {}, "score": "75.18628"}
{"text": "The sequence of execution of these two tasks is unimportant , hence the sortList is termed \" partially ordered .\" The sequence of execution of the interior lists comprising the sortList is important .Thus , the ordered collection 192 must be executed prior to execution of the ordered collection 194 , and so on down the list .", "label": "", "metadata": {}, "score": "75.56216"}
{"text": "An additional object of the invention is to automatically control a test system so as to ensure that collected data is valid .The present invention provides a method of automatically generating a sequence of computer instructions to control a system of resources topologically interconnected and operable to implement a data flow process .", "label": "", "metadata": {}, "score": "75.63045"}
{"text": "A physical connection function also has two related tasks : making the path and breaking it .Finally , the measurement device , such as a multimeter , may require Set - up , such as selecting an appropriate range of measurement , before it properly can \" function , \" i.e. , measure the signal .", "label": "", "metadata": {}, "score": "75.70714"}
{"text": "In test systems such as that described in Jordan , et al , these parameters may be set through a graphic interface .Block A 's Function task , indicated by arrow 89 , takes the signal generator from the OFF state to the ON state , i.e. an active state where the signal generated by A is present at its output .", "label": "", "metadata": {}, "score": "75.72272"}
{"text": "1 includes block diagram editor software for creating and editing block diagrams representing data flow , or simply \" data flow diagrams .\" This hardware and software are described in detail in U.S. Pat .No . 4,868,875 .FIG .", "label": "", "metadata": {}, "score": "75.79781"}
{"text": "It is also easily expandable and customizable to incorporate future changes to the project goals and requirements .The Jetspeed Archetype Maven Plugin can be used as a quickstart to setting up a new custom Jetspeed Portal project and will create a project structure using this standard layout .", "label": "", "metadata": {}, "score": "75.80716"}
{"text": "In practice , some users have been confused by having this optimization on by default , so the default value has been changed to 1 in IPython 0.13 .This can be slower , but has more obvious behavior and wo n't result in assigning too many tasks to some engines in heterogeneous cases .", "label": "", "metadata": {}, "score": "75.83206"}
{"text": "Note that in this first pass you can have the component 's targets be static libraries .Burn down the bugtree , moving files into the component incrementally as their problematic dependencies are eliminated .Once all production code is componentized , do a second pass componentizing unittests ( typically relatively straightforward once the production code has been componentized ) .", "label": "", "metadata": {}, "score": "76.1463"}
{"text": "This way , all artifacts will be buildable and installable directly from the root project , and ( Jetspeed ) integration tasks can be executed from anywhere within this project structure using the jetspeed : mvn plugin .properties files and even a custom override of the Maven user settings.xml with a jetspeed-mvn-settings.xml file .", "label": "", "metadata": {}, "score": "76.3002"}
{"text": "1 .The diagram is created using the block diagram editor system described in Jordan and Stubbs , et al , Ser .No .07/007,234 , and provides the user an interactive means for controlling a hardware system such as that of FIG .", "label": "", "metadata": {}, "score": "76.56747"}
{"text": "Note : If a project dependency can not be satisfied ( for example a missing file ) , the project will likely not be valid .Tigerstripe Modules .Project Dependencies are references to a set of Tigerstripe Modules , for example , pre - packaged , binary - like , versions of Tigerstripe projects .", "label": "", "metadata": {}, "score": "76.64497"}
{"text": "That would be a very good complementary comment on @rvignacio 's answer .- gpe Jul 11 ' 14 at 13:55 .@jlafay , I 've added your comment as a quote .- rvignacio Jul 11 ' 14 at 17:20 I have a project that is built and managed by Maven .", "label": "", "metadata": {}, "score": "76.90988"}
{"text": "Why , where and how is Bower used and needed here ?Why does Yeoman need another package system when it is already using npm ?I know that typically npm is used for server side code and Bower for client side code ( but still on the server , browserify is used for client side ) .", "label": "", "metadata": {}, "score": "76.92383"}
{"text": "The module can further be referenced by other projects .These referenced Tigerstripe Modules are called Project Dependencies .Project Dependencies .Project Dependencies are a list of referenced Tigerstripe Modules required for a Tigerstripe Project .These dependencies typically contain common information models , for example a common definition of a Customer Entity , so that all Service Contracts of an end - to - end solution are based on common definitions .", "label": "", "metadata": {}, "score": "77.26973"}
{"text": "What is the problem in using npm for front - end code ? - gpe Jul 11 ' 14 at 12:51 .@gpe You 're more likely to find front end web packages and resources in bower than npm .Sure npm can install anything it wants to but bower is more common for js libraries / files and css .", "label": "", "metadata": {}, "score": "77.53109"}
{"text": "19 .FIG .21 is a C++ listing , with comments in italics , of code for executing the data flow diagram of FIG .15 based on the sorted task list of FIG .20 .FIG .22 is a diagram generally illustrating the operation of a computer - controlled test system in accordance with the present invention .", "label": "", "metadata": {}, "score": "77.5591"}
{"text": "# # SPC1 # # .Dennis , J. B. , Broy , M. , Control Flow and Data Flow : Concepts of Distributed Programming , Proceedings of NATO Advanced Study Institute International Summer School , Marktoberdorf , Germany , 1984 , at 345 98 .", "label": "", "metadata": {}, "score": "77.6407"}
{"text": "Most of the components currently there are features that previously lived in //chrome but were extracted so that they could be reused by other top - level applications such as //android_webview .New features that may get used by more than one top - level application should be written as components .", "label": "", "metadata": {}, "score": "77.73117"}
{"text": "I was wondering if anybody has seen a technique for adding Maven dependencies to Ant .I thought that Ivy was meant to do this but then I realized that it is only an Ant - style tool for dependency management .", "label": "", "metadata": {}, "score": "77.73872"}
{"text": "Note the presence of a software connection x between resource A and a first input 116 to resource C. The letter p adjacent the input 116 designates a parameter input .A hardware or physical connection y connects resource B to resource C. .", "label": "", "metadata": {}, "score": "77.826294"}
{"text": "8 , a fourth illustrative data flow block diagram 130 shows a data flow system which may be implemented in software exclusively .This data flow system multiplies two constants , 2 and 5 , and displays the resulting product .The diagram consists of blocks 132 , 134 , 136 and 138 and connections 133 , 135 and 137 .", "label": "", "metadata": {}, "score": "77.84834"}
{"text": "Refined rules are set forth below and in APPENDIX A. First , however , application of the general rules to the example of FIG .3 is described .APPLICATION OF THE GENERAL RULES .Referring to FIG .3 , assume that the stimulus ( Block A ) is a signal generator and that the sensor ( Block B ) is a digital multimeter ( DMM ) .", "label": "", "metadata": {}, "score": "77.97187"}
{"text": "This would n't be possible ( using standard Maven configuration ) when these dependencies were incorporated in the default jetspeed war .Portlet Application sub project module(s ) .For building additional portlet applications to be deployed on the custom Jetspeed Portal , one or more additional \" portlet application \" subproject modules can be added to the root project ( note : a common abbriviation for \" portlet application \" is \" pa \" ) .", "label": "", "metadata": {}, "score": "78.069244"}
{"text": "9 is a diagram of a portion of the data structure associated with the block diagram of FIG .8 .FIG .10 is a diagram of a portion of the data structure of the multiply block of FIG .8 .", "label": "", "metadata": {}, "score": "78.20605"}
{"text": "It need have only a single process operating system , for example , MS DOS ( TM ) , to execute the linear code .The target system need not have the interactive graphics capabilities of the block diagram editor , nor the other elements included in a system adapted for implementing the present invention .", "label": "", "metadata": {}, "score": "78.36556"}
{"text": "Create a design document for the componentization and d o a file - by - file analysis of the //chrome dependencies of the production code of the feature ( you can leave the componentization of unit tests for a second pass ) .", "label": "", "metadata": {}, "score": "78.37869"}
{"text": "Right ?So why does Yeoman use two different package management system instead of sticking to one ?This question appears to be off - topic .The users who voted to close gave this specific reason : . \"Questions about general computing hardware and software are off - topic for Stack Overflow unless they directly involve tools used primarily for programming .", "label": "", "metadata": {}, "score": "78.44447"}
{"text": "22 , a diagram is shown illustrating in summary fashion the operation of a computer - controlled test or measurement system in accordance with the present invention .In the upper - left portion of the figure , blockDiagram 260 refers to a data structure called blockDiagram , described above with reference to FIGS . 9 and 14 .", "label": "", "metadata": {}, "score": "78.749115"}
{"text": "The foregoing and other objects , features and advantages of the invention will become more readily apparent from the following detailed description of a preferred embodiment which proceeds with reference to the drawings .BRIEF DESCRIPTION OF THE DRAWINGS .FIG .", "label": "", "metadata": {}, "score": "78.88371"}
{"text": "1 , and block 79 represents the measurement instrument 74 in FIG .1 .Additionally , each physical connection between resources is itself a resource .Thus , connections 80 , 81 , 82 and 78A are resources .In summary , the data flow diagram shown in FIG .", "label": "", "metadata": {}, "score": "79.007"}
{"text": "The task does not itself perform the multiply , but merely signals its parent block , the multiply block , with its task token ( # function ) to generate an output equal to the product of its inputs .Third , Function task 162 data structure includes an ordered collection called \" successors \" which will be filled with tasks which must follow the present task .", "label": "", "metadata": {}, "score": "79.0688"}
{"text": "The multiprocessing execution may be carried out directly in an integrated multiprocessor system , as above .Alternatively , appropriate code may be generated for subsequent execution on a target machine having a multiprocessing operating system .In the multiprocessing technique , each task is made into a standard operating system process .", "label": "", "metadata": {}, "score": "79.07355"}
{"text": "Referring now to FIG .14 , the dashed box 190 outlines a portion of the figure which corresponds to FIG .9 .This figure includes additional data structure showing the contents of the ordered collection called the sortList .The sortList is itself a list of ordered collections or \" interior lists .", "label": "", "metadata": {}, "score": "79.15016"}
{"text": "- rvignacio Jul 11 ' 14 at 14:21 .A npm package can contain anything as far as I know , pictures and css included .npmjs.org / doc / misc / npm - faq.html#what - is - a - package- .", "label": "", "metadata": {}, "score": "79.28215"}
{"text": "13 shows the data structure of the multiplier block Function task 162 after application of the ordering rules .The connection 's Function task 188 now appears in the ordered collection of successors to the Function task 162 of the multiplier block .", "label": "", "metadata": {}, "score": "79.29677"}
{"text": "13 is a diagram of the FIG .11 multiply block 's Function task data structure after the ordering rules shown in Appendix A have been applied .FIG .14 is a diagram of a portion of the data structure of the block diagram of FIG . 8 after topologic sorting of the blocks ' tasks and the connections ' tasks .", "label": "", "metadata": {}, "score": "79.303764"}
{"text": "Electronic instruments and other devices may conveniently be modeled and controlled with the use of computers .For example , interactive control of a measurement instrument may be accomplished through a graphic user interface designed to eliminate direct sequential manipulation of , and obviate detailed familiarity with , the front panel of the instrument .", "label": "", "metadata": {}, "score": "79.40631"}
{"text": "This application is related to U.S. Pat .No .4,868,785 entitled BLOCK DIAGRAM EDITOR SYSTEM AND METHOD FOR CONTROLLING ELECTRONIC INSTRUMENTS , issued Sep. 19 , 1989 to Jordan and Stubbs , et al . ; and to U.S. Pat .", "label": "", "metadata": {}, "score": "79.43716"}
{"text": "21 shows an example of output code , here in C++ language , for controlling the physical test system represented by the data flow diagram of FIG .15 .This code is generated automatically by operation of the invention , obviating the need for a user or programmer to manually interleave tasks .", "label": "", "metadata": {}, "score": "79.51643"}
{"text": "In the resource table 90 , each resource is listed in a first column 92 , each resource is identified in a second column 94 , and the respective tasks associated with each resource are abbreviated in a third column 96 .", "label": "", "metadata": {}, "score": "80.09666"}
{"text": "Multi - state Resources .The simple rule is inadequate when resources represent external devices that have multiple states such as test instruments , devices - under - test , or physical signal paths .For example , a power supply can be off or on .", "label": "", "metadata": {}, "score": "80.1275"}
{"text": "These state changes are illustrated in state diagram 85 in FIG .3 .Finally , the sensor B , e.g. , a measurement device , has a standby or quiescent state and a functioning or active state .Its parameters are set up during the standby or quiescent state .", "label": "", "metadata": {}, "score": "81.252396"}
{"text": "The original ideas by Rex Dieter have buyin from key upstream developers .Getting upstream buyin for my implementation will be an essential part of my project , and there may be some changes to the implementation details based on feedback from upstream Plasma developers .", "label": "", "metadata": {}, "score": "81.433"}
{"text": "Knuth , Donald E. , Fundamental Algorithms , Addison Wesley , 1973 , p. 258 .Tigerstripe Project Dependencies .Because Service Contracts are meant to interact within a complete SOA Solution , very often they will share common information models .", "label": "", "metadata": {}, "score": "81.48125"}
{"text": "( For example , I implemented ConsoleKit support in KDM in time for Fedora 7 on a very short notice .A modified version of that code has been merged upstream into KDE 4.2 , and several distributions had carried earlier versions as patches . )", "label": "", "metadata": {}, "score": "81.754234"}
{"text": "Referring now to the lower right portion of FIG .9 , the contents of the connections list shown by lines 148 include the three connections shown in the block diagram in FIG .8 .Here , an arrow , shown between the names of two blocks , for example , arrow 150 , designates a connection between those two blocks with the direction of the arrow indicating the direction of data flow .", "label": "", "metadata": {}, "score": "81.87938"}
{"text": "That block has no Set - up task , and upon executing its Function task , it generates its output , namely the constant 2 .The next task downstream in FIG .12 is the Function task 184 of the connection 133 which connects the constant generator 132 to the multiplier block 136 ( FIG .", "label": "", "metadata": {}, "score": "81.92609"}
{"text": "some other services , e.g. \" weather ions \" ( plugins for the weather data engine ) .The need to be addressed is how to drag in those dependencies in an effective way : .For Fedora packages , we would like to have the dependencies handled automatically by RPM instead of error - prone manual specification .", "label": "", "metadata": {}, "score": "82.04719"}
{"text": "There are also Maven tasks for ant , though they are not as fully featured .Maven is moving towards Mercury ( particularly for Maven3 ) so it makes sense to use the Mercury tasks .The following configuration reads the dependencies from the specified pom and populates the specified variable with the resultant path : .", "label": "", "metadata": {}, "score": "82.15193"}
{"text": "There are also Maven tasks for ant , though they are not as fully featured .Maven is moving towards Mercury ( particularly for Maven3 ) so it makes sense to use the Mercury tasks .The following configuration reads the dependencies from the specified pom and populates the specified variable with the resultant path : .", "label": "", "metadata": {}, "score": "82.15193"}
{"text": "For a portlet application module , this really is optional and often not needed , as typically just the pa war file needs to be deployed .A common use - case where additional integration tasks might be needed however is when the pa defines and uses a custom database back - end ( or likewise : ldap , JCR etc . ) which needs to be setup / created / upgraded or whatever .", "label": "", "metadata": {}, "score": "82.40428"}
{"text": "Computer - controlled test and measurement systems , including resources having multiple states and resources having multiple inputs , are modeled as data flow diagrams of topologically interconnected resources .Method of generating instruction sequences for controlling data flow processes US 5136705 A .", "label": "", "metadata": {}, "score": "82.72539"}
{"text": "Computer - controlled test and measurement systems , including resources having multiple states and resources having multiple inputs , are modeled as data flow diagrams of topologically interconnected resources .A set of \" tasks \" are defined for changing the states of multiple - state resources and causing software resources to produce output data .", "label": "", "metadata": {}, "score": "82.75863"}
{"text": "Although Tigerstripe modules have a . jar file extension , they contain additional Tigerstripe specific information to further identify the content of a module .This additional information is displayed when selecting a referenced dependency in a Tigerstripe project descriptor ( as show in the above image ) : .", "label": "", "metadata": {}, "score": "82.78877"}
{"text": "I 'd like to reference the maven project from the ant project and pull in all of the required dependencies .Can anyone suggest a way to do this ?For those of you who mentioned Ivy , is there a simpler way to just have the existing ant build find the dependencies from the other project ?", "label": "", "metadata": {}, "score": "82.79211"}
{"text": "executing the executable program on the test system to carry out the data flow process such that the test system produces valid test data .Description .This is a continuation of application Ser .No .206,649 , filed Jun. 14 , 1988 and now abandoned .", "label": "", "metadata": {}, "score": "82.81904"}
{"text": "DETAILED DESCRIPTION .State - changing and Data Producing Tasks .FIG .1 depicts a diagram of a system for testing a device - under - test 71 under computer control .The diagram shows the layout and interconnection of a computer and programmable test instrumentation system for stimulating the device - under - test ( DUT ) 71 , such as an AM modulator , and detecting and analyzing the response .", "label": "", "metadata": {}, "score": "83.250946"}
{"text": "Description : the project description exported into this module at the time of the export operation .We 've started having multiple top - level applications .For one of these ( Chrome for Android ) , the necessary approach was to # ifdef in //chrome , but we want to avoid this for future top - level applications .", "label": "", "metadata": {}, "score": "83.26235"}
{"text": "Function : A Function task produces output data , transforms input data making output data available , or consumes input data to produce some external effect , for example , producing a display , writing to a file , or printing a report .", "label": "", "metadata": {}, "score": "83.64353"}
{"text": "Ant could piggyback at least one great feature of Maven without having to re - invent the wheel .3 Answers 3 .The Maven has a set of Maven ant tasks that can downloaded and placed in your Ant lib directory .", "label": "", "metadata": {}, "score": "83.645355"}
{"text": "4,812,996 entitled SIGNAL VIEWING INSTRUMENTATION CONTROL SYSTEM , issued Mar. 14 , 1989 to Stubbs .BACKGROUND OF THE INVENTION .Field of the Invention .The present invention relates to computer control of electronic test and measurement systems and , more particularly , includes methods and apparatus for generating properly interleaved software to implement a system of multi - state resources topologically interconnected to perform a data flow process , and methods of executing the software .", "label": "", "metadata": {}, "score": "83.73651"}
{"text": "Conceptable project layout and contents .Using the above specification a conceptable custom Jetspeed Portal layout and its contents will look like the following : .Typical project layout and contents .In practice not all of the above possible layout structure and files will be needed .", "label": "", "metadata": {}, "score": "84.00037"}
{"text": "A skip_child_includes in a DEPS file causes subdirectories to not be checked ; this is used in the top - level Chromium DEPS file to not check other repos .The directory needs to look like a source directory , or imports will not be checked ; concretely , it needs to include . svn or . git/. Building Jetspeed .", "label": "", "metadata": {}, "score": "84.640945"}
{"text": "Note : this jetspeed war only contains the default ( demo )Jetspeed Portal web application resources .For pulling in the required portal application jar dependencies ( to be put under its WEB - INF / lib ) folder , the pom.xml contains a dependency on the org.apache.portals.jetspeed-2:jetspeed-dependencies:pom artifact .", "label": "", "metadata": {}, "score": "85.354355"}
{"text": "sequentially executing a portion of the sequence of computer instructions , the portion including instructions for controlling a test instrument , in the sequence determined by the sorted list to operate the test instrument to provide valid test data and protect the test instrument from abuse .", "label": "", "metadata": {}, "score": "85.59888"}
{"text": "To verify dependencies , use tools / checkdeps / checkdeps .py - to use on a different repository , such as Blink , specify the --root option : . tools / checkdeps / checkdeps .py --root third_party / WebKit . tools / checkdeps / checkdeps .", "label": "", "metadata": {}, "score": "85.86517"}
{"text": "FIG .2A is a first illustrative data flow diagram created using a block diagram editor for computer - controlled implementation of a data flow process in the test system of FIG .1 .FIG .2B is a diagram illustrating the conceptual relationship between a selected portion of the physical test system of FIG .", "label": "", "metadata": {}, "score": "85.95103"}
{"text": "Downstream block 's Terminate follows upstream blocks ' Terminate .Connection 's set up precedes upstream block 's Function .Connection 's Function follows upstream block 's Function .Connection 's Terminate follows upstream block 's Terminate .Downstream Block 's Function precedes upstream Block 's Terminate .", "label": "", "metadata": {}, "score": "86.639114"}
{"text": "No particular order of execution is imposed on the tasks in collection 220 .Accordingly , the function generator and the power supply can begin to function , i.e. , produce outputs , in either order , possibly damaging the DUT 206 .", "label": "", "metadata": {}, "score": "87.961784"}
{"text": "The master project .To support central management and configuration of all or most of the individual ( Maven ) project artifacts and ( Jetspeed ) integration tasks , a master / root Maven project pom.xml is used of type pom .", "label": "", "metadata": {}, "score": "88.18024"}
{"text": "- gpe Jul 11 ' 14 at 12:44 .2 Answers 2 .Through our official Generators , we promote the \" Yeoman workflow \" .This workflow is a robust and opinionated client - side stack , comprising tools and frameworks that can help developers quickly build beautiful web applications .", "label": "", "metadata": {}, "score": "88.20503"}
{"text": "Getting picked for GSoC would allow me to spend more time on actual coding benefitting Fedora , not just packaging .[ edit ] Do you have any past involvement with our team or another open source project ?I also contributed patches to several other projects .", "label": "", "metadata": {}, "score": "88.25325"}
{"text": "References such as \" R1 \" , \" R6 \" etc . in the FIGURES refer to the corresponding rules set forth in Appendix A. The number following the R refers to the numbering used in Appendix A. .Appendix B is a list of selected segments of Smalltalk-80 ( TM ) code incorporated in a preferred embodiment of the invention including comments describing the operation of each code segment .", "label": "", "metadata": {}, "score": "88.57084"}
{"text": "Fedora packages ( or distribution packages in general ) : For plasmoids written in C++ , this is the only alternative .the Open Collaboration Services ( OCS ) API , which allows installing plasmoids written in scripting languages directly from upstream .", "label": "", "metadata": {}, "score": "90.05002"}
{"text": "For example , if the user wants to install a Ruby - based plasmoid without having the plasma - scriptengine - ruby package installed , he / she will just get a cryptic error message .( Making Ruby a hard dependency of kdebase - workspace would be highly impractical . )", "label": "", "metadata": {}, "score": "90.22824"}
{"text": "The generated code may be written to a portable storage medium , such as magnetic tape or floppy disk , for subsequent execution on a target system .For example , a target system may be a computer - controlled manufacturing test facility located at a manufacturing site where product ( DUT ) testing is required .", "label": "", "metadata": {}, "score": "90.38832"}
{"text": "FIG .18 shows additional portions of the data structure of the DUT block 206 .The block data structure includes a list of inputs and outputs 232 and a taskList 230 .The data structure of the list of inputs and outputs includes a dictionary of software inputs 234 and a dictionary of hardware ports 236 .", "label": "", "metadata": {}, "score": "90.84924"}
{"text": "The hardware connection C has two states , it simply is made or broken .It may be considered ON when the connection is made , i.e. an electrically conductive path is established between its input and its output , and OFF when the connection is broken .", "label": "", "metadata": {}, "score": "91.17571"}
{"text": "See //components / webdata and //components / autofill / core / browser / webdata .It 's very common in //chrome that an \" everything \" object such as Profile is passed in to initialize an object or a subsystem , which then turns around and retrieves just a couple of more fundamental objects from the Profile .", "label": "", "metadata": {}, "score": "91.64606"}
{"text": "In Smalltalk-80 \u00ae parlance ( Smalltalk-80 is a registered trademark of Xerox Corporation ) , the foregoing three lists or ordered collections are the instance variables of the object BlockDiagram .Proceeding further down the hierarchy shown in FIG .9 , the ordered collection which is a list of blocks contains entries 146 which represent the four blocks shown in FIG .", "label": "", "metadata": {}, "score": "92.75151"}
{"text": "A typical custom Jetspeed Portal project usually contains a module ( sub project ) for building and configuring the custom Jetspeed Portal itself as well as one or more modules for portlet application(s ) to be deployed to the Jetspeed Portal .", "label": "", "metadata": {}, "score": "93.295456"}
{"text": "Other Products .\" LabVIEW \" is a graphic , interactive test and measurement instrument control product available from National Instruments .In LabVIEW , \" virtual instruments \" are created and stored to repeatedly look up and program machine - specific mnemonics for instrument control .", "label": "", "metadata": {}, "score": "94.14396"}
{"text": "The instruction \" BlockDiagram position tasks , \" illustrated by dashed box 262 , first causes assignment of appropriate tasks to each block and to each connection .Next , the instruction \" Block position tasks \" 266 orders the blocks ' tasks by application of internal task order rules , external task order rules and input order rules .", "label": "", "metadata": {}, "score": "94.30634"}
{"text": "\" - zessx , George Stocker .That 's for their common usages .Bower is actually also server - side but for front - end packages , typically .Browserify is client - side .But npm can very well be used for front - end components on the server side .", "label": "", "metadata": {}, "score": "95.06969"}
{"text": "The physical connection 73 from the output of the DUT to the measurement instrument 74 , which may included a switch matrix indicated by dashed box 73A , is represented by connection 78A in the virtual implementation .Finally , the physical measurement instrument 74 is represented by block 79 .", "label": "", "metadata": {}, "score": "97.60712"}
{"text": "Such Plasmoids can depend on services provided by Plasma , in particular : . script engines : These engines add support for a scripting language to Plasma , and their packages also drag in the relevant interpreter through RPM dependencies .Currently supported ( as of 4.6.1 ) are JavaScript , Python , Ruby , and Google Gadgets .", "label": "", "metadata": {}, "score": "98.88075"}
{"text": "The portal sub project module .For building and configuring the custom Jetspeed portal itself , as well as configuring and running Jetspeed Portal specific integration tasks , the root project contains a \" portal \" subproject module .As a Jetspeed Portal is \" just \" a web application , war is used for its pom.xml .", "label": "", "metadata": {}, "score": "99.04088"}
{"text": "Here , there are a signal input 238 and power supply connections 240 , corresponding to the SIG(in ) and V+- inputs to block 206 in FIG .15 .The signal input 238 includes a set of turn - on antecedents 242 and a set of turn - off antecedents 244 .", "label": "", "metadata": {}, "score": "100.62851"}
{"text": "This graph , however , does not impose any input ordering restrictions on the DUT 206 .Sorting the information represented by the network of FIG .16 results in the sortList shown in FIG .17 .Referring to FIG .", "label": "", "metadata": {}, "score": "101.659"}
{"text": "This is an example of what you can declare in your build.xml . . .There are a set of ant tasks for Mercury that allow you to perform dependency management tasks , specify configuration ( e.g. server credentials ) , modify / alter the ant path and write to the repository .", "label": "", "metadata": {}, "score": "102.195496"}
{"text": "Builder Version : the version of Tigerstripe that was used to create this module .This is used to ensure compatibility between Tigerstripe versions .Packaged Date : the date at which the module was created through an export operation .Project Name : the project name as it appeared in the Tigerstripe project that was exported into this module at the time of the export operation .", "label": "", "metadata": {}, "score": "104.357056"}
{"text": "Thus , the signal input 238 requires that the power supply input 240 precede it .Similarly , power supply input data structure 240 provides for lists of turn - on antecedents 246 and turn - off antecedents 248 .The list of turn - off antecedents includes an entry 250 labeled , \" # SIGin , \" a label referring to the signal input 238 .", "label": "", "metadata": {}, "score": "104.39107"}
{"text": "I also have strong experience with Fedora packaging and development , and I am used to working with Fedora in general , and the KDE SIG in particular .In addition , my research contract at my university ( I am a PhD student at the University of Vienna , Austria ) expires in May , so I will have plenty of time to work on my GSoC project ( full time ) .", "label": "", "metadata": {}, "score": "105.71629"}
{"text": "- Jeff Storey Sep 1 ' 09 at 20:11 .There are a set of ant tasks for Mercury that allow you to perform dependency management tasks , specify configuration ( e.g. server credentials ) , modify / alter the ant path and write to the repository .", "label": "", "metadata": {}, "score": "108.03908"}
{"text": "PackageKit integration .I have been using Fedora since Fedora Core 1 , and Red Hat Linux before that .It has been my only operating system since Fedora Core 4 .I started doing volunteer packaging in 2007 , around the time of the Core - Extras Merge , mainly for the KDE SIG .", "label": "", "metadata": {}, "score": "108.508125"}
