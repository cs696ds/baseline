{"text": "It combines context - free grammars with templates and canned text in a single formalism .Thus the granularity of the language model may depend on the application needs .The system currently runs under Solaris 2.5 .It is available freely under a research license .", "label": "", "metadata": {}, "score": "50.15878"}
{"text": "It combines context - free grammars with templates and canned text in a single formalism .Thus the granularity of the language model may depend on the application needs .The system currently runs under Solaris 2.5 .It is available freely under a research license .", "label": "", "metadata": {}, "score": "50.15878"}
{"text": "It combines context - free grammars with templates and canned text in a single formalism .Thus the granularity of the language model may depend on the application needs .The system currently runs under Solaris 2.5 .It is available freely under a research license .", "label": "", "metadata": {}, "score": "50.15878"}
{"text": "It combines context - free grammars with templates and canned text in a single formalism .Thus the granularity of the language model may depend on the application needs .The system currently runs under Solaris 2.5 .It is available freely under a research license .", "label": "", "metadata": {}, "score": "50.15878"}
{"text": "It combines context - free grammars with templates and canned text in a single formalism .Thus the granularity of the language model may depend on the application needs .The system currently runs under Solaris 2.5 .It is available freely under a research license .", "label": "", "metadata": {}, "score": "50.15878"}
{"text": "It combines context - free grammars with templates and canned text in a single formalism .Thus the granularity of the language model may depend on the application needs .The system currently runs under Solaris 2.5 .It is available freely under a research license .", "label": "", "metadata": {}, "score": "50.15878"}
{"text": "It combines context - free grammars with templates and canned text in a single formalism .Thus the granularity of the language model may depend on the application needs .The system currently runs under Solaris 2.5 .It is available freely under a research license .", "label": "", "metadata": {}, "score": "50.15878"}
{"text": "It combines context - free grammars with templates and canned text in a single formalism .Thus the granularity of the language model may depend on the application needs .The system currently runs under Solaris 2.5 .It is available freely under a research license .", "label": "", "metadata": {}, "score": "50.15878"}
{"text": "It combines context - free grammars with templates and canned text in a single formalism .Thus the granularity of the language model may depend on the application needs .The system currently runs under Solaris 2.5 .It is available freely under a research license .", "label": "", "metadata": {}, "score": "50.158783"}
{"text": "The MUG system runs MUG grammars with fixed ( test cases ) and arbitrary input specifications to produce output in a natural language , graphical user interface and possibly in other modes .MUG Workbench can serve to inspect the data - structures used during generation .", "label": "", "metadata": {}, "score": "54.927956"}
{"text": "The MUG system runs MUG grammars with fixed ( test cases ) and arbitrary input specifications to produce output in a natural language , graphical user interface and possibly in other modes .MUG Workbench can serve to inspect the data - structures used during generation .", "label": "", "metadata": {}, "score": "54.927956"}
{"text": "The MUG system runs MUG grammars with fixed ( test cases ) and arbitrary input specifications to produce output in a natural language , graphical user interface and possibly in other modes .MUG Workbench can serve to inspect the data - structures used during generation .", "label": "", "metadata": {}, "score": "54.927956"}
{"text": "The MUG system runs MUG grammars with fixed ( test cases ) and arbitrary input specifications to produce output in a natural language , graphical user interface and possibly in other modes .MUG Workbench can serve to inspect the data - structures used during generation .", "label": "", "metadata": {}, "score": "54.927956"}
{"text": "The MUG system runs MUG grammars with fixed ( test cases ) and arbitrary input specifications to produce output in a natural language , graphical user interface and possibly in other modes .MUG Workbench can serve to inspect the data - structures used during generation .", "label": "", "metadata": {}, "score": "54.927956"}
{"text": "The MUG system runs MUG grammars with fixed ( test cases ) and arbitrary input specifications to produce output in a natural language , graphical user interface and possibly in other modes .MUG Workbench can serve to inspect the data - structures used during generation .", "label": "", "metadata": {}, "score": "54.927956"}
{"text": "Also included is a copy of Elhadad 's thesis , which provides detailed information on the design of FUF and the only documentation available on the SURGE grammar .Version : FUF 5.3 ( 24-APR-94 ) ; SURGE 1.2 ( 21-DEC-93 )", "label": "", "metadata": {}, "score": "55.284172"}
{"text": "Systemic Unification Reusable Grammar for Spanish is a large scale Spanish grammar allowing systems which already use FUF / SURGE for English NLG to be able to generate syntactically ( and many times semantically ) equivalent text in Spanish when new lexical items are introduced .", "label": "", "metadata": {}, "score": "57.38891"}
{"text": "Systemic Unification Reusable Grammar for Spanish is a large scale Spanish grammar allowing systems which already use FUF / SURGE for English NLG to be able to generate syntactically ( and many times semantically ) equivalent text in Spanish when new lexical items are introduced .", "label": "", "metadata": {}, "score": "57.38891"}
{"text": "Systemic Unification Reusable Grammar for Spanish is a large scale Spanish grammar allowing systems which already use FUF / SURGE for English NLG to be able to generate syntactically ( and many times semantically ) equivalent text in Spanish when new lexical items are introduced .", "label": "", "metadata": {}, "score": "57.38891"}
{"text": "Systemic Unification Reusable Grammar for Spanish is a large scale Spanish grammar allowing systems which already use FUF / SURGE for English NLG to be able to generate syntactically ( and many times semantically ) equivalent text in Spanish when new lexical items are introduced .", "label": "", "metadata": {}, "score": "57.38891"}
{"text": "Systemic Unification Reusable Grammar for Spanish is a large scale Spanish grammar allowing systems which already use FUF / SURGE for English NLG to be able to generate syntactically ( and many times semantically ) equivalent text in Spanish when new lexical items are introduced .", "label": "", "metadata": {}, "score": "57.38891"}
{"text": "Systemic Unification Reusable Grammar for Spanish is a large scale Spanish grammar allowing systems which already use FUF / SURGE for English NLG to be able to generate syntactically ( and many times semantically ) equivalent text in Spanish when new lexical items are introduced .", "label": "", "metadata": {}, "score": "57.38891"}
{"text": "The realizer has been enhanced with n - gram models and a supertagging approach called hypertagging .OpenCCG is implemented in Java , and is freely available under the LGPL .Project Reporter generates dynamic web - based project status reports from files created with Microsoft Project or other compatible project management software .", "label": "", "metadata": {}, "score": "58.63035"}
{"text": "The realizer has been enhanced with n - gram models and a supertagging approach called hypertagging .OpenCCG is implemented in Java , and is freely available under the LGPL .Project Reporter generates dynamic web - based project status reports from files created with Microsoft Project or other compatible project management software .", "label": "", "metadata": {}, "score": "58.63035"}
{"text": "CRISP comes with its own implementation of GraphPlan , but it can also output plans in PDDL ( \" Planning Domain Definition Language \" , a successor to STRIPS ) for use with other AI planners .License : LGPL .[ ftp://ftp.cs.cmu.edu/user/ai/new/daydreamer/0new.html DAYDREAMER ] is a computer model of the stream of thought developed at UCLA by Erik T. Mueller from 1983 to 1988 .", "label": "", "metadata": {}, "score": "58.744534"}
{"text": "This directory contains FUF and SURGE .FUF is a natural language generation system based on the formalism of functional unification grammars .SURGE is a large grammar for FUF with a very good coverage of English syntax .SURGE is inspired by systemic grammars [ Halliday 1985 ] and HPSG .", "label": "", "metadata": {}, "score": "59.31715"}
{"text": "Written in Haskell .HALogen is a general - purpose natural language generation system developed by Irene Langkilde - Geary and Kevin Knight at the USC Information Sciences Institute .The download package consists of the symbolic generator , the forest ranker , and some sample inputs .", "label": "", "metadata": {}, "score": "59.41391"}
{"text": "Written in Tcl / Tk .Runs on any machine . is an ultra - simple Java - based realiser .Its grammatical coverage and syntactic knowledge is minuscule compared to KPML or FUF / SURGE .However , because it is so simple , its relatively easy for people to learn how to use it .", "label": "", "metadata": {}, "score": "59.954803"}
{"text": "Written in Tcl / Tk .Runs on any machine . is an ultra - simple Java - based realiser .Its grammatical coverage and syntactic knowledge is minuscule compared to KPML or FUF / SURGE .However , because it is so simple , its relatively easy for people to learn how to use it .", "label": "", "metadata": {}, "score": "59.954807"}
{"text": "Written in Tcl / Tk .Runs on any machine . is an ultra - simple Java - based realiser .Its grammatical coverage and syntactic knowledge is minuscule compared to KPML or FUF / SURGE .However , because it is so simple , its relatively easy for people to learn how to use it .", "label": "", "metadata": {}, "score": "59.954807"}
{"text": "OpenCCG is implemented in Java , and is freely available under the LGPL .Deliverables from the RAGS project - RAGSOCKS software for interfacing modules using RAGS data representations , example RAGS module ( genetic algorithm based text planner ) and RAGS wrapper for FUF / SURGE . is an ultra - simple Java - based realiser .", "label": "", "metadata": {}, "score": "60.945786"}
{"text": "OpenCCG is implemented in Java , and is freely available under the LGPL .Deliverables from the RAGS project - RAGSOCKS software for interfacing modules using RAGS data representations , example RAGS module ( genetic algorithm based text planner ) and RAGS wrapper for FUF / SURGE . is an ultra - simple Java - based realiser .", "label": "", "metadata": {}, "score": "60.945786"}
{"text": "OpenCCG is implemented in Java , and is freely available under the LGPL .Deliverables from the RAGS project - RAGSOCKS software for interfacing modules using RAGS data representations , example RAGS module ( genetic algorithm based text planner ) and RAGS wrapper for FUF / SURGE . is an ultra - simple Java - based realiser .", "label": "", "metadata": {}, "score": "60.945786"}
{"text": "OpenCCG is implemented in Java , and is freely available under the LGPL .Deliverables from the RAGS project - RAGSOCKS software for interfacing modules using RAGS data representations , example RAGS module ( genetic algorithm based text planner ) and RAGS wrapper for FUF / SURGE . is an ultra - simple Java - based realiser .", "label": "", "metadata": {}, "score": "60.945786"}
{"text": "OpenCCG is implemented in Java , and is freely available under the LGPL .Deliverables from the RAGS project - RAGSOCKS software for interfacing modules using RAGS data representations , example RAGS module ( genetic algorithm based text planner ) and RAGS wrapper for FUF / SURGE . is an ultra - simple Java - based realiser .", "label": "", "metadata": {}, "score": "60.945786"}
{"text": "OpenCCG is implemented in Java , and is freely available under the LGPL .Deliverables from the RAGS project - RAGSOCKS software for interfacing modules using RAGS data representations , example RAGS module ( genetic algorithm based text planner ) and RAGS wrapper for FUF / SURGE . is an ultra - simple Java - based realiser .", "label": "", "metadata": {}, "score": "60.945786"}
{"text": "The symbolic generator includes the Sensus Ontology dictionary ( which is based on WordNet ) .The forest ranker includes a 250-million word ngram language model ( unigram , bigram , and trigram ) trained on WSJ newspaper text .", "label": "", "metadata": {}, "score": "62.85298"}
{"text": "The symbolic generator includes the Sensus Ontology dictionary ( which is based on WordNet ) .The forest ranker includes a 250-million word ngram language model ( unigram , bigram , and trigram ) trained on WSJ newspaper text .", "label": "", "metadata": {}, "score": "62.85298"}
{"text": "The symbolic generator includes the Sensus Ontology dictionary ( which is based on WordNet ) .The forest ranker includes a 250-million word ngram language model ( unigram , bigram , and trigram ) trained on WSJ newspaper text .", "label": "", "metadata": {}, "score": "62.85298"}
{"text": "The symbolic generator includes the Sensus Ontology dictionary ( which is based on WordNet ) .The forest ranker includes a 250-million word ngram language model ( unigram , bigram , and trigram ) trained on WSJ newspaper text .", "label": "", "metadata": {}, "score": "62.85298"}
{"text": "The project began in October 2003 and ran until March 2007 .The software was written in Java and is available for Windows and Linux , including source code and database files .Revision as of 11:25 , 7 September 2012 .", "label": "", "metadata": {}, "score": "63.041763"}
{"text": "The generator is located in the file dd_gen . cl .Common lisp source code available under GPL v2 .FUF ] is available as the [ ftp://ftp.cs.bgu.ac.il/pub/fuf/fuf5.3 . to generate syntactically ( and many times semantically ) equivalent text in Spanish when . surface realiser for ( Feature - Based Lexicalised )", "label": "", "metadata": {}, "score": "63.296978"}
{"text": "Commercial product .Implemented in Java .Free 30-day evaluation ; on - line demo on website .Deliverables from the RAGS project - RAGSOCKS software for interfacing modules using RAGS data representations , example RAGS module ( genetic algorithm based text planner ) and RAGS wrapper for FUF / SURGE . is a tool which allows you to graphically annotate the rhetorical structure of your text .", "label": "", "metadata": {}, "score": "63.455284"}
{"text": "Commercial product .Implemented in Java .Free 30-day evaluation ; on - line demo on website .Deliverables from the RAGS project - RAGSOCKS software for interfacing modules using RAGS data representations , example RAGS module ( genetic algorithm based text planner ) and RAGS wrapper for FUF / SURGE . is a tool which allows you to graphically annotate the rhetorical structure of your text .", "label": "", "metadata": {}, "score": "63.455284"}
{"text": "Commercial product .Implemented in Java .Free 30-day evaluation ; on - line demo on website .Deliverables from the RAGS project - RAGSOCKS software for interfacing modules using RAGS data representations , example RAGS module ( genetic algorithm based text planner ) and RAGS wrapper for FUF / SURGE . is a tool which allows you to graphically annotate the rhetorical structure of your text .", "label": "", "metadata": {}, "score": "63.455296"}
{"text": "Syntactic realization package .( A CommonLisp package providing an interpreter for a functional unification formalism called FUF and SURGE , a large grammar of English written in FUF . )Offers download of SURGE 2.2 .Systemic Unification Reusable Grammar for Spanish is a large scale Spanish grammar allowing systems which already use FUF / SURGE for English NLG to be able to generate syntactically ( and many times semantically ) equivalent text in Spanish when new lexical items are introduced .", "label": "", "metadata": {}, "score": "64.20335"}
{"text": "Syntactic realization package .( A CommonLisp package providing an interpreter for a functional unification formalism called FUF and SURGE , a large grammar of English written in FUF . )Offers download of SURGE 2.2 .Systemic Unification Reusable Grammar for Spanish is a large scale Spanish grammar allowing systems which already use FUF / SURGE for English NLG to be able to generate syntactically ( and many times semantically ) equivalent text in Spanish when new lexical items are introduced .", "label": "", "metadata": {}, "score": "64.203354"}
{"text": "Syntactic realization package .( A CommonLisp package providing an interpreter for a functional unification formalism called FUF and SURGE , a large grammar of English written in FUF . )Offers download of SURGE 2.2 .Systemic Unification Reusable Grammar for Spanish is a large scale Spanish grammar allowing systems which already use FUF / SURGE for English NLG to be able to generate syntactically ( and many times semantically ) equivalent text in Spanish when new lexical items are introduced .", "label": "", "metadata": {}, "score": "64.203354"}
{"text": "( Try playing the AVI file in VLC if you run into problems . )Perhaps this system could be considered an instance of the WYSIWYM approach .Syntactic realization package .( A CommonLisp package providing an interpreter for a functional unification formalism called FUF and SURGE , a large grammar of English written in FUF . )", "label": "", "metadata": {}, "score": "64.395584"}
{"text": "( Try playing the AVI file in VLC if you run into problems . )Perhaps this system could be considered an instance of the WYSIWYM approach .Syntactic realization package .( A CommonLisp package providing an interpreter for a functional unification formalism called FUF and SURGE , a large grammar of English written in FUF . )", "label": "", "metadata": {}, "score": "64.395584"}
{"text": "( Try playing the AVI file in VLC if you run into problems . )Perhaps this system could be considered an instance of the WYSIWYM approach .Syntactic realization package .( A CommonLisp package providing an interpreter for a functional unification formalism called FUF and SURGE , a large grammar of English written in FUF . )", "label": "", "metadata": {}, "score": "64.395584"}
{"text": "( Try playing the AVI file in VLC if you run into problems . )Perhaps this system could be considered an instance of the WYSIWYM approach .Syntactic realization package .( A CommonLisp package providing an interpreter for a functional unification formalism called FUF and SURGE , a large grammar of English written in FUF . )", "label": "", "metadata": {}, "score": "64.395584"}
{"text": "( Try playing the AVI file in VLC if you run into problems . )Perhaps this system could be considered an instance of the WYSIWYM approach .Syntactic realization package .( A CommonLisp package providing an interpreter for a functional unification formalism called FUF and SURGE , a large grammar of English written in FUF . )", "label": "", "metadata": {}, "score": "64.395584"}
{"text": "( Try playing the AVI file in VLC if you run into problems . )Perhaps this system could be considered an instance of the WYSIWYM approach .Syntactic realization package .( A CommonLisp package providing an interpreter for a functional unification formalism called FUF and SURGE , a large grammar of English written in FUF . )", "label": "", "metadata": {}, "score": "64.395584"}
{"text": "Revision as of 07:09 , 12 February 2009 .The natural language generation systems listed below are available for download over the web .If you know of a system which is not listed here , please click on Edit in the upper left corner of this page and add the system yourself . surface realiser for ( Feature - Based Lexicalised )", "label": "", "metadata": {}, "score": "64.747604"}
{"text": "These already include a version of the Nigel grammar of English and pre - installed examples .HALogen is a general - purpose natural language generation system developed by Irene Langkilde - Geary and Kevin Knight at the USC Information Sciences Institute .", "label": "", "metadata": {}, "score": "65.004745"}
{"text": "These already include a version of the Nigel grammar of English and pre - installed examples .HALogen is a general - purpose natural language generation system developed by Irene Langkilde - Geary and Kevin Knight at the USC Information Sciences Institute .", "label": "", "metadata": {}, "score": "65.004745"}
{"text": "License : LGPL .[ ftp://ftp.cs.cmu.edu/user/ai/new/daydreamer/0new.html DAYDREAMER ] is a computer model of the stream of thought developed at UCLA by Erik T. Mueller from 1983 to 1988 .The generator is located in the file dd_gen . cl .Common lisp source code available under GPL v2 . surface realiser for ( Feature - Based Lexicalised )", "label": "", "metadata": {}, "score": "65.29985"}
{"text": "License : LGPL .[ ftp://ftp.cs.cmu.edu/user/ai/new/daydreamer/0new.html DAYDREAMER ] is a computer model of the stream of thought developed at UCLA by Erik T. Mueller from 1983 to 1988 .The generator is located in the file dd_gen . cl .Common lisp source code available under GPL v2 . surface realiser for ( Feature - Based Lexicalised )", "label": "", "metadata": {}, "score": "65.29985"}
{"text": "Source code avalailable via darcs . provides a means of exploring large - scale systemic - functional grammars in order to see how they are organized and what kinds of things they cover .It can be used to explore the KPML resources .", "label": "", "metadata": {}, "score": "65.67001"}
{"text": "Source code avalailable via darcs . provides a means of exploring large - scale systemic - functional grammars in order to see how they are organized and what kinds of things they cover .It can be used to explore the KPML resources .", "label": "", "metadata": {}, "score": "65.67001"}
{"text": "Source code avalailable via darcs . provides a means of exploring large - scale systemic - functional grammars in order to see how they are organized and what kinds of things they cover .It can be used to explore the KPML resources .", "label": "", "metadata": {}, "score": "65.67001"}
{"text": "Source code avalailable via darcs . provides a means of exploring large - scale systemic - functional grammars in order to see how they are organized and what kinds of things they cover .It can be used to explore the KPML resources .", "label": "", "metadata": {}, "score": "65.67001"}
{"text": "Source code avalailable via darcs . provides a means of exploring large - scale systemic - functional grammars in order to see how they are organized and what kinds of things they cover .It can be used to explore the KPML resources .", "label": "", "metadata": {}, "score": "65.67001"}
{"text": "Source code avalailable via darcs . provides a means of exploring large - scale systemic - functional grammars in order to see how they are organized and what kinds of things they cover .It can be used to explore the KPML resources .", "label": "", "metadata": {}, "score": "65.67001"}
{"text": "Source code avalailable via darcs . provides a means of exploring large - scale systemic - functional grammars in order to see how they are organized and what kinds of things they cover .It can be used to explore the KPML resources .", "label": "", "metadata": {}, "score": "65.67001"}
{"text": "License : LGPL .DAYDREAMER .DAYDREAMER is a computer model of the stream of thought developed at UCLA by Erik T. Mueller from 1983 to 1988 .The generator is located in the file dd_gen . cl .Common lisp source code available under GPL v2 . surface realiser for ( Feature - Based Lexicalised )", "label": "", "metadata": {}, "score": "65.67957"}
{"text": "License : LGPL .DAYDREAMER .DAYDREAMER is a computer model of the stream of thought developed at UCLA by Erik T. Mueller from 1983 to 1988 .The generator is located in the file dd_gen . cl .Common lisp source code available under GPL v2 . surface realiser for ( Feature - Based Lexicalised )", "label": "", "metadata": {}, "score": "65.67957"}
{"text": "License : LGPL .DAYDREAMER .DAYDREAMER is a computer model of the stream of thought developed at UCLA by Erik T. Mueller from 1983 to 1988 .The generator is located in the file dd_gen . cl .Common lisp source code available under GPL v2 . surface realiser for ( Feature - Based Lexicalised )", "label": "", "metadata": {}, "score": "65.67957"}
{"text": "License : LGPL .DAYDREAMER .DAYDREAMER is a computer model of the stream of thought developed at UCLA by Erik T. Mueller from 1983 to 1988 .The generator is located in the file dd_gen . cl .Common lisp source code available under GPL v2 . surface realiser for ( Feature - Based Lexicalised )", "label": "", "metadata": {}, "score": "65.67957"}
{"text": "License : LGPL .DAYDREAMER .DAYDREAMER is a computer model of the stream of thought developed at UCLA by Erik T. Mueller from 1983 to 1988 .The generator is located in the file dd_gen . cl .Common lisp source code available under GPL v2 . surface realiser for ( Feature - Based Lexicalised )", "label": "", "metadata": {}, "score": "65.67957"}
{"text": "License : LGPL .DAYDREAMER .DAYDREAMER is a computer model of the stream of thought developed at UCLA by Erik T. Mueller from 1983 to 1988 .The generator is located in the file dd_gen . cl .Common lisp source code available under GPL v2 . surface realiser for ( Feature - Based Lexicalised )", "label": "", "metadata": {}, "score": "65.67957"}
{"text": "If you know of a system which is not listed here , please click on Edit in the upper left corner of this page and add the system yourself . surface realiser for ( Feature - Based Lexicalised )Tree Adjoining Grammar and a flat MRS - like semantics ( sans top handle and underspecification ) .", "label": "", "metadata": {}, "score": "65.72603"}
{"text": "The download package consists of the symbolic generator , the forest ranker , and some sample inputs .The symbolic generator includes the Sensus Ontology dictionary ( which is based on WordNet ) .The forest ranker includes a 250-million word ngram language model ( unigram , bigram , and trigram ) trained on WSJ newspaper text .", "label": "", "metadata": {}, "score": "66.22228"}
{"text": "The download package consists of the symbolic generator , the forest ranker , and some sample inputs .The symbolic generator includes the Sensus Ontology dictionary ( which is based on WordNet ) .The forest ranker includes a 250-million word ngram language model ( unigram , bigram , and trigram ) trained on WSJ newspaper text .", "label": "", "metadata": {}, "score": "66.22228"}
{"text": "The download package consists of the symbolic generator , the forest ranker , and some sample inputs .The symbolic generator includes the Sensus Ontology dictionary ( which is based on WordNet ) .The forest ranker includes a 250-million word ngram language model ( unigram , bigram , and trigram ) trained on WSJ newspaper text .", "label": "", "metadata": {}, "score": "66.22228"}
{"text": "The download package consists of the symbolic generator , the forest ranker , and some sample inputs .The symbolic generator includes the Sensus Ontology dictionary ( which is based on WordNet ) .The forest ranker includes a 250-million word ngram language model ( unigram , bigram , and trigram ) trained on WSJ newspaper text .", "label": "", "metadata": {}, "score": "66.22228"}
{"text": "If you know of a system which is not listed here , please click on Edit in the upper left corner of this page and add the system yourself .CLINT is a hybrid template / word - based generation system with an example application of business letter generation .", "label": "", "metadata": {}, "score": "66.37204"}
{"text": "If you know of a system which is not listed here , please click on Edit in the upper left corner of this page and add the system yourself .CLINT is a hybrid template / word - based generation system with an example application of business letter generation .", "label": "", "metadata": {}, "score": "66.37204"}
{"text": "It is based on systemic functional linguistics .Downloadable standalone executables of the system are available for PCs running Windows .The source code is written in ANSI Common Lisp and uses the Common Lisp Interface Manager ( CLIM ) .The system has been compiled and tested under Franz Allegro Common Lisp ( 4.2 , 4.3 , 4.3.1 , 5.0 , 6.0 , 7.0 ) for Unix and Franz Allegro Common Lisp 3.0 and Harlequin Lispworks 4.0 , 4.1 , 4.2 for Windows .", "label": "", "metadata": {}, "score": "66.75989"}
{"text": "It is possible to use the system without the window interface as a generator serving requests for generation across sockets or via files .LKB ( Linguistic Knowledge Builder ) is a grammar engineering environment for unification - based formalisms , typically HPSG .", "label": "", "metadata": {}, "score": "67.13296"}
{"text": "It is possible to use the system without the window interface as a generator serving requests for generation across sockets or via files .LKB ( Linguistic Knowledge Builder ) is a grammar engineering environment for unification - based formalisms , typically HPSG .", "label": "", "metadata": {}, "score": "67.13296"}
{"text": "It is possible to use the system without the window interface as a generator serving requests for generation across sockets or via files .LKB ( Linguistic Knowledge Builder ) is a grammar engineering environment for unification - based formalisms , typically HPSG .", "label": "", "metadata": {}, "score": "67.13296"}
{"text": "It is possible to use the system without the window interface as a generator serving requests for generation across sockets or via files .LKB ( Linguistic Knowledge Builder ) is a grammar engineering environment for unification - based formalisms , typically HPSG .", "label": "", "metadata": {}, "score": "67.13296"}
{"text": "It is possible to use the system without the window interface as a generator serving requests for generation across sockets or via files .LKB ( Linguistic Knowledge Builder ) is a grammar engineering environment for unification - based formalisms , typically HPSG .", "label": "", "metadata": {}, "score": "67.13296"}
{"text": "It is possible to use the system without the window interface as a generator serving requests for generation across sockets or via files .LKB ( Linguistic Knowledge Builder ) is a grammar engineering environment for unification - based formalisms , typically HPSG .", "label": "", "metadata": {}, "score": "67.13296"}
{"text": "Java , Apache license .See demo : Demo of AI Virtual Pet Answering Simple Questions .OpenCCG , the OpenNLP CCG Library ( formerly Grok ) , is both a parser and a realizer for Combinatory Categorial Grammar .It has been used in several dialog systems .", "label": "", "metadata": {}, "score": "67.164406"}
{"text": "Java , Apache license .See demo : Demo of AI Virtual Pet Answering Simple Questions .OpenCCG , the OpenNLP CCG Library ( formerly Grok ) , is both a parser and a realizer for Combinatory Categorial Grammar .It has been used in several dialog systems .", "label": "", "metadata": {}, "score": "67.164406"}
{"text": "Java , Apache license .See demo : Demo of AI Virtual Pet Answering Simple Questions .OpenCCG , the OpenNLP CCG Library ( formerly Grok ) , is both a parser and a realizer for Combinatory Categorial Grammar .It has been used in several dialog systems .", "label": "", "metadata": {}, "score": "67.164406"}
{"text": "Java , Apache license .See demo : Demo of AI Virtual Pet Answering Simple Questions .OpenCCG , the OpenNLP CCG Library ( formerly Grok ) , is both a parser and a realizer for Combinatory Categorial Grammar .It has been used in several dialog systems .", "label": "", "metadata": {}, "score": "67.164406"}
{"text": "Java , Apache license .See demo : Demo of AI Virtual Pet Answering Simple Questions .OpenCCG , the OpenNLP CCG Library ( formerly Grok ) , is both a parser and a realizer for Combinatory Categorial Grammar .It has been used in several dialog systems .", "label": "", "metadata": {}, "score": "67.164406"}
{"text": "Java , Apache license .See demo : Demo of AI Virtual Pet Answering Simple Questions .OpenCCG , the OpenNLP CCG Library ( formerly Grok ) , is both a parser and a realizer for Combinatory Categorial Grammar .It has been used in several dialog systems .", "label": "", "metadata": {}, "score": "67.164406"}
{"text": "Later versions , known as SPUD lite , are written in Prolog .The small codebase of SPUD lite makes it ideal for teaching , but it is also used in dialog system prototypes .The project began in October 2003 and ran until March 2007 .", "label": "", "metadata": {}, "score": "68.14607"}
{"text": "It is based on systemic functional linguistics .Downloadable standalone executables of the system are available for PCs running Windows .The source code is written in ANSI Common Lisp and uses the Common Lisp Interface Manager ( CLIM ) .The system has been compiled and tested [ under Franz Allegro Common Lisp ( 4.2 , 4.3 , 4.3.1 , 5.0 , 6.0 , 7.0 ) for Unix and Franz Allegro Common Lisp 3.0 and Harlequin Lispworks 4.0 , 4.1 , 4.2 for Windows .", "label": "", "metadata": {}, "score": "68.33839"}
{"text": "It is based on systemic functional linguistics .Downloadable standalone executables of the system are available for PCs running Windows .The source code is written in ANSI Common Lisp and uses the Common Lisp Interface Manager ( CLIM ) .The system has been compiled and tested [ under Franz Allegro Common Lisp ( 4.2 , 4.3 , 4.3.1 , 5.0 , 6.0 , 7.0 ) for Unix and Franz Allegro Common Lisp 3.0 and Harlequin Lispworks 4.0 , 4.1 , 4.2 for Windows .", "label": "", "metadata": {}, "score": "68.33839"}
{"text": "SPUD ( Sentence Planner Using Descriptions ) is Matthew Purver 's LTAG - based NLG system .There are two versions : SPUD version 0.01 was written in SML .Later versions , known as SPUD lite , are written in Prolog .", "label": "", "metadata": {}, "score": "68.462"}
{"text": "SPUD ( Sentence Planner Using Descriptions ) is Matthew Purver 's LTAG - based NLG system .There are two versions : SPUD version 0.01 was written in SML .Later versions , known as SPUD lite , are written in Prolog .", "label": "", "metadata": {}, "score": "68.462"}
{"text": "SPUD ( Sentence Planner Using Descriptions ) is Matthew Purver 's LTAG - based NLG system .There are two versions : SPUD version 0.01 was written in SML .Later versions , known as SPUD lite , are written in Prolog .", "label": "", "metadata": {}, "score": "68.462"}
{"text": "SPUD ( Sentence Planner Using Descriptions ) is Matthew Purver 's LTAG - based NLG system .There are two versions : SPUD version 0.01 was written in SML .Later versions , known as SPUD lite , are written in Prolog .", "label": "", "metadata": {}, "score": "68.462"}
{"text": "SPUD ( Sentence Planner Using Descriptions ) is Matthew Purver 's LTAG - based NLG system .There are two versions : SPUD version 0.01 was written in SML .Later versions , known as SPUD lite , are written in Prolog .", "label": "", "metadata": {}, "score": "68.462"}
{"text": "SPUD ( Sentence Planner Using Descriptions ) is Matthew Purver 's LTAG - based NLG system .There are two versions : SPUD version 0.01 was written in SML .Later versions , known as SPUD lite , are written in Prolog .", "label": "", "metadata": {}, "score": "68.462"}
{"text": "The small codebase of SPUD lite makes it ideal for teaching , but it is also used in dialog system prototypes .The project began in October 2003 and ran until March 2007 .The software was written in Java and is available for Windows and Linux , including source code and database files .", "label": "", "metadata": {}, "score": "68.645996"}
{"text": "The small codebase of SPUD lite makes it ideal for teaching , but it is also used in dialog system prototypes .The project began in October 2003 and ran until March 2007 .The software was written in Java and is available for Windows and Linux , including source code and database files .", "label": "", "metadata": {}, "score": "68.645996"}
{"text": "CRISP comes with its own implementation of GraphPlan , but it can also output plans in PDDL ( \" Planning Domain Definition Language \" , a successor to STRIPS ) for use with other AI planners .License : LGPL .The code is a mixture of Java and Scala , a scripting language for the Java virtual machine .", "label": "", "metadata": {}, "score": "69.71393"}
{"text": "CRISP comes with its own implementation of GraphPlan , but it can also output plans in PDDL ( \" Planning Domain Definition Language \" , a successor to STRIPS ) for use with other AI planners .License : LGPL .The code is a mixture of Java and Scala , a scripting language for the Java virtual machine .", "label": "", "metadata": {}, "score": "69.71393"}
{"text": "CRISP comes with its own implementation of GraphPlan , but it can also output plans in PDDL ( \" Planning Domain Definition Language \" , a successor to STRIPS ) for use with other AI planners .License : LGPL .The code is a mixture of Java and Scala , a scripting language for the Java virtual machine .", "label": "", "metadata": {}, "score": "69.71393"}
{"text": "The KPML system offers a robust , mature platform for large - scale grammar engineering that is particularly oriented to multilingual grammar development and generation .It is particularly targetted at providing resources for realistic but broad - coverage generation applications , where both flexibility of expression and speed of generation are at issue - for example in online webpage generation or spoken dialogue .", "label": "", "metadata": {}, "score": "70.093956"}
{"text": "The KPML system offers a robust , mature platform for large - scale grammar engineering that is particularly oriented to multilingual grammar development and generation .It is particularly targetted at providing resources for realistic but broad - coverage generation applications , where both flexibility of expression and speed of generation are at issue - for example in online webpage generation or spoken dialogue .", "label": "", "metadata": {}, "score": "70.093956"}
{"text": "The KPML system offers a robust , mature platform for large - scale grammar engineering that is particularly oriented to multilingual grammar development and generation .It is particularly targetted at providing resources for realistic but broad - coverage generation applications , where both flexibility of expression and speed of generation are at issue - for example in online webpage generation or spoken dialogue .", "label": "", "metadata": {}, "score": "70.093956"}
{"text": "Not to be confused with NLGen2 , below , which uses a different sentence generation theory .Java , Apache license .See demo : Demo of AI Virtual Pet Answering Simple Questions .OpenCCG , the OpenNLP CCG Library ( formerly Grok ) , is both a parser and a realizer for Combinatory Categorial Grammar .", "label": "", "metadata": {}, "score": "70.110275"}
{"text": "License : LGPL .[ ftp://ftp.cs.cmu.edu/user/ai/new/daydreamer/0new.html DAYDREAMER ] is a computer model of the stream of thought developed at UCLA by Erik T. Mueller from 1983 to 1988 .The generator is located in the file dd_gen . cl .Common lisp source code available under GPL v2 .", "label": "", "metadata": {}, "score": "70.210236"}
{"text": "The natural language generation systems listed below are available for download over the web .If you know of a system which is not listed here , please click on Edit in the upper left corner of this page and add the system yourself .", "label": "", "metadata": {}, "score": "70.34837"}
{"text": "LKB is implemented in Common Lisp , and is freely available under an open source license .It includes also a KNOPPIX - based GNU / Linux live - CD , with all the system installed , ready to use .MUG Workbench is a development and debugging tool for Multimodal NLG .", "label": "", "metadata": {}, "score": "72.5335"}
{"text": "LKB is implemented in Common Lisp , and is freely available under an open source license .It includes also a KNOPPIX - based GNU / Linux live - CD , with all the system installed , ready to use .MUG Workbench is a development and debugging tool for Multimodal NLG .", "label": "", "metadata": {}, "score": "72.5335"}
{"text": "LKB is implemented in Common Lisp , and is freely available under an open source license .It includes also a KNOPPIX - based GNU / Linux live - CD , with all the system installed , ready to use .MUG Workbench is a development and debugging tool for Multimodal NLG .", "label": "", "metadata": {}, "score": "72.5335"}
{"text": "LKB is implemented in Common Lisp , and is freely available under an open source license .It includes also a KNOPPIX - based GNU / Linux live - CD , with all the system installed , ready to use .MUG Workbench is a development and debugging tool for Multimodal NLG .", "label": "", "metadata": {}, "score": "72.5335"}
{"text": "LKB is implemented in Common Lisp , and is freely available under an open source license .It includes also a KNOPPIX - based GNU / Linux live - CD , with all the system installed , ready to use .MUG Workbench is a development and debugging tool for Multimodal NLG .", "label": "", "metadata": {}, "score": "72.5335"}
{"text": "LKB is implemented in Common Lisp , and is freely available under an open source license .It includes also a KNOPPIX - based GNU / Linux live - CD , with all the system installed , ready to use .MUG Workbench is a development and debugging tool for Multimodal NLG .", "label": "", "metadata": {}, "score": "72.5335"}
{"text": "Java , . open source .Not to be confused with NLGen , above , which uses a different sentence generation theory .Java , .Apache license .It has been used in several dialog systems .The realizer has been enhanced with n - gram models and a supertagging approach called hypertagging .", "label": "", "metadata": {}, "score": "72.78096"}
{"text": "Written in Haskell .Source code avalailable via darcs . provides a means of exploring large - scale systemic - functional grammars in order to see how they are organized and what kinds of things they cover .It can be used to explore the KPML resources .", "label": "", "metadata": {}, "score": "72.816696"}
{"text": "A demo system which runs under Windows is available for download .A screencast video shows data being entered into computer forms using mouse and keyboard while a feedback text is continually updated and shown below .( Try playing the AVI file in VLC if you run into problems . )", "label": "", "metadata": {}, "score": "72.86394"}
{"text": "A demo system which runs under Windows is available for download .A screencast video shows data being entered into computer forms using mouse and keyboard while a feedback text is continually updated and shown below .( Try playing the AVI file in VLC if you run into problems . )", "label": "", "metadata": {}, "score": "72.863945"}
{"text": "A demo system which runs under Windows is available for download .A screencast video shows data being entered into computer forms using mouse and keyboard while a feedback text is continually updated and shown below .( Try playing the AVI file in VLC if you run into problems . )", "label": "", "metadata": {}, "score": "72.863945"}
{"text": "Written in Haskell .HALogen is a general - purpose natural language generation system developed by Irene Langkilde - Geary and Kevin Knight at the USC Information Sciences Institute .HALogen is a general - purpose natural language generation system developed by Irene Langkilde - Geary and Kevin Knight at the USC Information Sciences Institute .", "label": "", "metadata": {}, "score": "72.96059"}
{"text": "Written in Haskell .HALogen is a general - purpose natural language generation system developed by Irene Langkilde - Geary and Kevin Knight at the USC Information Sciences Institute .HALogen is a general - purpose natural language generation system developed by Irene Langkilde - Geary and Kevin Knight at the USC Information Sciences Institute .", "label": "", "metadata": {}, "score": "72.96059"}
{"text": "It has been used in several dialog systems .The realizer has been enhanced with n - gram models and a supertagging approach called hypertagging .OpenCCG is implemented in Java , and is freely available under the LGPL .It has been used in several dialog systems .", "label": "", "metadata": {}, "score": "73.441574"}
{"text": "These already include a version of the Nigel grammar of English and pre - installed examples .The KPML system offers a robust , mature platform for large - scale grammar engineering that is particularly oriented to multilingual grammar development and generation .", "label": "", "metadata": {}, "score": "74.02365"}
{"text": "These already include a version of the Nigel grammar of English and pre - installed examples .The KPML system offers a robust , mature platform for large - scale grammar engineering that is particularly oriented to multilingual grammar development and generation .", "label": "", "metadata": {}, "score": "74.02365"}
{"text": "These already include a version of the Nigel grammar of English and pre - installed examples .The KPML system offers a robust , mature platform for large - scale grammar engineering that is particularly oriented to multilingual grammar development and generation .", "label": "", "metadata": {}, "score": "74.02365"}
{"text": "These already include a version of the Nigel grammar of English and pre - installed examples .The KPML system offers a robust , mature platform for large - scale grammar engineering that is particularly oriented to multilingual grammar development and generation .", "label": "", "metadata": {}, "score": "74.02365"}
{"text": "These already include a version of the Nigel grammar of English and pre - installed examples .The KPML system offers a robust , mature platform for large - scale grammar engineering that is particularly oriented to multilingual grammar development and generation .", "label": "", "metadata": {}, "score": "74.02365"}
{"text": "These already include a version of the Nigel grammar of English and pre - installed examples .The KPML system offers a robust , mature platform for large - scale grammar engineering that is particularly oriented to multilingual grammar development and generation .", "label": "", "metadata": {}, "score": "74.02365"}
{"text": "The forest ranker includes a 250-million word ngram language model ( unigram , bigram , and trigram ) trained on WSJ newspaper text .The symbolic generator is written in LISP and requires a CommonLisp interpreter .kfNgram is a free stand - alone Windows program for linguistic research which generates lists of n - grams in text and HTML files .", "label": "", "metadata": {}, "score": "74.31212"}
{"text": "The small codebase of SPUD lite makes it ideal for teaching , but it is also used in dialog system prototypes .There are two versions : SPUD version 0.01 was written in SML .Later versions , known as SPUD lite , are written in Prolog .", "label": "", "metadata": {}, "score": "74.57704"}
{"text": "KPML is also used extensively in multilingual text generation research and for teaching .It is based on systemic functional linguistics .Downloadable standalone executables of the system are available for PCs running Windows .The source code is written in ANSI Common Lisp and uses the Common Lisp Interface Manager ( CLIM ) .", "label": "", "metadata": {}, "score": "74.61397"}
{"text": "KPML is also used extensively in multilingual text generation research and for teaching .It is based on systemic functional linguistics .Downloadable standalone executables of the system are available for PCs running Windows .The source code is written in ANSI Common Lisp and uses the Common Lisp Interface Manager ( CLIM ) .", "label": "", "metadata": {}, "score": "74.61397"}
{"text": "KPML is also used extensively in multilingual text generation research and for teaching .It is based on systemic functional linguistics .Downloadable standalone executables of the system are available for PCs running Windows .The source code is written in ANSI Common Lisp and uses the Common Lisp Interface Manager ( CLIM ) .", "label": "", "metadata": {}, "score": "74.61397"}
{"text": "KPML is also used extensively in multilingual text generation research and for teaching .It is based on systemic functional linguistics .Downloadable standalone executables of the system are available for PCs running Windows .The source code is written in ANSI Common Lisp and uses the Common Lisp Interface Manager ( CLIM ) .", "label": "", "metadata": {}, "score": "74.61397"}
{"text": "KPML is also used extensively in multilingual text generation research and for teaching .It is based on systemic functional linguistics .Downloadable standalone executables of the system are available for PCs running Windows .The source code is written in ANSI Common Lisp and uses the Common Lisp Interface Manager ( CLIM ) .", "label": "", "metadata": {}, "score": "74.61397"}
{"text": "KPML is also used extensively in multilingual text generation research and for teaching .It is based on systemic functional linguistics .Downloadable standalone executables of the system are available for PCs running Windows .The source code is written in ANSI Common Lisp and uses the Common Lisp Interface Manager ( CLIM ) .", "label": "", "metadata": {}, "score": "74.61397"}
{"text": "It is set up as a Java package , so it can only be used by Java programs .SPUD .SPUD ( Sentence Planner Using Descriptions ) is Matthew Purver 's LTAG - based NLG system .There are two versions : SPUD version 0.01 was written in SML .", "label": "", "metadata": {}, "score": "76.07068"}
{"text": "It is set up as a Java package , so it can only be used by Java programs .SPUD .SPUD ( Sentence Planner Using Descriptions ) is Matthew Purver 's LTAG - based NLG system .There are two versions : SPUD version 0.01 was written in SML .", "label": "", "metadata": {}, "score": "76.07068"}
{"text": "The small codebase of SPUD lite makes it ideal for teaching , but it is also used in dialog system prototypes .Suregen-2 .Suregen is \" a hybrid , ontology based and NLG - oriented formalism for generating text for documents in clinical medicine .", "label": "", "metadata": {}, "score": "77.11916"}
{"text": "The small codebase of SPUD lite makes it ideal for teaching , but it is also used in dialog system prototypes .Suregen-2 .Suregen is \" a hybrid , ontology based and NLG - oriented formalism for generating text for documents in clinical medicine .", "label": "", "metadata": {}, "score": "77.11916"}
{"text": "CRISP .CRISP is Alexander Koller 's NLG system that tries to cast both microplanning and sentence realisation as an AI planning problem .The code is a mixture of Java and Scala , a scripting language for the Java virtual machine .", "label": "", "metadata": {}, "score": "77.40555"}
{"text": "CRISP .CRISP is Alexander Koller 's NLG system that tries to cast both microplanning and sentence realisation as an AI planning problem .The code is a mixture of Java and Scala , a scripting language for the Java virtual machine .", "label": "", "metadata": {}, "score": "77.40555"}
{"text": "MUG Workbench is a development and debugging tool for Multimodal NLG .The grammar formalism supported is Multimodal Functional Unification Grammar ( MUG ) .The MUG system runs MUG grammars with fixed ( test cases ) and arbitrary input specifications to produce output in a natural language , graphical user interface and possibly in other modes .", "label": "", "metadata": {}, "score": "78.391975"}
{"text": "It has been used in several dialog systems .The realizer has been enhanced with n - gram models and a supertagging approach called hypertagging .OpenCCG is implemented in Java , and is freely available under the LGPL .There are two versions : SPUD version 0.01 was written in SML .", "label": "", "metadata": {}, "score": "78.87569"}
{"text": "It has been used in several dialog systems .The realizer has been enhanced with n - gram models and a supertagging approach called hypertagging .OpenCCG is implemented in Java , and is freely available under the LGPL .There are two versions : SPUD version 0.01 was written in SML .", "label": "", "metadata": {}, "score": "78.87569"}
{"text": "It has been used in several dialog systems .The realizer has been enhanced with n - gram models and a supertagging approach called hypertagging .OpenCCG is implemented in Java , and is freely available under the LGPL .There are two versions : SPUD version 0.01 was written in SML .", "label": "", "metadata": {}, "score": "78.87569"}
{"text": "The system is written in C++ and runs under Microsoft Windows .CRISP .CRISP is Alexander Koller 's NLG system that tries to cast both microplanning and sentence realisation as an AI planning problem .The code is a mixture of Java and Scala , a scripting language for the Java virtual machine .", "label": "", "metadata": {}, "score": "79.38698"}
{"text": "The system is written in C++ and runs under Microsoft Windows .CRISP .CRISP is Alexander Koller 's NLG system that tries to cast both microplanning and sentence realisation as an AI planning problem .The code is a mixture of Java and Scala , a scripting language for the Java virtual machine .", "label": "", "metadata": {}, "score": "79.38698"}
{"text": "The system is written in C++ and runs under Microsoft Windows .CRISP .CRISP is Alexander Koller 's NLG system that tries to cast both microplanning and sentence realisation as an AI planning problem .The code is a mixture of Java and Scala , a scripting language for the Java virtual machine .", "label": "", "metadata": {}, "score": "79.38698"}
{"text": "The system is written in C++ and runs under Microsoft Windows .CRISP .CRISP is Alexander Koller 's NLG system that tries to cast both microplanning and sentence realisation as an AI planning problem .The code is a mixture of Java and Scala , a scripting language for the Java virtual machine .", "label": "", "metadata": {}, "score": "79.38698"}
{"text": "The system is written in C++ and runs under Microsoft Windows .CRISP .CRISP is Alexander Koller 's NLG system that tries to cast both microplanning and sentence realisation as an AI planning problem .The code is a mixture of Java and Scala , a scripting language for the Java virtual machine .", "label": "", "metadata": {}, "score": "79.38698"}
{"text": "LKB ( Linguistic Knowledge Builder ) is a grammar engineering environment for unification - based formalisms , typically HPSG .It includes a realiser that takes as input Minimal Recursion Semantics ( MRS ) .LKB is implemented in Common Lisp , and is freely available under an open source license .", "label": "", "metadata": {}, "score": "79.49332"}
{"text": "LKB ( Linguistic Knowledge Builder ) is a grammar engineering environment for unification - based formalisms , typically HPSG .It includes a realiser that takes as input Minimal Recursion Semantics ( MRS ) .LKB is implemented in Common Lisp , and is freely available under an open source license .", "label": "", "metadata": {}, "score": "79.49332"}
{"text": "License : LGPL . surface realiser for ( Feature - Based Lexicalised )Tree Adjoining Grammar and a flat MRS - like semantics ( sans top handle and underspecification ) .Toy example grammars provided for English and French .Largish core grammar for French is under development ( contact us for details ) .", "label": "", "metadata": {}, "score": "79.934784"}
{"text": "Tree Adjoining Grammar and a flat MRS - like semantics ( sans top handle and underspecification ) .Toy example grammars provided for English and French .Largish core grammar for French is under development ( contact us for details ) .", "label": "", "metadata": {}, "score": "80.38468"}
{"text": "Tree Adjoining Grammar and a flat MRS - like semantics ( sans top handle and underspecification ) .Toy example grammars provided for English and French .Largish core grammar for French is under development ( contact us for details ) .", "label": "", "metadata": {}, "score": "80.38468"}
{"text": "Tree Adjoining Grammar and a flat MRS - like semantics ( sans top handle and underspecification ) .Toy example grammars provided for English and French .Largish core grammar for French is under development ( contact us for details ) .", "label": "", "metadata": {}, "score": "80.38468"}
{"text": "The grammar formalism supported is Multimodal Functional Unification Grammar ( MUG ) .The MUG system runs MUG grammars with fixed ( test cases ) and arbitrary input specifications to produce output in a natural language , graphical user interface and possibly in other modes .", "label": "", "metadata": {}, "score": "82.19818"}
{"text": "The grammar formalism supported is Multimodal Functional Unification Grammar ( MUG ) .The MUG system runs MUG grammars with fixed ( test cases ) and arbitrary input specifications to produce output in a natural language , graphical user interface and possibly in other modes .", "label": "", "metadata": {}, "score": "82.19818"}
{"text": "See here for publications describing NaturalOWL .( GPL ) .NLGen .The NLGen natural language generation system applies the SegSim strategy for generating English sentences .Probabilistic inference for sentence construction is based on a statistical analysis of RelEx output .", "label": "", "metadata": {}, "score": "83.47066"}
{"text": "See here for publications describing NaturalOWL .( GPL ) .NLGen .The NLGen natural language generation system applies the SegSim strategy for generating English sentences .Probabilistic inference for sentence construction is based on a statistical analysis of RelEx output .", "label": "", "metadata": {}, "score": "83.47066"}
{"text": "See here for publications describing NaturalOWL .( GPL ) .NLGen .The NLGen natural language generation system applies the SegSim strategy for generating English sentences .Probabilistic inference for sentence construction is based on a statistical analysis of RelEx output .", "label": "", "metadata": {}, "score": "83.47066"}
{"text": "See here for publications describing NaturalOWL .( GPL ) .NLGen .The NLGen natural language generation system applies the SegSim strategy for generating English sentences .Probabilistic inference for sentence construction is based on a statistical analysis of RelEx output .", "label": "", "metadata": {}, "score": "83.47066"}
{"text": "See here for publications describing NaturalOWL .( GPL ) .NLGen .The NLGen natural language generation system applies the SegSim strategy for generating English sentences .Probabilistic inference for sentence construction is based on a statistical analysis of RelEx output .", "label": "", "metadata": {}, "score": "83.47066"}
{"text": "See here for publications describing NaturalOWL .( GPL ) .NLGen .The NLGen natural language generation system applies the SegSim strategy for generating English sentences .Probabilistic inference for sentence construction is based on a statistical analysis of RelEx output .", "label": "", "metadata": {}, "score": "83.47066"}
{"text": "LKB is implemented in Common Lisp , and is freely available under an open source license .It includes also a KNOPPIX - based GNU / Linux live - CD , with all the system installed , ready to use .Generates descriptions of entities and classes from OWL ontologies that have been annotated with linguistic and user modeling resources expressed in RDF .", "label": "", "metadata": {}, "score": "83.84688"}
{"text": "kfNgram is a free stand - alone Windows program for linguistic research which generates lists of n - grams in text and HTML files .Here n - gram is understood as a sequence of either n words , where n can be any positive integer , also known as lexical bundles , chains , wordgrams , and , in WordSmith , clusters , or else of n characters , also known as chargrams .", "label": "", "metadata": {}, "score": "84.00017"}
{"text": "Revision as of 04:10 , 9 January 2013 .The natural language generation systems listed below are available for download over the web .If you know of a system which is not listed here , please click on Edit in the upper left corner of this page and add the system yourself .", "label": "", "metadata": {}, "score": "84.28281"}
{"text": "However , because it is so simple , its relatively easy for people to learn how to use it .It has been used by many people in Aberdeen , and also for teaching .It is set up as a Java package , so it can only be used by Java programs .", "label": "", "metadata": {}, "score": "84.46069"}
{"text": "However , because it is so simple , its relatively easy for people to learn how to use it .It has been used by many people in Aberdeen , and also for teaching .It is set up as a Java package , so it can only be used by Java programs .", "label": "", "metadata": {}, "score": "84.46069"}
{"text": "However , because it is so simple , its relatively easy for people to learn how to use it .It has been used by many people in Aberdeen , and also for teaching .It is set up as a Java package , so it can only be used by Java programs .", "label": "", "metadata": {}, "score": "84.46069"}
{"text": "However , because it is so simple , its relatively easy for people to learn how to use it .It has been used by many people in Aberdeen , and also for teaching .It is set up as a Java package , so it can only be used by Java programs .", "label": "", "metadata": {}, "score": "84.46069"}
{"text": "However , because it is so simple , its relatively easy for people to learn how to use it .It has been used by many people in Aberdeen , and also for teaching .It is set up as a Java package , so it can only be used by Java programs .", "label": "", "metadata": {}, "score": "84.46069"}
{"text": "However , because it is so simple , its relatively easy for people to learn how to use it .It has been used by many people in Aberdeen , and also for teaching .It is set up as a Java package , so it can only be used by Java programs .", "label": "", "metadata": {}, "score": "84.46069"}
{"text": "Revision as of 11:18 , 7 September 2012 .The natural language generation systems listed below are available for download over the web .If you know of a system which is not listed here , please click on Edit in the upper left corner of this page and add the system yourself .", "label": "", "metadata": {}, "score": "85.05694"}
{"text": "Revision as of 11:25 , 7 September 2012 .The natural language generation systems listed below are available for download over the web .If you know of a system which is not listed here , please click on Edit in the upper left corner of this page and add the system yourself .", "label": "", "metadata": {}, "score": "85.0809"}
{"text": "Revision as of 11:25 , 7 September 2012 .The natural language generation systems listed below are available for download over the web .If you know of a system which is not listed here , please click on Edit in the upper left corner of this page and add the system yourself .", "label": "", "metadata": {}, "score": "85.0809"}
{"text": "Common lisp source code available under GPL v2 . surface realiser for ( Feature - Based Lexicalised )Tree Adjoining Grammar and a flat MRS - like semantics ( sans top handle and underspecification ) .Toy example grammars provided for English and French .", "label": "", "metadata": {}, "score": "85.23392"}
{"text": "Largish core grammar for French is under development ( contact us for details ) .GPL , known to work under Linux and Mac OS X ( potential for making it work on Windows as well ) .Written in Haskell .", "label": "", "metadata": {}, "score": "85.326935"}
{"text": "Largish core grammar for French is under development ( contact us for details ) .GPL , known to work under Linux and Mac OS X ( potential for making it work on Windows as well ) .Written in Haskell .", "label": "", "metadata": {}, "score": "85.326935"}
{"text": "OpenCCG is implemented in Java , and is freely available under the LGPL .There are two versions : SPUD version 0.01 was written in SML .Later versions , known as SPUD lite , are written in Prolog .The small codebase of SPUD lite makes it ideal for teaching , but it is also used in dialog system prototypes .", "label": "", "metadata": {}, "score": "85.686844"}
{"text": "Furthermore , the MUG Workbench is helpful in debugging your grammars .Generates descriptions of entities and classes from OWL ontologies that have been annotated with linguistic and user modeling resources expressed in RDF .Currently supports English and Greek .Extensions for other languages welcome .", "label": "", "metadata": {}, "score": "85.81056"}
{"text": "Furthermore , the MUG Workbench is helpful in debugging your grammars .Generates descriptions of entities and classes from OWL ontologies that have been annotated with linguistic and user modeling resources expressed in RDF .Currently supports English and Greek .Extensions for other languages welcome .", "label": "", "metadata": {}, "score": "85.81056"}
{"text": "Furthermore , the MUG Workbench is helpful in debugging your grammars .Generates descriptions of entities and classes from OWL ontologies that have been annotated with linguistic and user modeling resources expressed in RDF .Currently supports English and Greek .Extensions for other languages welcome .", "label": "", "metadata": {}, "score": "85.81056"}
{"text": "Furthermore , the MUG Workbench is helpful in debugging your grammars .Generates descriptions of entities and classes from OWL ontologies that have been annotated with linguistic and user modeling resources expressed in RDF .Currently supports English and Greek .Extensions for other languages welcome .", "label": "", "metadata": {}, "score": "85.81056"}
{"text": "Furthermore , the MUG Workbench is helpful in debugging your grammars .Generates descriptions of entities and classes from OWL ontologies that have been annotated with linguistic and user modeling resources expressed in RDF .Currently supports English and Greek .Extensions for other languages welcome .", "label": "", "metadata": {}, "score": "85.81056"}
{"text": "Furthermore , the MUG Workbench is helpful in debugging your grammars .Generates descriptions of entities and classes from OWL ontologies that have been annotated with linguistic and user modeling resources expressed in RDF .Currently supports English and Greek .Extensions for other languages welcome .", "label": "", "metadata": {}, "score": "85.81056"}
{"text": "GPL , known to work under Linux and Mac OS X ( potential for making it work on Windows as well ) .Written in Haskell . surface realiser for ( Feature - Based Lexicalised )Tree Adjoining Grammar and a flat MRS - like semantics ( sans top handle and underspecification ) .", "label": "", "metadata": {}, "score": "85.8795"}
{"text": "Author(s ) : Michael Elhadad .Ben Gurion University of the Negev Dept . of Mathematics and Computer Science Beer Sheva , 84105 ISRAEL Tel : +972 ( 57 ) 461 - 626 Keywords : Authors!Elhadad , FUF , Functional Unification Grammar , HPSG , Lisp!Code , NLG , NLP , SURGE , Systemic Grammar , Unification References : ?", "label": "", "metadata": {}, "score": "86.01421"}
{"text": "It is set up as a Java package , so it can only be used by Java programs .Suregen-2 .Suregen is \" a hybrid , ontology based and NLG - oriented formalism for generating text for documents in clinical medicine .", "label": "", "metadata": {}, "score": "86.02607"}
{"text": "Extensions for other languages welcome .NaturalOWL can also be used as a Prot\u00e9g\u00e9 plug - in .See here for publications describing NaturalOWL .( GPL ) .Project Reporter generates dynamic web - based project status reports from files created with Microsoft Project or other compatible project management software .", "label": "", "metadata": {}, "score": "86.23144"}
{"text": "It includes also a KNOPPIX - based GNU / Linux live - CD , with all the system installed , ready to use .Generates descriptions of entities and classes from OWL ontologies that have been annotated with linguistic and user modeling resources expressed in RDF .", "label": "", "metadata": {}, "score": "86.48814"}
{"text": "Copying : Copyright ( c ) 1987 - 93 by Michael Elhadad .Use , copying , and distribution permitted .( See file license.txt for details . )CD - ROM : Prime Time Freeware for AI , Issue 1 - 1 Mailing List : The author is maintaining an informal mailing list of users .", "label": "", "metadata": {}, "score": "86.57059"}
{"text": "Extensions for other languages welcome .NaturalOWL can also be used as a Prot\u00e9g\u00e9 plug - in .See here for publications describing NaturalOWL .( GPL ) .NLGen .The NLGen natural language generation system applies the SegSim strategy for generating English sentences .", "label": "", "metadata": {}, "score": "88.442856"}
{"text": "It can be used to explore the KPML resources .Downloadable standalone executables of the grammar explorer are available for Windows 95/98/NT .These already include a version of the Nigel grammar of English and pre - installed examples .", "label": "", "metadata": {}, "score": "88.446075"}
{"text": "STANDUP .The STANDUP project ( System To Augment Non - speakers ' Dialogue Using Puns ) is a collaborative project on generating simple jokes from a graphical user interface appropriate for non - speaking children .The project began in October 2003 and ran until March 2007 .", "label": "", "metadata": {}, "score": "88.46982"}
{"text": "STANDUP .The STANDUP project ( System To Augment Non - speakers ' Dialogue Using Puns ) is a collaborative project on generating simple jokes from a graphical user interface appropriate for non - speaking children .The project began in October 2003 and ran until March 2007 .", "label": "", "metadata": {}, "score": "88.46982"}
{"text": "STANDUP .The STANDUP project ( System To Augment Non - speakers ' Dialogue Using Puns ) is a collaborative project on generating simple jokes from a graphical user interface appropriate for non - speaking children .The project began in October 2003 and ran until March 2007 .", "label": "", "metadata": {}, "score": "88.46982"}
{"text": "STANDUP .The STANDUP project ( System To Augment Non - speakers ' Dialogue Using Puns ) is a collaborative project on generating simple jokes from a graphical user interface appropriate for non - speaking children .The project began in October 2003 and ran until March 2007 .", "label": "", "metadata": {}, "score": "88.46982"}
{"text": "STANDUP .The STANDUP project ( System To Augment Non - speakers ' Dialogue Using Puns ) is a collaborative project on generating simple jokes from a graphical user interface appropriate for non - speaking children .The project began in October 2003 and ran until March 2007 .", "label": "", "metadata": {}, "score": "88.46982"}
{"text": "STANDUP .The STANDUP project ( System To Augment Non - speakers ' Dialogue Using Puns ) is a collaborative project on generating simple jokes from a graphical user interface appropriate for non - speaking children .The project began in October 2003 and ran until March 2007 .", "label": "", "metadata": {}, "score": "88.46982"}
{"text": "Extensions for other languages welcome .NaturalOWL can also be used as a Prot\u00e9g\u00e9 plug - in .See here for publications describing NaturalOWL .( GPL ) .OpenCCG .OpenCCG , the OpenNLP CCG Library ( formerly Grok ) , is both a parser and a realizer for Combinatory Categorial Grammar .", "label": "", "metadata": {}, "score": "88.536"}
{"text": "It should help you to learn more about the nature of unification grammars used for parsing or natural language generation .Furthermore , the MUG Workbench is helpful in debugging your grammars .Generates descriptions of entities and classes from OWL ontologies that have been annotated with linguistic and user modeling resources expressed in RDF .", "label": "", "metadata": {}, "score": "90.87224"}
{"text": "It should help you to learn more about the nature of unification grammars used for parsing or natural language generation .Furthermore , the MUG Workbench is helpful in debugging your grammars .Generates descriptions of entities and classes from OWL ontologies that have been annotated with linguistic and user modeling resources expressed in RDF .", "label": "", "metadata": {}, "score": "90.87224"}
{"text": "It should help you to learn more about the nature of unification grammars used for parsing or natural language generation .Furthermore , the MUG Workbench is helpful in debugging your grammars .Generates descriptions of entities and classes from OWL ontologies that have been annotated with linguistic and user modeling resources expressed in RDF .", "label": "", "metadata": {}, "score": "90.87224"}
{"text": "Extensions for other languages welcome .( GPL ) .Not to be confused with NLGen2 , below , which uses a different sentence generation theory .Java , Apache license .Not to be confused with NLGen , above , which uses a different sentence generation theory .", "label": "", "metadata": {}, "score": "91.14378"}
{"text": "Extensions for other languages welcome .( GPL ) .Not to be confused with NLGen2 , below , which uses a different sentence generation theory .Java , Apache license .Not to be confused with NLGen , above , which uses a different sentence generation theory .", "label": "", "metadata": {}, "score": "91.14378"}
{"text": "Suregen-2 .Suregen is \" a hybrid , ontology based and NLG - oriented formalism for generating text for documents in clinical medicine .\" The system Suregen-2 is written in ( Allegro ) Common Lisp .A demo system which runs under Windows is available for download .", "label": "", "metadata": {}, "score": "91.17361"}
{"text": "Suregen-2 .Suregen is \" a hybrid , ontology based and NLG - oriented formalism for generating text for documents in clinical medicine .\" The system Suregen-2 is written in ( Allegro ) Common Lisp .A demo system which runs under Windows is available for download .", "label": "", "metadata": {}, "score": "91.17361"}
{"text": "Suregen-2 .Suregen is \" a hybrid , ontology based and NLG - oriented formalism for generating text for documents in clinical medicine .\" The system Suregen-2 is written in ( Allegro ) Common Lisp .A demo system which runs under Windows is available for download .", "label": "", "metadata": {}, "score": "91.17361"}
{"text": "Suregen-2 .Suregen is \" a hybrid , ontology based and NLG - oriented formalism for generating text for documents in clinical medicine .\" The system Suregen-2 is written in ( Allegro ) Common Lisp .A demo system which runs under Windows is available for download .", "label": "", "metadata": {}, "score": "91.17361"}
{"text": "Suregen-2 .Suregen is \" a hybrid , ontology based and NLG - oriented formalism for generating text for documents in clinical medicine .\" The system Suregen-2 is written in ( Allegro ) Common Lisp .A demo system which runs under Windows is available for download .", "label": "", "metadata": {}, "score": "91.17361"}
{"text": "Suregen-2 .Suregen is \" a hybrid , ontology based and NLG - oriented formalism for generating text for documents in clinical medicine .\" The system Suregen-2 is written in ( Allegro ) Common Lisp .A demo system which runs under Windows is available for download .", "label": "", "metadata": {}, "score": "91.17361"}
{"text": "LKB is implemented in Common Lisp , and is freely available under an open source license .LKB is implemented in Common Lisp , and is freely available under an open source license .It includes also a KNOPPIX - based GNU / Linux live - CD , with all the system installed , ready to use .", "label": "", "metadata": {}, "score": "91.3658"}
{"text": "LKB is implemented in Common Lisp , and is freely available under an open source license .LKB is implemented in Common Lisp , and is freely available under an open source license .It includes also a KNOPPIX - based GNU / Linux live - CD , with all the system installed , ready to use .", "label": "", "metadata": {}, "score": "91.3658"}
{"text": "( GPL ) .Not to be confused with NLGen2 , below , which uses a different sentence generation theory .Java , Apache license .Not to be confused with NLGen , above , which uses a different sentence generation theory .", "label": "", "metadata": {}, "score": "94.32185"}
{"text": "Toy example grammars provided for English and French .Largish core grammar for French is under development ( contact us for details ) .GPL , known to work under Linux and Mac OS X ( potential for making it work on Windows as well ) .", "label": "", "metadata": {}, "score": "96.82454"}
{"text": "Toy example grammars provided for English and French .Largish core grammar for French is under development ( contact us for details ) .GPL , known to work under Linux and Mac OS X ( potential for making it work on Windows as well ) .", "label": "", "metadata": {}, "score": "96.82454"}
{"text": "Toy example grammars provided for English and French .Largish core grammar for French is under development ( contact us for details ) .GPL , known to work under Linux and Mac OS X ( potential for making it work on Windows as well ) .", "label": "", "metadata": {}, "score": "96.82454"}
{"text": "Toy example grammars provided for English and French .Largish core grammar for French is under development ( contact us for details ) .GPL , known to work under Linux and Mac OS X ( potential for making it work on Windows as well ) .", "label": "", "metadata": {}, "score": "96.82454"}
{"text": "Toy example grammars provided for English and French .Largish core grammar for French is under development ( contact us for details ) .GPL , known to work under Linux and Mac OS X ( potential for making it work on Windows as well ) .", "label": "", "metadata": {}, "score": "96.82454"}
{"text": "Toy example grammars provided for English and French .Largish core grammar for French is under development ( contact us for details ) .GPL , known to work under Linux and Mac OS X ( potential for making it work on Windows as well ) .", "label": "", "metadata": {}, "score": "96.82454"}
{"text": "Toy example grammars provided for English and French .Largish core grammar for French is under development ( contact us for details ) .GPL , known to work under Linux and Mac OS X ( potential for making it work on Windows as well ) .", "label": "", "metadata": {}, "score": "96.82454"}
{"text": "Toy example grammars provided for English and French .Largish core grammar for French is under development ( contact us for details ) .GPL , known to work under Linux and Mac OS X ( potential for making it work on Windows as well ) .", "label": "", "metadata": {}, "score": "96.82454"}
{"text": "Toy example grammars provided for English and French .Largish core grammar for French is under development ( contact us for details ) .GPL , known to work under Linux and Mac OS X ( potential for making it work on Windows as well ) .", "label": "", "metadata": {}, "score": "96.82454"}
{"text": "Toy example grammars provided for English and French .Largish core grammar for French is under development ( contact us for details ) .GPL , known to work under Linux and Mac OS X ( potential for making it work on Windows as well ) .", "label": "", "metadata": {}, "score": "96.82454"}
{"text": "Currently supports English and Greek .Extensions for other languages welcome .( GPL ) .Generates descriptions of entities and classes from OWL ontologies that have been annotated with linguistic and user modeling resources expressed in RDF .Currently supports English and Greek .", "label": "", "metadata": {}, "score": "108.067924"}
